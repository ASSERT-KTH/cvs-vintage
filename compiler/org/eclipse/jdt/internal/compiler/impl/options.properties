debug.vars.number=1
debug.vars.category=Debug Information
debug.vars.name=Local variable attribute
debug.vars.possibleValues=2|Generate|Do not generate
debug.vars.description=When generated, this attribute will enable local variable names to be displayed in debugger, only in place where variables are definitely assigned (.class file is then bigger)

debug.lines.number=2
debug.lines.category=Debug Information
debug.lines.name=Line number attribute
debug.lines.possibleValues=2|Generate|Do not generate
debug.lines.description=When generated, this attribute will enable source code highlighting in debugger (.class file is then bigger).

debug.source.number=3
debug.source.category=Debug Information
debug.source.name=Source file attribute
debug.source.possibleValues=2|Generate|Do not generate
debug.source.description=When generated, this attribute will enable the debugger to present the corresponding source code.

debug.preserveAllLocals.number=4
debug.preserveAllLocals.category=Code Generation
debug.preserveAllLocals.name=Preserve unused locals
debug.preserveAllLocals.possibleValues=2|Preserve|Optimize out
debug.preserveAllLocals.description=Unless requested to preserve unused local variables (i.e. never read), the compiler will optimize them out, potentially altering debugging

optionalError.unReachableCode.number=5
optionalError.unReachableCode.category=Optional Errors
optionalError.unReachableCode.name=Unreachable code
optionalError.unReachableCode.possibleValues=2|Raise error|Warn
optionalError.unReachableCode.description=Unreachable code can either be reported as an error or a warning

optionalError.importProblem.number=6
optionalError.importProblem.category=Optional Errors
optionalError.importProblem.name=Invalid import
optionalError.importProblem.possibleValues=2|Raise error|Warn
optionalError.importProblem.description=An import statement that cannot be resolved might either be reported either as an error or as a warning

optionalWarning.methodWithConstructorName.number=7
optionalWarning.methodWithConstructorName.category=Optional Warnings
optionalWarning.methodWithConstructorName.name=Method with constructor name
optionalWarning.methodWithConstructorName.possibleValues=2|Warn|Ignore
optionalWarning.methodWithConstructorName.description=Naming a method with a constructor name is generally considered poor style programming. When enabling this option, the compiler will signal such scenarii.

optionalWarning.overridingPackageDefaultMethod.number=8
optionalWarning.overridingPackageDefaultMethod.category=Optional Warnings
optionalWarning.overridingPackageDefaultMethod.name=Overriding a package default method
optionalWarning.overridingPackageDefaultMethod.possibleValues=2|Warn|Ignore
optionalWarning.overridingPackageDefaultMethod.description=A package default method is not visible in a different package, and thus cannot be overriden. When enabling this option, the compiler will signal such scenarii.

optionalWarning.deprecated.number=9
optionalWarning.deprecated.category=Optional Warnings
optionalWarning.deprecated.name=Deprecation
optionalWarning.deprecated.possibleValues=2|Warn|Ignore
optionalWarning.deprecated.description=When enabled, the compiler will signal use of deprecated API.

optionalWarning.maskedCatchBlock.number=10
optionalWarning.maskedCatchBlock.category=Optional Warnings
optionalWarning.maskedCatchBlock.name=Hidden catch block
optionalWarning.maskedCatchBlock.possibleValues=2|Warn|Ignore
optionalWarning.maskedCatchBlock.description=Locally to a try statement, some catch blocks may hide others (e.g. try {throw new java.io.CharConversionException();} catch (java.io.CharConversionException e) {} catch (java.io.IOException e) {}). When enabling this option, the compiler will issue a warning for hidden catch blocks corresponding to checked exceptions

optionalWarning.unusedLocalVariable.number=11
optionalWarning.unusedLocalVariable.category=Optional Warnings
optionalWarning.unusedLocalVariable.name=Unused local variable
optionalWarning.unusedLocalVariable.possibleValues=2|Warn|Ignore
optionalWarning.unusedLocalVariable.description=When enabled, the compiler will issue a warning for unused local variables (i.e. variables never read from)

optionalWarning.unusedArgument.number=12
optionalWarning.unusedArgument.category=Optional Warnings
optionalWarning.unusedArgument.name=Unused parameter
optionalWarning.unusedArgument.possibleValues=2|Warn|Ignore
optionalWarning.unusedArgument.description=When enabled, the compiler will issue a warning for unused method parameters (i.e. parameters never read from)

binaryCompatibility.targetJDK.number=14
binaryCompatibility.targetJDK.category=Binary Compatibility
binaryCompatibility.targetJDK.name=Target platform
binaryCompatibility.targetJDK.possibleValues=2|1.1|1.2
binaryCompatibility.targetJDK.description=Generate .class files either backward compatible with JVM 1.1 or only executable on JVM 1.2 and later

optionalWarning.accessEmulation.number=15
optionalWarning.accessEmulation.category=Optional Warnings
optionalWarning.accessEmulation.name=Synthetic Access Emulation
optionalWarning.accessEmulation.possibleValues=2|Warn|Ignore
optionalWarning.accessEmulation.description=When enabled, the compiler will issue a warning whenever it emulates access to a non-accessible member of an enclosing type

