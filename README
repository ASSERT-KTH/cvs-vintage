			Tomcat Servlet Container
			========================


This subproject contains the source code for the Tomcat servlet container (and
JSP engine) that conforms to the Java Servlet API Specification (version 2.2)
and the JavaServer Pages Specificaton (version 1.1).


Installing and Building Tomcat
==============================

In order to successfully build Tomcat, you will need to do the following.  In
the instructions below, $JAKARTA_HOME is assumed to be the directory into which
you are installing all of the required distributions.  If you are using Win9x,
the $JAKARA_HOME path should not contain spaces.

* Download and install a version 1.1 or later Java Development Kit
  implementation for your operating system platform.  Set a "JAVA_HOME"
  environment variable to point at the directory where your JDK is installed,
  and add "$JAVA_HOME/bin" to your PATH.  Configure the CLASSPATH environment
  variable as well, if required.

* Download and install an XML parser that is compliant with the Java API for
  XML Parsing specification.  You will need to add the appropriate JAR files
  for your parser to your system classpath.  Parsers known to successfully
  build and work with Tomcat include:

  * The JAXP reference implementation (version 1.0 or later), which can be
    downloaded from <http://java.sun.com/xml>.  Make sure that the "jaxp.jar"
    and "parser.jar" files are on your class path.

  * The Xerces parser (version 1.1.2 or later), which can be downloaded
    from <http://xml.apache.org>.  Make sure that the "xerces.jar" is
    on your class path.

  If you plan to build the binary distribution, you will need to download
  JAXP version 1.0.1.  Extract it to your $JAKARTA_HOME directory and
  rename its directory to jaxp-1.0.1.  The binary distribution includes
  jaxp.jar and parser.jar as the built-in XML parser.

* Download and install the Ant version 1.2 distribution (subproject
  "jakarta-ant") into a directory named "$JAKARTA_HOME/jakarta-ant".
  You will need to create the "jakarta-ant" directory and extract the files
  into it. Downloading and installing the binary distribution will avoid
  the need to build the executable version. If you have downloaded the source
  distribution, you will need to build the executable version by executing
  the following commands:

	cd $JAKARTA_HOME/jakarta-ant
	./bootstrap.sh		<-- Unix
	bootstrap		<-- Windows

  This should result in the creation of a file "ant.jar" in the "lib"
  subdirectory, which will be used when building Tomcat.

  Note: If you building from source on Win9x, edit the LPC.BAT file in
  jakarta-ant\src\bin to remove the trailing LF characters.

* Download and install the Servletapi distribution (subproject
  "jakarta-servletapi") into a subdirectory named
  "$JAKARTA_HOME/jakarta-servletapi".  The Servletapi distribution can be found
  at the same location as the Tomcat distribution. Since the
  "jakarta-servletapi" directory is included in the archive, expand the
  distribution to $JAKARTA_HOME. If you have downloaded the source distribution,
  you will need to build the executable version by executing the following
  commands:

	cd $JAKARTA_HOME/jakarta-servletapi
	./build.sh dist		<-- Unix
	build dist		<-- Windows

  This should result in the creation of a file "servlet.jar" in the "lib"
  subdirectory, which will be used when building Tomcat.

* If you want to include SSL support, download and install the Java Secure
  Sockets Extension (JSSE) implementation (current version number is 1.0.2)
  from <http://java.sun.com/products/jsse>.  Include the jars found in its
  "lib" directory in your classpath.

* Download the source distribution of Tomcat (subpackage "jakarta-tomcat"),
  or check it out via anonymous CVS, into a subdirectory named
  "$JAKARTA_HOME/jakarta-tomcat". Since the "jakarta-tomcat" directory is
  included in the archive, expand the source distribution to $JAKARTA_HOME.
  You can now build an "unpacked" version of Tomcat (builds quicker because
  no time is spent JARing up results) by executing the following commands:

	cd $JAKARTA_HOME/jakarta-tomcat
	./build.sh		<-- Unix
	build			<-- Windows

  This version can be executed as follows:

	cd $JAKARTA_HOME/build/tomcat
	./bin/startup.sh	<-- Unix
	bin\startup		<-- Windows

  and it can be shut down as follows:

	cd $JAKARTA_HOME/build/tomcat
	./bin/shutdown.sh	<-- Unix
	bin\shutdown		<-- Windows

* You can also build a binary distribution version of Tomcat as follows:

	cd $JAKARTA_HOME/jakarta-tomcat
	./build.sh dist		<-- Unix
	build dist		<-- Windows

  This will create a distribution in "$JAKARTA_HOME/dist/tomcat" that is
  equivalent (in file arrangement) to the binary distribution releases
  of Tomcat that can be downloaded from the Jakarta web site at
  <http://jakarta.apache.org>.

* You can delete the generated files in the "build/tomcat" and "dist/tomcat"
  directories by executing the following:

	cd $JAKARTA_HOME/jakarta-tomcat
	./build.sh clean	<-- Unix
	build clean		<-- Windows


Running the Build
=================

You can run the "unpacked" version of Tomcat as follows:

* To start Tomcat, execute the following commands:

	cd $JAKARTA_HOME/build/tomcat
	./bin/startup.sh	<-- Unix
	bin\startup		<-- Windows

* You can now access the default web pages from a web browser at URL:

	http://localhost:8080

* To stop Tomcat, execute the following commands:

	cd $JAKARTA_HOME/build/tomcat
	./bin/shutdown.sh	<-- Unix
	bin\shutdown		<-- Windows

You can run the "distribution" version of Tomcat as follows:

* To start Tomcat, execute the following commands:

	cd $JAKARTA_HOME/dist/tomcat
	./bin/startup.sh	<-- Unix
	bin\startup		<-- Windows

* You can now access the default web pages from a web browser at URL:

	http://localhost:8080

* To stop Tomcat, execute the following commands:

	cd $JAKARTA_HOME/dist/tomcat
	./bin/shutdown.sh	<-- Unix
	bin\shutdown		<-- Windows

Alternatively, you can run Tomcat without changing your current working
directory, by setting the TOMCAT_HOME environment variable to point at the
Tomcat files you have built (for example, at directory
"$JAKARTA_HOME/build/tomcat" or "$JAKARTA_HOME/dist/tomcat").  Now, you
can start Tomcat as follows:

	$TOMCAT_HOME/bin/startup.sh	<-- Unix
	%TOMCAT_HOME%\bin\startup	<-- Windows

and shut it down likewise:

	$TOMCAT_HOME/bin/shutdown.sh	<-- Unix
	%TOMCAT_HOME%\bin\shutdown	<-- Windows


Testing the Build
=================

Tomcat includes a small web application with some quick tests to exercize
the various parts of the server.  It is built automatically, along with the
rest of Tomcat, by the steps described above.  To run the tests against the
"unpacked" build, for example, you first need to set the Admin application
to "trusted".  This can be accomplished by executing the following:

	cd $JAKARTA_HOME/build/tomcat	<-- Unix
	./bin/tomcat.sh run -enableAdmin

	cd %JAKARTA_HOME%\build\tomcat	<-- Windows
	bin\tomcat run -enableAdmin

After this, start tomcat with: 

	./bin/startup.sh	<-- Unix
	bin\startup		<-- Windows

To run the test, invoke the following URL in your browser:

	http://localhost:8080/admin/test/test.jsp

and then click "Submit Query".  The build targets for the Ant based test
script are then listed and the tests executed.  After the tests are
completed, the results will appear with "FAILED Tests" listed first,
followed the "PASSED Tests". This same procedure will also work with the
binary distribution which is created in "$JAKARTA_HOME/dist/tomcat".

For security reasons, after you are done with the test, you should either
restore the Admin application to the default "untrusted" state, or change
the password for the "admin" user. To restore the Admin application to the
default "untrusted" state, change trusted="true" to trusted="false" in the
"apps-admin.xml" file found in Tomcat's "conf" directory. If you want to
leave the Admin application as "trusted, you should change the password for
the "admin" user in the "admin-users.xml" file located in Tomcat's
"conf/users" directory.

You can also use the Watchdog compatibility test suite, also available at
<http://jakarta.apache.org>, to test Tomcat's compliance to the servlet and
JSP specifications.



Before Committing Changes
=========================

Before committing any changes to the Tomcat CVS repository, you MUST do a
"build clean" followed by a "build dist" to ensure that the build process runs
cleanly, and you must ensure that the tests run correctly.


