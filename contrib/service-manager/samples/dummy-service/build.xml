<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="compile.library" name="">

    <!-- Load local and user build preferences -->
    <property file="build.properties"/>
    <property file="${user.home}/.build.properties"/>
    <property file="../../project.properties"/>

    <!-- Default values for unspecified properties -->
    <property name="service-manager.jar"    value="../../dist/service-manager.jar"/>
    <property name="commons-digester.jar"    value="../../../../../jakarta-commons/digester/dist/commons-digester.jar"/>


    <!-- Output directory name for all files generated by the build process -->
    <property name="build.home" value="target"/>

    <!-- Output directory name for all dist files -->
    <property name="dist.home" value="dist"/>

    <!-- Should Java compilations set the debug compiler option? -->
    <property name="compile.debug" value="false"/>

    <!-- Should Java compilations set the deprecation compiler option? -->
    <property name="compile.deprecation" value="false"/>

    <!-- Should Java compilations set the optimize compiler option? -->
    <property name="compile.optimize" value="false"/>

    <!-- Name of the core struts library -->
    <property name="app.name" value="dummy-service"/>

<!-- ========== Derived Properties ======================================== -->

    <!-- The base directory for distribution targets -->
    <property name="dist.home" value="dist"/>

    <!-- Source directory -->
    <property name="src.dir" value="src"/>

    <!-- Config files directory -->
    <property name="conf.dir" value="conf"/>

    <!-- Compilation Classpath -->
    <path id="compile.classpath">
      <pathelement location="${service-manager.jar}"/>
      <pathelement location="${commons-digester.jar}"/>
    </path>


<!-- ========== Executable Targets ======================================== -->


    <target name="init">

        <echo message="--------- ${project.name} ${project.version} ---------"/>
        <echo message=""/>

        <echo message="java.class.path = ${java.class.path}"/>
        <echo message="java.home = ${java.home}"/>
        <echo message="user.home = ${user.home}"/>

    </target>

<!--          Create directories and copy files for the core library -->
    <target depends="init" name="prepare.library">
        <mkdir dir="${build.home}/classes"/>
    </target>

<!--          Compile core factory library directory components -->
    <target depends="prepare.library" description="Compile library files" name="compile.library">
        <javac 
           debug="${compile.debug}" 
           deprecation="${compile.deprecation}" 
           destdir="${build.home}/classes" 
           optimize="${compile.optimize}" 
           srcdir="${src.dir}">
          <classpath refid="compile.classpath"/>
        </javac>
        <copy todir="${build.home}/classes/META-INF">
            <fileset dir="${conf.dir}" includes="*.xml"/>
        </copy>
        <jar basedir="${build.home}/classes" includes="**" jarfile="${build.home}/${app.name}.jar" manifest="${conf.dir}/MANIFEST.MF"/>
        <copy 
          file="${build.home}/${app.name}.jar" 
          todir="${dist.home}"/>
    </target>

    <target name="compile.javadoc" depends="init">
        <mkdir dir="${build.home}/doc"/>
        <javadoc
           sourcepath="${src.dir}"
           destdir="${build.home}/doc"
           packagenames="org.apache.struts.*"
           windowtitle="Apache Struts ServiceManager extension API Documentation"
           bottom="Copyright &#169; 2000-2001 - Apache Software Foundation"
           author="true"
           version="true"/>
    </target>

    <target name="doc" depends="compile.javadoc">
        <zip zipfile="${dist.home}/${project.name}-doc.zip" basedir="${build.home}/doc"/>
        <tar 
            tarfile="${dist.home}/${project.name}-doc.tar" 
            basedir="${build.home}/doc"/>
        <gzip 
            src="${dist.home}/${project.name}-doc.tar" 
            zipfile="${dist.home}/${project.name}-doc.tar.gz" />
        <delete file="${dist.home}/${project.name}-doc.tar"/>
    </target>

<!--         Clean up build and distribution directories -->
    <target description="Clean build and distribution directories" name="clean">
        <delete dir="${build.home}"/>
        <delete dir="${dist.home}"/>
    </target>

<!--         All-in-one build target -->
    <target depends="clean,compile.library,doc" description="Clean and build library and web applications" name="all"/>

</project>
