<!--
@author Ted Husted
@author Craig McClanahan
@version $Revision: 1.7 $ $Date: 2003/06/11 17:51:37 $
-->

<project name="struts-legacy" default="compile">


    <!-- ========== Initialize User Preferences =========================== -->
    <!-- See "build.properties.sample" for the preferences you can set      -->

    <property file="build.properties"/>               <!-- Component local  -->
    <property file="../../build.properties"/>         <!-- Struts local    -->
    <property file="${user.home}/build.properties"/>  <!-- User local       -->


    <!-- ========== External Dependencies ================================= -->
    <!-- These defaults may be overridden by user preferences from above    -->

    <property name="commons.home"            location="../../../jakarta-commons"/>
    <property name="commons-logging.jar"     location="${commons.home}/commons-logging/dist/commons-logging.jar"/>
    <property name="jdk.version"             value="1.3"/>
    <property name="jdbc20ext.jar"           location="./../../Java/Programs/sun/jdbc2_0-stdext.jar"/>


    <!-- ========== Local System Paths ==================================== -->

    <property name="build.home"              location="target"/>
    <property name="conf.home"               location="src/conf"/>
    <property name="dist.home"               location="dist"/>
    <property name="source.home"             location="src/java"/>
    <property name="source.jdk.home"         location="src/jdk"/>


    <!-- ========== Java Compilation Defaults ============================= -->
    <!-- These defaults may be overridden by user preferences from above    -->

    <property name="build.compiler"          value="modern"/>
    <property name="compile.debug"           value="true"/>
    <property name="compile.deprecation"     value="false"/>
    <property name="compile.optimize"        value="true"/>

    <path id="compile.classpath">
      <pathelement location="${build.home}/classes"/>
      <pathelement location="${commons-logging.jar}"/>
      <pathelement location="${jdbc20ext.jar}"/>
    </path>

    <path id="source.classpath">
      <pathelement location="${source.jdk.home}/${jdk.version}"/>
      <pathelement location="${source.home}"/>
    </path>

    <!-- ========== Project Settings ====================================== -->

    <property name="project.title"           value="Struts Legacy Distribution"/>
    <property name="project.version"         value="1.0"/>
    <property name="project.distname"        value="struts-legacy"/>
    <property name="project.package"         value="org.apache.struts.faces"/>
    <property name="project.version"         value="1.0"/>

    <!-- The base directory for release targets -->
    <property name="release.home" value="release" />

    <!-- Directory where binary release files are staged -->
    <property name="stage.bin.dir" value="${release.home}/stage/bin"/>

    <!-- Directory where library release files are staged -->
    <property name="stage.lib.dir" value="${release.home}/stage/lib"/>

    <!-- Directory where source release files are staged -->
    <property name="stage.src.dir" value="${release.home}/stage/src"/>

    <!-- Directory where release builds are prepared for upload -->
    <property name="upload.dir" value="${release.home}/upload"/>

    <!-- Base file name for upload files -->
    <property name="upload.file.base" value="${project.distname}-${project.version}"/>

    <!-- Doc directory -->
    <property name="doc.dir" value="doc"/>

    <!-- Web directory -->
    <property name="web.dir" value="web"/>


    <!-- ========== Executable Targets ======================================== -->

    <target name="init"
     description="Initialize and evaluate conditionals">
        <echo message="---------- ${project.title} ${project.version} ----------"/>
        <filter token="name"                value="${project.title}"/>
        <filter token="version"             value="${project.version}"/>
    </target>


    <target name="prepare" depends="init"
     description="Prepare build directory">
        <mkdir dir="${build.home}"/>
        <mkdir dir="${build.home}/classes"/>
        <mkdir dir="${build.home}/classes/META-INF"/>
        <mkdir dir="${build.home}/conf"/>
        <mkdir dir="${dist.home}"/>
        <mkdir dir="${dist.home}/docs"/>
        <mkdir dir="${dist.home}/docs/api"/>
    </target>

    <target name="resources" depends="prepare"
     description="Copy static resources">
        <tstamp/>
        <copy todir="${build.home}/classes" includeEmptyDirs="false">
            <fileset dir="${source.home}" excludes="**/*.java"/>
        </copy>
        <copy todir="${build.home}/classes/META-INF" file="LICENSE.txt"/>
        <copy todir="${build.home}/conf" filtering="on">
          <fileset dir="${conf.home}" includes="*.MF"/>
        </copy>
    </target>

    <target name="compile" depends="resources"
     description="Compile library classes">
        <javac srcdir="${source.home}"
                destdir="${build.home}/classes"
                debug="${compile.debug}"
          deprecation="${compile.deprecation}"
             optimize="${compile.optimize}">
            <sourcepath refid="source.classpath" />
            <classpath refid="compile.classpath"/>
        </javac>
    </target>

    <target name="docs" depends="prepare"
     description="Create generated documentation and JavaDocs">

      <javadoc
          sourcepath="src/java"
             destdir="${dist.home}/docs/api"
              author="true"
             private="true"
             version="true"
        packagenames="org.apache.struts.*"
         windowtitle="${project.title} (Version ${project.version})"
            doctitle="${project.title} (Version ${project.version})"
              bottom="Copyright &#169; 2001-2003 - Apache Software Foundation">
          <sourcepath refid="source.classpath" />
          <classpath refid="compile.classpath"/>
      </javadoc>

    </target>

    <target name="dist" depends="compile,docs"
     description="Create binary distribution">
        <copy  todir="${dist.home}" file="LICENSE.txt"/>
        <jar jarfile="${dist.home}/${project.distname}.jar"
             basedir="${build.home}/classes"
            manifest="${build.home}/conf/MANIFEST.MF"/>
    </target>

    <!--
            Construct complete release distributions
    -->
        <target name="release" depends="clean,dist"
        description="Construct release distribution">
            <mkdir dir="${stage.bin.dir}/${upload.file.base}"/>
            <mkdir dir="${stage.lib.dir}/${upload.file.base}-lib"/>
            <mkdir dir="${stage.src.dir}/${upload.file.base}-src"/>
            <copy todir="${stage.bin.dir}/${upload.file.base}">
                <fileset dir="${dist.home}"/>
            </copy>
            <copy todir="${stage.lib.dir}/${upload.file.base}-lib">
                <fileset dir="${dist.home}" includes="LICENSE"/>
                <!--
                <fileset dir="${dist.home}/lib"/>
                -->
            </copy>
            <copy todir="${stage.src.dir}/${upload.file.base}-src">
                <fileset dir=".">
                    <exclude name="build.properties"/>
                    <exclude name="target/**"/>
                    <exclude name="dist/**"/>
                    <exclude name="release/**"/>
                </fileset>
            </copy>
            <mkdir dir="${upload.dir}"/>
            <zip  zipfile="${upload.dir}/${upload.file.base}.zip"
                  basedir="${stage.bin.dir}"/>
            <zip  zipfile="${upload.dir}/${upload.file.base}-lib.zip"
                  basedir="${stage.lib.dir}"/>
            <zip  zipfile="${upload.dir}/${upload.file.base}-src.zip"
                  basedir="${stage.src.dir}"/>
            <tar  tarfile="${upload.dir}/${upload.file.base}.tar"
                  basedir="${stage.bin.dir}"
                 longfile="gnu"/>
            <tar  tarfile="${upload.dir}/${upload.file.base}-lib.tar"
                  basedir="${stage.lib.dir}"
                 longfile="gnu"/>
            <tar  tarfile="${upload.dir}/${upload.file.base}-src.tar"
                  basedir="${stage.src.dir}"
                 longfile="gnu"/>
            <gzip     src="${upload.dir}/${upload.file.base}.tar"
                  zipfile="${upload.dir}/${upload.file.base}.tar.gz"/>
            <gzip     src="${upload.dir}/${upload.file.base}-lib.tar"
                  zipfile="${upload.dir}/${upload.file.base}-lib.tar.gz"/>
            <gzip     src="${upload.dir}/${upload.file.base}-src.tar"
                  zipfile="${upload.dir}/${upload.file.base}-src.tar.gz"/>
        </target>

<!--
       Clean struts legacy distribution
-->

    <target name="clean"
      description="Prepare for clean build">
      <delete dir="${build.home}" verbose="true"/>
      <delete dir="${dist.home}"/>
      <mkdir  dir="${dist.home}"/>
    </target>


</project>
