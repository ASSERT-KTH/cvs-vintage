<?xml version="1.0"?>

<!DOCTYPE project [
    <!ENTITY build-tests-tomcat-40 SYSTEM "file:./build-tests-tomcat-40.xml">
]>

<!--
  =============================================================================
    Build file for Scaffold.

    The following properties need to be set in either a ./build.properties or
    a ${user.home}/build.properties one or in a calling Ant script :

       digester.jar     [REQUIRED] Location of the Jakarta Commons Digester jar
       beanutils.jar    [REQUIRED] Location of the Jakarta Commons Beanutils jar
       collections.jar  [REQUIRED] Location of the Jakarta Commons Collections
                                   jar
       struts.jar       [REQUIRED] Location of the Jakarta Struts jar
       lucene.jar       [REQUIRED] Location of the Jakarta Lucene jar
       poolman.jar      [REQUIRED] Location of the CodeStudio.com Poolman jar
       servlet.jar      [REQUIRED] Location of the Servlet API (2.2 or 2.3) jar
       jdbc20ext.jar    [REQUIRED] Location of the JDBC 2.0 Optional Package
                                   extensions API jar (javax.sql)

       struts-bean.tld  [OPTIONAL] Location of the Struts Bean tag library.
                                   Needed to generate the sample application.
       struts-logic.tld [OPTIONAL] Location of the Struts Logic tag library.
                                   Needed to generate the sample application.
       struts-html.tld  [OPTIONAL] Location of the Struts HTML tag library.
                                   Needed to generate the sample application.

       cactus.jar       [OPTIONAL] Location the Jakarta Cactus jar. Needed for
                                   the unit tests and to generate the sample
                                   application
       cactus.ant.jar   [OPTIONAL] Location of the Jakarta Cactus custom Ant
                                   tasks. Needed for the unit tests and to
                                   generate the sample application
       junit.jar        [OPTIONAL] Location of the Junit jar. Needed by Cactus.
       httpclient.jar   [OPTIONAL] Location of the Jakarta Commons HttpClient
                                   jar. Needed by Cactus.
       aspectjrt.jar    [OPTIONAL] Location of the AspectJ runtime jar. Needed
                                   by Cactus.

       tomcat.home.40   [OPTIONAL] Location of the Tomcat 4.x installation
                                   directory. Needs to be defined to execute
                                   the Cactus tests on Tomcat 4.x.

    In addition, the junit Ant task must be present in your Ant installation
    for running the unit tests (the junit jar must be located in ANT_HOME/lib).

    This script should be started with the following command line :

        ant <target>

    Run "ant -projecthelp" to get a list of available targets. The default
    target is "dist"

    @author <a href="mailto:ted@husted.com">Ted Husted</a>
    @author <a href="mailto:vmassol@apache.org">Vincent Massol</a>
    @version $Id: build.xml,v 1.3 2002/01/01 21:03:50 vmassol Exp $
  =============================================================================
-->
<project name="Scaffold" default="dist" basedir=".">

    <!-- Give user a chance to override without editing this file
         (and without typing -D each time it compiles it) -->
    <property file="build.properties" />
    <property file="${user.home}/build.properties" />

    <!-- Global project properties -->
    <property name="project.name.text" value="Scaffold"/>
    <property name="project.name.file" value="scaffold"/>
    <property name="project.version" value="1.0dev"/>
    <property name="project.name.prefix" value="jakarta-"/>

    <!--
       ========================================================================
         Default values for properties not defined in build.properties or in
         a higher level calling Ant script
       ========================================================================
    -->
    <property name="year" value="2001"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="off"/>

    <!-- Port to use to start the servlet engines for the unit tests -->
    <property name="test.port" value="8080"/>

    <!--
       ========================================================================
         Set the properties related to the source tree
       ========================================================================
    -->
    <!-- Source locations for the build -->
    <property name="src.dir" value="src"/>
    <property name="src.framework.dir" value="${src.dir}/framework"/>
    <property name="src.framework.main.dir" value="${src.framework.dir}/main"/>
    <property name="src.sample.dir" value="${src.dir}/sample"/>
    <property name="src.sample.main.dir" value="${src.sample.dir}/main"/>
    <property name="src.sample.web.dir" value="${src.sample.dir}/web"/>
    <property name="conf.dir" value="conf"/>
    <property name="conf.framework.dir" value="${conf.dir}/framework"/>
    <property name="conf.sample.dir" value="${conf.dir}/sample"/>
    <property name="conf.sample.test.dir" value="${conf.dir}/sample/test"/>

    <!--
       ========================================================================
         Set the properties related to the target area
       ========================================================================
    -->
    <!-- Destination locations for the build -->
    <property name="target.dir" value="target"/>
    <property name="target.classes.dir" value="${target.dir}/classes"/>
    <property name="target.classes.framework.dir"
      value="${target.classes.dir}/framework"/>
    <property name="target.classes.sample.dir"
      value="${target.classes.dir}/sample"/>
    <property name="target.conf.dir" value="${target.dir}/conf"/>
    <property name="target.conf.framework.dir"
      value="${target.conf.dir}/framework"/>
    <property name="target.conf.sample.dir"
      value="${target.conf.dir}/sample"/>
    <property name="target.lib.dir" value="${target.dir}/lib"/>
    <property name="target.tld.dir" value="${target.dir}/tld"/>
    <property name="target.doc.dir" value="${target.dir}/doc"/>
    <property name="target.javadoc.dir" value="${target.doc.dir}/api"/>
    <property name="target.test.dir" value="${target.dir}/test"/>

    <!-- The scaffold library jar -->
    <property name="target.framework.name" value="${project.name.file}"/>
    <property name="target.framework.dir" value="${target.dir}"/>

    <!-- The sample war application -->
    <property name="target.sample.name" value="${project.name.file}-sample"/>
    <property name="target.sample.dir" value="${target.dir}"/>

    <!-- Name of the source zip that is included in the main scaffold zip -->
    <property name="target.source.name" value="${project.name.file}-src"/>
    <property name="target.source.dir" value="${target.dir}"/>

    <!--
       ========================================================================
        Names of deliverables
       ========================================================================
    -->

    <!-- Distribution directory -->
    <property name="dist.dir" value="dist"/>

    <!-- The scaffold zip containing the library jar + javadoc -->
    <property name="dist.main.name"
      value="${project.name.prefix}${project.name.file}"/>
    <property name="dist.main.dir" value="${dist.dir}"/>

    <!--
       ========================================================================
         Useful patterns for targets
       ========================================================================
    -->
    <!-- Compilation classpath -->
    <path id="compile.classpath">
        <pathelement path="${digester.jar}"/>
        <pathelement path="${beanutils.jar}"/>
        <pathelement path="${collections.jar}"/>
        <pathelement path="${lucene.jar}"/>
        <pathelement path="${poolman.jar}"/>
        <pathelement path="${struts.jar}"/>
        <pathelement path="${servlet.jar}"/>
        <pathelement path="${jdbc20ext.jar}"/>
    </path>

    <!-- Test classpath -->
    <path id="test.classpath">
        <pathelement path="${cactus.jar}"/>
        <pathelement path="${cactus.ant.jar}"/>
        <pathelement path="${junit.jar}"/>
        <pathelement path="${httpclient.jar}"/>
        <pathelement path="${aspectjrt.jar}"/>
    </path>

    <!--
       ========================================================================
         Initialize the build. Must be called by all targets
       ========================================================================
    -->
    <target name="init">

        <tstamp/>

        <echo message="----- ${project.name.text} ${project.version} -----"/>
        <echo message=""/>
        <echo message="java.class.path = ${java.class.path}"/>
        <echo message=""/>
        <echo message="java.home = ${java.home}"/>
        <echo message="user.home = ${user.home}"/>
        <echo message="ant.home = ${ant.home}"/>
        <echo message=""/>
        <echo message="servlet.jar = ${servlet.jar}"/>
        <echo message="beanutils.jar = ${beanutils.jar}"/>
        <echo message="lucene.jar = ${lucene.jar}"/>
        <echo message="poolman.jar = ${poolman.jar}"/>
        <echo message="struts.jar = ${struts.jar}"/>
        <echo message="digester.jar = ${digester.jar}"/>
        <echo message="jdbc20ext.jar = ${jdbc20ext.jar}"/>
        <echo message=""/>

        <!-- Filters -->
        <filter token="version" value="${project.version}"/>
        <filter token="project.name.text" value="${project.name.text}"/>
        <filter token="project.name.file" value="${project.name.file}"/>
        <filter token="test.port" value="${test.port}"/>

        <!-- Initialize custom Ant task needed for running the server tests -->
        <taskdef name="runservertests"
          classname="org.apache.cactus.ant.RunServerTestsTask">
            <classpath>
                <pathelement location="${cactus.ant.jar}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </taskdef>

    </target>

    <!--
       ========================================================================
         Compiles the framework sources
       ========================================================================
    -->
    <target name="compile" depends="init" description="Compile the sources">

        <mkdir dir="${target.classes.framework.dir}"/>

        <javac srcdir="${src.framework.main.dir}"
          destdir="${target.classes.framework.dir}"
          deprecation="${deprecation}" optimize="${optimize}">
            <classpath refid="compile.classpath"/>
        </javac>

        <!-- Copy non-java resource file that need to be in the target classes
             directory (because the javac command only compiles java files -->
        <copy todir="${target.classes.framework.dir}">
            <fileset dir="${src.framework.main.dir}">
                <include name="**/*.properties"/>
            </fileset>
        </copy>

        <!-- Copy the license file as part of the classes tree -->
        <copy todir="${target.classes.framework.dir}" file="LICENSE"/>

    </target>

    <!--
       ========================================================================
         Compiles the sample sources
       ========================================================================
    -->
    <target name="compile.sample" depends="compile"
      description="Compile the sample sources">

        <mkdir dir="${target.classes.sample.dir}"/>

        <javac srcdir="${src.sample.main.dir}"
          destdir="${target.classes.sample.dir}"
          deprecation="${deprecation}" optimize="${optimize}">
            <classpath>
                <pathelement location="${target.classes.framework.dir}"/>
            </classpath>
            <classpath refid="compile.classpath"/>
            <classpath refid="test.classpath"/>
        </javac>

        <copy todir="${target.classes.sample.dir}"
          file="${conf.sample.test.dir}/cactus.properties" filtering="on"/>

    </target>

    <!--
       ========================================================================
         Create the runtime jar file
       ========================================================================
    -->
    <target name="jar" depends="compile"
      description="Generate the library jar">

        <mkdir dir="${target.conf.framework.dir}"/>

        <!-- Copy the manifest in order to replace the version token filter -->
        <copy todir="${target.conf.framework.dir}"
          file="${conf.framework.dir}/manifest" filtering="on"/>

        <jar jarfile="${target.framework.dir}/${target.framework.name}.jar"
          manifest="${target.conf.framework.dir}/manifest">
            <fileset dir="${target.classes.framework.dir}"/>
        </jar>

    </target>

    <!--
       ========================================================================
         Generate documentation (javadoc)
       ========================================================================
    -->
    <target name="javadoc" depends="init"
      description="Generate JavaDoc API docs">

        <mkdir dir="${target.javadoc.dir}"/>

        <javadoc
            sourcepath="${src.framework.main.dir}"
            packagenames="org.apache.${project.name.file}.*"
            destdir="${target.javadoc.dir}"
            author="true"
            public="true"
            version="true"
            use="true"
            windowtitle="${project.name.text} ${project.version} API Documentation"
            doctitle="&lt;h1&gt;${project.name.text} Documentation (Version ${project.version})&lt;/h1&gt;"
            bottom="Copyright &amp;copy; ${year} Apache Software Foundation. All Rights Reserved.">

            <classpath refid="compile.classpath"/>

        </javadoc>

    </target>

    <!--
       ========================================================================
         Generate the sample application
       ========================================================================
    -->
    <target name="sample" depends="compile.sample,jar"
      description="Generate the sample application">

        <mkdir dir="${target.lib.dir}"/>

        <!-- Copy required libraries. Note: We don't copy servlet.jar nor
             jdbc20ext.jar as these are jars that are present in the servlet
             engine where this sample war will be dropped -->
        <copy todir="${target.lib.dir}" file="${struts.jar}"/>
        <copy todir="${target.lib.dir}" file="${beanutils.jar}"/>
        <copy todir="${target.lib.dir}" file="${digester.jar}"/>
        <copy todir="${target.lib.dir}" file="${collections.jar}"/>
        <copy todir="${target.lib.dir}" file="${lucene.jar}"/>
        <copy todir="${target.lib.dir}" file="${poolman.jar}"/>
        <copy todir="${target.tld.dir}" file="${struts-bean.tld}"/>
        <copy todir="${target.tld.dir}" file="${struts-logic.tld}"/>
        <copy todir="${target.tld.dir}" file="${struts-html.tld}"/>
        <copy todir="${target.lib.dir}" file="${cactus.jar}"/>
        <copy todir="${target.lib.dir}" file="${junit.jar}"/>
        <copy todir="${target.lib.dir}" file="${aspectjrt.jar}"/>

        <!-- Copy the manifest in order to replace the version token filter -->
        <copy todir="${target.conf.sample.dir}"
          file="${conf.sample.dir}/manifest" filtering="on"/>

        <war warfile="${target.sample.dir}/${target.sample.name}.war"
          manifest="${target.conf.sample.dir}/manifest"
          webxml="${conf.sample.dir}/web.xml">
            <lib dir="${target.lib.dir}"/>
            <lib dir="${target.framework.dir}">
                <include name="${target.framework.name}.jar"/>
            </lib>
            <classes dir="${conf.sample.dir}">
                <include name="ApplicationResources.properties"/>
            </classes>
            <classes dir="${target.classes.sample.dir}">
                <exclude name="cactus.properties"/>
            </classes>
            <webinf dir=".">
                <include name="LICENSE"/>
            </webinf>
            <webinf dir="${conf.sample.dir}">
                <include name="struts-config.xml"/>
            </webinf>
            <webinf dir="${target.tld.dir}">
                <include name="*.tld"/>
            </webinf>
            <fileset dir="${src.sample.web.dir}"/>
        </war>

    </target>

    <!--
       ========================================================================
         Clean generated files (including distributables)
       ========================================================================
    -->
    <target name="clean" depends="init"
      description="Clean generated files (including distributables)">

        <delete dir="${target.dir}"/>
        <delete dir="${dist.dir}"/>

    </target>

    <!--
       ========================================================================
         Generate distributables
       ========================================================================
    -->
    <target name="dist" depends="jar,javadoc,sample"
     description="Generates all distributables (binary, source, sample)">

        <!-- Copy the source to the distribution area so that they are included
             in the release -->
        <mkdir dir="${target.source.dir}"/>

        <zip zipfile="${target.source.dir}/${target.source.name}.zip">
            <fileset dir=".">
                <include name="conf/**"/>
                <include name="src/**"/>
                <include name="*"/>
                <exclude name="build.properties"/>
            </fileset>
        </zip>

        <mkdir dir="${dist.main.dir}"/>

        <zip zipfile="${dist.main.dir}/${dist.main.name}.zip">
            <zipfileset dir="${target.framework.dir}" prefix="lib">
                <include name="${target.framework.name}.jar"/>
            </zipfileset>
            <zipfileset dir="${target.sample.dir}" prefix="sample">
                <include name="${target.sample.name}.war"/>
            </zipfileset>
            <zipfileset dir="${target.javadoc.dir}" prefix="doc/api"/>
            <zipfileset dir="." prefix="doc">
                <include name="LICENSE"/>
            </zipfileset>
            <fileset dir="${target.source.dir}">
                <include name="${target.source.name}.zip"/>
            </fileset>
        </zip>

    </target>

    <!--
       ========================================================================
         Run the Cactus unit tests (automatically create a test war - the
         sample application -, deploy it on the server to test, start the
         server, run the Cactus unit tests in the container and stop the server
       ========================================================================
    -->
    <target name="tests" depends="tests_tomcat_40"
      description="Run the Cactus unit tests on all servlet engines">
    </target>

    <!-- Run the Cactus unit tests using JUnit -->
    <target name="tests.client">

        <junit printsummary="yes" haltonfailure="yes" haltonerror="yes"
          fork="yes">
            <formatter type="plain" usefile="false"/>

            <test name="org.apache.scaffold.http.TestHelperAction"/>

            <classpath refid="compile.classpath"/>
            <classpath refid="test.classpath"/>
            <classpath>
                <pathelement location="${target.classes.framework.dir}"/>
                <pathelement location="${target.classes.sample.dir}"/>
            </classpath>

        </junit>

    </target>

    &build-tests-tomcat-40;

</project>
