package org.tigris.scarab.baseom;

// JDK classes
import java.util.*;

// Turbine classes
import org.apache.turbine.om.BaseObject;
import org.apache.turbine.om.peer.BasePeer;
import org.tigris.scarab.baseom.peer.*;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.StringUtils;
import org.apache.turbine.util.ParameterParser;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

/** This class was autogenerated by GenerateMapBuilder on: Mon Jan 08 11:17:17 PST 2001 */
public class ScarabDepend extends BaseObject
{
    /** the value for the observed_id field */
    private int observed_id;
    /** the value for the observer_id field */
    private int observer_id;
    /** the value for the depend_type_id field */
    private int depend_type_id;
    /** the value for the deleted field */
    private boolean deleted;


    /**
     * Get the ObservedId
     * @return int
     */
     public int getObservedId()
     {
          return observed_id;
     }

            
    /**
     * Set the value of ObservedId
     */
     public void setObservedId(int v ) throws Exception
     {
                  if ( aScarabIssueRelatedByObservedId != null && !aScarabIssueRelatedByObservedId.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

            if (this.observed_id != v)
           {
              this.observed_id = v;
              setModified(true);
          }
     }
    /**
     * Get the ObserverId
     * @return int
     */
     public int getObserverId()
     {
          return observer_id;
     }

            
    /**
     * Set the value of ObserverId
     */
     public void setObserverId(int v ) throws Exception
     {
                  if ( aScarabIssueRelatedByObserverId != null && !aScarabIssueRelatedByObserverId.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

            if (this.observer_id != v)
           {
              this.observer_id = v;
              setModified(true);
          }
     }
    /**
     * Get the TypeId
     * @return int
     */
     public int getTypeId()
     {
          return depend_type_id;
     }

            
    /**
     * Set the value of TypeId
     */
     public void setTypeId(int v ) throws Exception
     {
                  if ( aScarabDependType != null && !aScarabDependType.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

            if (this.depend_type_id != v)
           {
              this.depend_type_id = v;
              setModified(true);
          }
     }
    /**
     * Get the Deleted
     * @return boolean
     */
     public boolean getDeleted()
     {
          return deleted;
     }

        
    /**
     * Set the value of Deleted
     */
     public void setDeleted(boolean v ) 
     {
  
  

           if (this.deleted != v)
           {
              this.deleted = v;
              setModified(true);
          }
     }

 
 
   
                 
      
   
    /**
     * Declares an association between this object and a ScarabIssue object
     *
     * @param ScarabIssue v
     */
    private ScarabIssue aScarabIssueRelatedByObservedId;
    public void setScarabIssueRelatedByObservedId(ScarabIssue v) throws Exception
    {
        aScarabIssueRelatedByObservedId = null;
           setObservedId(v.getIssueId());
           aScarabIssueRelatedByObservedId = v;
    }

                     
    public ScarabIssue getScarabIssueRelatedByObservedId() throws Exception
    {
        if ( aScarabIssueRelatedByObservedId==null && (this.observed_id>0) )
        {
            aScarabIssueRelatedByObservedId = ScarabIssuePeer.retrieveByPK(this.observed_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // ScarabIssue obj = ScarabIssuePeer.retrieveByPK(this.observed_id);
            // obj.addScarabDependsRelatedByObservedId(this);
        }
        return aScarabIssueRelatedByObservedId;
    }

 
   
                 
      
   
    /**
     * Declares an association between this object and a ScarabIssue object
     *
     * @param ScarabIssue v
     */
    private ScarabIssue aScarabIssueRelatedByObserverId;
    public void setScarabIssueRelatedByObserverId(ScarabIssue v) throws Exception
    {
        aScarabIssueRelatedByObserverId = null;
           setObserverId(v.getIssueId());
           aScarabIssueRelatedByObserverId = v;
    }

                     
    public ScarabIssue getScarabIssueRelatedByObserverId() throws Exception
    {
        if ( aScarabIssueRelatedByObserverId==null && (this.observer_id>0) )
        {
            aScarabIssueRelatedByObserverId = ScarabIssuePeer.retrieveByPK(this.observer_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // ScarabIssue obj = ScarabIssuePeer.retrieveByPK(this.observer_id);
            // obj.addScarabDependsRelatedByObserverId(this);
        }
        return aScarabIssueRelatedByObserverId;
    }

 
   
             
   
   
    /**
     * Declares an association between this object and a ScarabDependType object
     *
     * @param ScarabDependType v
     */
    private ScarabDependType aScarabDependType;
    public void setScarabDependType(ScarabDependType v) throws Exception
    {
        aScarabDependType = null;
           setTypeId(v.getDependTypeId());
           aScarabDependType = v;
    }

                     
    public ScarabDependType getScarabDependType() throws Exception
    {
        if ( aScarabDependType==null && (this.depend_type_id>0) )
        {
            aScarabDependType = ScarabDependTypePeer.retrieveByPK(this.depend_type_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // ScarabDependType obj = ScarabDependTypePeer.retrieveByPK(this.depend_type_id);
            // obj.addScarabDepends(this);
        }
        return aScarabDependType;
    }

    
        
    


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                ScarabDependPeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                ScarabDependPeer.doInsert(this, dbCon);
            }
            else
            {
                ScarabDependPeer.doUpdate(this, dbCon);
                setNew(false);
            }
        }

              alreadyInSave = false;
      }
      }

                                                
    /** 
     * Set the Id using pk values.
     *
     * @param int observed_id
     * @param int observer_id
     */
    public void setPrimaryKey(
                      int observed_id
                                      , int observer_id
                                                     ) throws Exception
    {
                     setObservedId(observed_id);
                             setObserverId(observer_id);
                                        }


    /** 
     * Set the Id using a : separated String of pk values.
     */
    public void setPrimaryKey(Object id) throws Exception
    {
        StringTokenizer st = new StringTokenizer(id.toString(), ":");
                     setObservedId( Integer.parseInt(st.nextToken()) );
                              setObserverId( Integer.parseInt(st.nextToken()) );
                  }


    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public Object getPrimaryKey() 
    {
        return ""
                      + getObservedId()
                                      + ":"  + getObserverId()
                                                     ;
    } 

    /** 
     * returns an id that can be used to specify this object in
     * a query string.
     */
    public String getQueryOID() 
    {
        return "ScarabDepend[" + getPrimaryKey() + "]";
    }

    public static Vector getScarabDepends(ParameterParser pp)
        throws Exception
    {
        Vector v = new Vector();
        // look for classname in keys
        Enumeration keys = pp.keys();
        while ( keys.hasMoreElements() )
        {
            String ppKey = (String)keys.nextElement();
            String[] parsedString = StringUtils.parseObjectKey(ppKey);
            if ("ScarabDepend".equalsIgnoreCase(
                     parsedString[StringUtils.PPKEY_CLASSNAME]))
            {
                ScarabDepend obj = null;
                if (parsedString[StringUtils.PPKEY_ID].equals("PK") )
                {
                    obj = new ScarabDepend();
                    v.addElement(obj);
                    StringTokenizer st = new StringTokenizer(
                        parsedString[StringUtils.PPKEY_PROPERTY], ":");
  
                          obj.setObservedId(Integer.parseInt(st.nextToken()));
        
                          obj.setObserverId(Integer.parseInt(st.nextToken()));
                        }
                else
                {
                    StringTokenizer st = new StringTokenizer(
                        parsedString[StringUtils.PPKEY_ID], ":");
  
                          int observed_id = Integer.parseInt(st.nextToken());
        
                          int observer_id = Integer.parseInt(st.nextToken());
        

                        
                    for ( int i=0; i<v.size(); i++) 
                    {
                        ScarabDepend tempObj = 
                            (ScarabDepend)v.get(i);
                        if ( observed_id == tempObj.getObservedId() && observer_id == tempObj.getObserverId() ) 
                        {
                            obj = tempObj;
                            break;
                        }
                    }
                    if ( obj == null ) 
                    {
                        obj = new ScarabDepend();
                        obj.setObservedId(observed_id);
                        obj.setObserverId(observer_id);
                        v.addElement(obj);
                    }
                }
                String property = parsedString[StringUtils.PPKEY_PROPERTY];

                            if ( property.equalsIgnoreCase("TypeId") ) 
                {
                    obj.setTypeId(pp.getInt(ppKey));
                }
                        if ( property.equalsIgnoreCase("Deleted") ) 
                {
                    obj.setDeleted(pp.getBoolean(ppKey));
                }
                }
        }
        return v;
    }

    /**
     * Makes a copy of this object.  
     * It creates a new object filling in the simple attributes.
      * It then fills all the association collections and sets the
     * related objects to isNew=true.
      */
    public ScarabDepend copy() throws Exception
    {
        ScarabDepend copyObj = new ScarabDepend();
         copyObj.setObservedId(observed_id);
         copyObj.setObserverId(observer_id);
         copyObj.setTypeId(depend_type_id);
         copyObj.setDeleted(deleted);
 
  
                        
        copyObj.setObservedId(NEW_ID);
                              
        copyObj.setObserverId(NEW_ID);
                         return copyObj;
    }

}
