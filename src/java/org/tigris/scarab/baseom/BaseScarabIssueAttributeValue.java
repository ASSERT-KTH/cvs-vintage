package org.tigris.scarab.baseom;

// JDK classes
import java.util.*;
import java.math.*;

// Turbine classes
import org.apache.turbine.om.BaseObject;
import org.apache.turbine.om.peer.BasePeer;
import org.tigris.scarab.baseom.peer.*;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

/** 
 * This class was autogenerated by Torque on: Wed Feb 07 17:08:09 PST 2001
 * You should not use this class directly.  It should not even be
 * extended all references should be to ScarabIssueAttributeValue 
 */
public abstract class BaseScarabIssueAttributeValue extends BaseObject
{
    /** the value for the issue_id field */
    private int issue_id;
    /** the value for the attribute_id field */
    private int attribute_id;
    /** the value for the option_id field */
    private int option_id;
    /** the value for the user_id field */
    private int user_id;
    /** the value for the value field */
    private String value;
    /** the value for the deleted field */
    private boolean deleted;


    /**
     * Get the IssueId
     * @return int
     */
     public int getIssueId()
     {
          return issue_id;
     }

                        
    /**
     * Set the value of IssueId
     */
     public void setIssueId(int v ) throws Exception
     {
                  if ( aScarabIssue != null && !aScarabIssue.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
       
        
                
          // update associated ScarabIssueAttributeVote
          if (collScarabIssueAttributeVotes != null )
          {
              for (int i=0; i<collScarabIssueAttributeVotes.size(); i++)
              {
                  ((ScarabIssueAttributeVote)collScarabIssueAttributeVotes.get(i))
                      .setIssueId(v);
              }
          }
       

           if (this.issue_id != v)
           {
              this.issue_id = v;
              setModified(true);
          }
     }
    /**
     * Get the AttributeId
     * @return int
     */
     public int getAttributeId()
     {
          return attribute_id;
     }

                        
    /**
     * Set the value of AttributeId
     */
     public void setAttributeId(int v ) throws Exception
     {
                  if ( aScarabAttribute != null && !aScarabAttribute.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
       
        
                
          // update associated ScarabIssueAttributeVote
          if (collScarabIssueAttributeVotes != null )
          {
              for (int i=0; i<collScarabIssueAttributeVotes.size(); i++)
              {
                  ((ScarabIssueAttributeVote)collScarabIssueAttributeVotes.get(i))
                      .setAttributeId(v);
              }
          }
       

           if (this.attribute_id != v)
           {
              this.attribute_id = v;
              setModified(true);
          }
     }
    /**
     * Get the OptionId
     * @return int
     */
     public int getOptionId()
     {
          return option_id;
     }

            
    /**
     * Set the value of OptionId
     */
     public void setOptionId(int v ) throws Exception
     {
                  if ( aScarabAttributeOption != null && !aScarabAttributeOption.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

           if (this.option_id != v)
           {
              this.option_id = v;
              setModified(true);
          }
     }
    /**
     * Get the UserId
     * @return int
     */
     public int getUserId()
     {
          return user_id;
     }

            
    /**
     * Set the value of UserId
     */
     public void setUserId(int v ) throws Exception
     {
                  if ( aTurbineUser != null && !aTurbineUser.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

           if (this.user_id != v)
           {
              this.user_id = v;
              setModified(true);
          }
     }
    /**
     * Get the Value
     * @return String
     */
     public String getValue()
     {
          return value;
     }

        
    /**
     * Set the value of Value
     */
     public void setValue(String v ) 
     {
  
  

           if ( !ObjectUtils.equals(this.value, v) )
           {
              this.value = v;
              setModified(true);
          }
     }
    /**
     * Get the Deleted
     * @return boolean
     */
     public boolean getDeleted()
     {
          return deleted;
     }

        
    /**
     * Set the value of Deleted
     */
     public void setDeleted(boolean v ) 
     {
  
  

           if (this.deleted != v)
           {
              this.deleted = v;
              setModified(true);
          }
     }

 
 
   
             
   
   
    /**
     * Declares an association between this object and a ScarabIssue object
     *
     * @param ScarabIssue v
     */
    private ScarabIssue aScarabIssue;
    public void setScarabIssue(ScarabIssue v) throws Exception
    {
        aScarabIssue = null;
           setIssueId(v.getIssueId());
           aScarabIssue = v;
    }

                     
    public ScarabIssue getScarabIssue() throws Exception
    {
        if ( aScarabIssue==null && (this.issue_id>0) )
        {
            aScarabIssue = ScarabIssuePeer.retrieveByPK(this.issue_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // ScarabIssue obj = ScarabIssuePeer.retrieveByPK(this.issue_id);
            // obj.addScarabIssueAttributeValues(this);
        }
        return aScarabIssue;
    }

 
   
             
   
   
    /**
     * Declares an association between this object and a ScarabAttribute object
     *
     * @param ScarabAttribute v
     */
    private ScarabAttribute aScarabAttribute;
    public void setScarabAttribute(ScarabAttribute v) throws Exception
    {
        aScarabAttribute = null;
           setAttributeId(v.getAttributeId());
           aScarabAttribute = v;
    }

                     
    public ScarabAttribute getScarabAttribute() throws Exception
    {
        if ( aScarabAttribute==null && (this.attribute_id>0) )
        {
            aScarabAttribute = ScarabAttributePeer.retrieveByPK(this.attribute_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // ScarabAttribute obj = ScarabAttributePeer.retrieveByPK(this.attribute_id);
            // obj.addScarabIssueAttributeValues(this);
        }
        return aScarabAttribute;
    }

 
   
             
   
   
    /**
     * Declares an association between this object and a ScarabAttributeOption object
     *
     * @param ScarabAttributeOption v
     */
    private ScarabAttributeOption aScarabAttributeOption;
    public void setScarabAttributeOption(ScarabAttributeOption v) throws Exception
    {
        aScarabAttributeOption = null;
           setOptionId(v.getOptionId());
           aScarabAttributeOption = v;
    }

                     
    public ScarabAttributeOption getScarabAttributeOption() throws Exception
    {
        if ( aScarabAttributeOption==null && (this.option_id>0) )
        {
            aScarabAttributeOption = ScarabAttributeOptionPeer.retrieveByPK(this.option_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // ScarabAttributeOption obj = ScarabAttributeOptionPeer.retrieveByPK(this.option_id);
            // obj.addScarabIssueAttributeValues(this);
        }
        return aScarabAttributeOption;
    }

 
   
             
   
   
    /**
     * Declares an association between this object and a TurbineUser object
     *
     * @param TurbineUser v
     */
    private TurbineUser aTurbineUser;
    public void setTurbineUser(TurbineUser v) throws Exception
    {
        aTurbineUser = null;
           setUserId(v.getUserId());
           aTurbineUser = v;
    }

                     
    public TurbineUser getTurbineUser() throws Exception
    {
        if ( aTurbineUser==null && (this.user_id>0) )
        {
            aTurbineUser = TurbineUserPeer.retrieveByPK(this.user_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // TurbineUser obj = TurbineUserPeer.retrieveByPK(this.user_id);
            // obj.addScarabIssueAttributeValues(this);
        }
        return aTurbineUser;
    }

    
                       
      
    /**
     * Collection to store aggregation of collScarabIssueAttributeVotes
     */
    private Vector collScarabIssueAttributeVotes;
    /**
     * Temporary storage of collScarabIssueAttributeVotes to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollScarabIssueAttributeVotes;

    public void initScarabIssueAttributeVotes()
    {
        if (collScarabIssueAttributeVotes == null)
            collScarabIssueAttributeVotes = new Vector();
    }

    /**
     * Method called to associate a ScarabIssueAttributeVote object to this object
     * through the ScarabIssueAttributeVote foreign key attribute
     *
     * @param ScarabIssueAttributeVote l
     */
    public void addScarabIssueAttributeVotes(ScarabIssueAttributeVote l) throws Exception
    {
        /*
        if (collScarabIssueAttributeVotes == null)
        {
            if (tempcollScarabIssueAttributeVotes == null)
            {
                tempcollScarabIssueAttributeVotes = new Vector();
            }
            tempcollScarabIssueAttributeVotes.add(l);
        }
        else
        {
            collScarabIssueAttributeVotes.add(l);
        }
        */
        getScarabIssueAttributeVotes().add(l);
        l.setScarabIssueAttributeValue((ScarabIssueAttributeValue)this);
    }

    /**
     * The criteria used to select the current contents of collScarabIssueAttributeVotes
     */
    private Criteria lastScarabIssueAttributeVotesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getScarabIssueAttributeVotes(new Criteria())
     */
    public Vector getScarabIssueAttributeVotes() throws Exception
    {
        if (collScarabIssueAttributeVotes == null)
        {
            collScarabIssueAttributeVotes = getScarabIssueAttributeVotes(new Criteria(10));
        }
        return collScarabIssueAttributeVotes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssueAttributeValue is new, it will return
     * an empty collection; or if this ScarabIssueAttributeValue has previously
     * been saved, it will retrieve related ScarabIssueAttributeVotes from storage.
     */
    public Vector getScarabIssueAttributeVotes(Criteria criteria) throws Exception
    {
        if (collScarabIssueAttributeVotes == null)
        {
            if ( isNew() ) 
            {
               collScarabIssueAttributeVotes = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabIssueAttributeVotePeer.ISSUE_ID, getIssueId() );               
                   criteria.add(ScarabIssueAttributeVotePeer.ATTRIBUTE_ID, getAttributeId() );               
                   collScarabIssueAttributeVotes = ScarabIssueAttributeVotePeer.doSelect(criteria);
            }
/*
            if (tempcollScarabIssueAttributeVotes != null)
            {
                for (int i=0; i<tempcollScarabIssueAttributeVotes.size(); i++)
                {
                    collScarabIssueAttributeVotes.add(tempcollScarabIssueAttributeVotes.get(i));
                }
                tempcollScarabIssueAttributeVotes = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabIssueAttributeVotePeer.ISSUE_ID, getIssueId() );               
                   criteria.add(ScarabIssueAttributeVotePeer.ATTRIBUTE_ID, getAttributeId() );               
               if ( !lastScarabIssueAttributeVotesCriteria.equals(criteria)  )
            {
                collScarabIssueAttributeVotes = ScarabIssueAttributeVotePeer.doSelect(criteria);  
            }
        }
        lastScarabIssueAttributeVotesCriteria = criteria; 

        return collScarabIssueAttributeVotes;
    }
     

        
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssueAttributeValue is new, it will return
     * an empty collection; or if this ScarabIssueAttributeValue has previously
     * been saved, it will retrieve related ScarabIssueAttributeVotes from storage.
     */
    public Vector getScarabIssueAttributeVotesJoinScarabAttributeOption(Criteria criteria) 
        throws Exception
    {
        if (collScarabIssueAttributeVotes == null)
        {
            if ( isNew() ) 
            {
               collScarabIssueAttributeVotes = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabIssueAttributeVotePeer.ISSUE_ID, getIssueId() );               
                   criteria.add(ScarabIssueAttributeVotePeer.ATTRIBUTE_ID, getAttributeId() );               
                   collScarabIssueAttributeVotes = ScarabIssueAttributeVotePeer.doSelectJoinScarabAttributeOption(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabIssueAttributeVotePeer.ISSUE_ID, getIssueId() );               
                   criteria.add(ScarabIssueAttributeVotePeer.ATTRIBUTE_ID, getAttributeId() );               
               if ( !lastScarabIssueAttributeVotesCriteria.equals(criteria)  )
            {
                collScarabIssueAttributeVotes = ScarabIssueAttributeVotePeer.doSelectJoinScarabAttributeOption(criteria);
            }
        }
        lastScarabIssueAttributeVotesCriteria = criteria; 

        return collScarabIssueAttributeVotes;
    }
      
      
         
                 
                                
                
        
        
       
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssueAttributeValue is new, it will return
     * an empty collection; or if this ScarabIssueAttributeValue has previously
     * been saved, it will retrieve related ScarabIssueAttributeVotes from storage.
     */
    public Vector getScarabIssueAttributeVotesJoinTurbineUser(Criteria criteria) 
        throws Exception
    {
        if (collScarabIssueAttributeVotes == null)
        {
            if ( isNew() ) 
            {
               collScarabIssueAttributeVotes = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabIssueAttributeVotePeer.ISSUE_ID, getIssueId() );               
                   criteria.add(ScarabIssueAttributeVotePeer.ATTRIBUTE_ID, getAttributeId() );               
                   collScarabIssueAttributeVotes = ScarabIssueAttributeVotePeer.doSelectJoinTurbineUser(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabIssueAttributeVotePeer.ISSUE_ID, getIssueId() );               
                   criteria.add(ScarabIssueAttributeVotePeer.ATTRIBUTE_ID, getAttributeId() );               
               if ( !lastScarabIssueAttributeVotesCriteria.equals(criteria)  )
            {
                collScarabIssueAttributeVotes = ScarabIssueAttributeVotePeer.doSelectJoinTurbineUser(criteria);
            }
        }
        lastScarabIssueAttributeVotesCriteria = criteria; 

        return collScarabIssueAttributeVotes;
    }
     



     
    
    private static Vector fieldNames_ = null;

    /**
     * Generate a list of field names.
     */
    public static Vector getFieldNames()
    {
      if (fieldNames_ == null)
      {
        fieldNames_ = new Vector();
            fieldNames_.add("IssueId");
            fieldNames_.add("AttributeId");
            fieldNames_.add("OptionId");
            fieldNames_.add("UserId");
            fieldNames_.add("Value");
            fieldNames_.add("Deleted");
          }
      return fieldNames_;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.
     */
    public Object getByName(String name)
    {
            if (name.equals("IssueId"))
	{
	  	    return new Integer(getIssueId());
	  	}
            if (name.equals("AttributeId"))
	{
	  	    return new Integer(getAttributeId());
	  	}
            if (name.equals("OptionId"))
	{
	  	    return new Integer(getOptionId());
	  	}
            if (name.equals("UserId"))
	{
	  	    return new Integer(getUserId());
	  	}
            if (name.equals("Value"))
	{
	  	    return getValue();
	  	}
            if (name.equals("Deleted"))
	{
	  	    return new Boolean(getDeleted());
	  	}
            return null; 
    }
     	

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                ScarabIssueAttributeValuePeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                ScarabIssueAttributeValuePeer.doInsert((ScarabIssueAttributeValue)this, dbCon);
            }
            else
            {
                ScarabIssueAttributeValuePeer.doUpdate((ScarabIssueAttributeValue)this, dbCon);
                setNew(false);
            }
        }

                                                        
                
          if (collScarabIssueAttributeVotes != null )
          {
              for (int i=0; i<collScarabIssueAttributeVotes.size(); i++)
              {
                  ((ScarabIssueAttributeVote)collScarabIssueAttributeVotes.get(i)).save(dbCon);
              }
          }
                  alreadyInSave = false;
      }
      }

                                                                                
    /** 
     * Set the Id using pk values.
     *
     * @param int issue_id
     * @param int attribute_id
     */
    public void setPrimaryKey(
                      int issue_id
                                      , int attribute_id
                                                                             ) throws Exception
    {
                     setIssueId(issue_id);
                             setAttributeId(attribute_id);
                                                                }

    /** 
     * Set the Id using a : separated String of pk values.
     */
    public void setPrimaryKey(Object id) throws Exception
    {
        StringTokenizer st = new StringTokenizer(id.toString(), ":");
                           setIssueId( Integer.parseInt(st.nextToken()) );
                                          setAttributeId( Integer.parseInt(st.nextToken()) );
                                                                        }


    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public Object getPrimaryKey() 
    {
        return ""
                      + getIssueId()
                                      + ":"  + getAttributeId()
                                                                             ;
    } 

    /** 
     * returns an id that can be used to specify this object in
     * a query string.
     */
    public String getQueryOID() 
    {
        return "ScarabIssueAttributeValue[" + getPrimaryKey() + "]";
    }

}
