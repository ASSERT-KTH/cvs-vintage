package org.tigris.scarab.baseom;

// JDK classes
import java.util.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.StringUtils;
import org.apache.turbine.util.ParameterParser;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;
import org.apache.turbine.services.TurbineServices;
import org.apache.turbine.services.cache.*;

import org.tigris.scarab.util.ScarabException;
import org.tigris.scarab.baseom.peer.*;

/** 
  * The skeleton for this class was autogenerated by Torque on:
  *
  * [Sun Feb 18 12:30:37 PST 2001]
  *
  * You should add additional methods to this class to meet the
  * application requirements.  This class will only be generated as
  * long as the "firstbuild" file exists in the build directory.
  */
public class Attribute 
    extends org.tigris.scarab.baseom.base.BaseAttribute
    implements Persistent
{
    private static String className = "Attribute";
    static String getCacheKey(ObjectKey key)
    {
        String keyString = key.getInternalObject().toString();
        return new StringBuffer(className.length() + keyString.length())
            .append(className).append(keyString).toString();
    }


    public static Attribute getInstance(ObjectKey attId) 
        throws Exception
    {
        boolean firstTime = false;
        TurbineGlobalCacheService tgcs = 
            (TurbineGlobalCacheService)TurbineServices
            .getInstance().getService(GlobalCacheService.SERVICE_NAME);

        String key = getCacheKey(attId);
        Attribute attribute = null;
        try
        {
            attribute = (Attribute)tgcs.getObject(key).getContents();
        }
        catch (ObjectExpiredException oee)
        {
            firstTime = true;
        }
        
        if (firstTime)
        {
            System.out.println("First time for Attribute: " + attId);
            attribute = AttributePeer.retrieveByPK(attId);
            if ( attribute == null) // is this check needed?
            {
                throw new ScarabException("Attribute with ID " + attId + 
                                          " can not be found");
            }
            tgcs.addObject(key, new CachedObject(attribute));
        } 
        return attribute;
    }
}

