package org.tigris.scarab.baseom;

// JDK classes
import java.util.*;

// Turbine classes
import org.apache.turbine.om.BaseObject;
import org.apache.turbine.om.peer.BasePeer;
import org.tigris.scarab.baseom.peer.*;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

/** This class was autogenerated by GenerateMapBuilder on: Fri Dec 15 13:47:21 PST 2000 */
public class ScarabRModuleVisitorRole extends BaseObject
{
    /** the value for the module_id field */
    private int module_id;
    /** the value for the visitor_id field */
    private int visitor_id;
    /** the value for the role_id field */
    private int role_id;
    /** the value for the deleted field */
    private String deleted;


    /**
     * Get the ModuleId
     * @return int
     */
     public int getModuleId()
     {
          return module_id;
     }

            
    /**
     * Set the value of ModuleId
     */
     public void setModuleId(int v ) throws Exception
     {
                  if ( aScarabRModuleVisitor != null && !aScarabRModuleVisitor.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  
           if (this.module_id != v)
           {
              this.module_id = v;
              setModified(true);
          }
     }
    /**
     * Get the VisitorId
     * @return int
     */
     public int getVisitorId()
     {
          return visitor_id;
     }

            
    /**
     * Set the value of VisitorId
     */
     public void setVisitorId(int v ) throws Exception
     {
                  if ( aScarabRModuleVisitor != null && !aScarabRModuleVisitor.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  
           if (this.visitor_id != v)
           {
              this.visitor_id = v;
              setModified(true);
          }
     }
    /**
     * Get the RoleId
     * @return int
     */
     public int getRoleId()
     {
          return role_id;
     }

        
    /**
     * Set the value of RoleId
     */
     public void setRoleId(int v ) 
     {
  
  
           if (this.role_id != v)
           {
              this.role_id = v;
              setModified(true);
          }
     }
    /**
     * Get the Deleted
     * @return String
     */
     public String getDeleted()
     {
          return deleted;
     }

        
    /**
     * Set the value of Deleted
     */
     public void setDeleted(String v ) 
     {
  
  
           if ( !ObjectUtils.equals(this.deleted, v) )
           {
              this.deleted = v;
              setModified(true);
          }
     }

 
 
   
                    
   
   
    /**
     * Declares an association between this object and a ScarabRModuleVisitor object
     *
     * @param ScarabRModuleVisitor v
     */
    private ScarabRModuleVisitor aScarabRModuleVisitor;
    void setScarabRModuleVisitor(ScarabRModuleVisitor v) throws Exception
    {
        aScarabRModuleVisitor = null;
           setModuleId(v.getModuleId());
           setVisitorId(v.getVisitorId());
           aScarabRModuleVisitor = v;
    }

                                
    public ScarabRModuleVisitor getScarabRModuleVisitor() throws Exception
    {
        if (aScarabRModuleVisitor != null)
        {
            return aScarabRModuleVisitor;            
        }
        else if (this.module_id>0 && this.visitor_id>0)
        {
            ScarabRModuleVisitor obj = ScarabRModuleVisitorPeer.retrieveByPK(this.module_id, this.visitor_id);
            // The following line can be added to guarantee the related
            // object contains a reference to this object, but this
            // level of coupling may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // obj.addScarabRModuleVisitorRoles(this);
            return obj;
        }
        return null;
    }

    
        
    


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                ScarabRModuleVisitorRolePeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                ScarabRModuleVisitorRolePeer.doInsert(this, dbCon);
            }
            else
            {
                ScarabRModuleVisitorRolePeer.doUpdate(this, dbCon);
                setNew(false);
            }
        }

              alreadyInSave = false;
      }
      }

                                                            
    /** 
     * Set the Id using pk values.
     *
     * @param int module_id
     * @param int visitor_id
     * @param int role_id
     */
    public void setId(
                      int module_id
                                      , int visitor_id
                                      , int role_id
                                         ) throws Exception
    {
                     setModuleId(module_id);
                             setVisitorId(visitor_id);
                             setRoleId(role_id);
                            }


    /** 
     * Set the Id using a : separated String of pk values.
     */
    public void setId(Object id) throws Exception
    {
        StringTokenizer st = new StringTokenizer(id.toString(), ":");
                           setModuleId( Integer.parseInt(st.nextToken()) );
                                          setVisitorId( Integer.parseInt(st.nextToken()) );
                                          setRoleId( Integer.parseInt(st.nextToken()) );
                                    }


    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public Object getId() 
    {
        return ""
                      + getModuleId()
                                      + ":"  + getVisitorId()
                                      + ":"  + getRoleId()
                                         ;
    } 

    /** 
     * returns an id that can be used to specify this object in
     * a query string.
     */
    public String getQueryOID() 
    {
        return "ScarabRModuleVisitorRole[" + getId() + "]";
    }


}




