package org.tigris.scarab.baseom;

// JDK classes
import java.util.*;

// Turbine classes
import org.apache.turbine.om.BaseObject;
import org.apache.turbine.om.peer.BasePeer;
import org.tigris.scarab.baseom.peer.*;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

/** This class was autogenerated by GenerateMapBuilder on: Tue Jan 02 21:50:40 PST 2001 */
public class ScarabAttribute extends BaseObject
{
    /** the value for the attribute_id field */
    private int attribute_id;
    /** the value for the attribute_name field */
    private String attribute_name;
    /** the value for the attribute_type_id field */
    private int attribute_type_id;
    /** the value for the deleted field */
    private boolean deleted;


    /**
     * Get the AttributeId
     * @return int
     */
     public int getAttributeId()
     {
          return attribute_id;
     }

                            
    /**
     * Set the value of AttributeId
     */
     public void setAttributeId(int v ) throws Exception
     {
  
       
        
                
          // update associated ScarabActivity
          if (collScarabActivitys != null )
          {
              for (int i=0; i<collScarabActivitys.size(); i++)
              {
                  ((ScarabActivity)collScarabActivitys.elementAt(i))
                      .setAttributeId(v);
              }
          }
            
        
                
          // update associated ScarabAttributeOption
          if (collScarabAttributeOptions != null )
          {
              for (int i=0; i<collScarabAttributeOptions.size(); i++)
              {
                  ((ScarabAttributeOption)collScarabAttributeOptions.elementAt(i))
                      .setAttributeId(v);
              }
          }
            
        
                
          // update associated ScarabIssueAttributeValue
          if (collScarabIssueAttributeValues != null )
          {
              for (int i=0; i<collScarabIssueAttributeValues.size(); i++)
              {
                  ((ScarabIssueAttributeValue)collScarabIssueAttributeValues.elementAt(i))
                      .setAttributeId(v);
              }
          }
            
        
                
          // update associated ScarabRModuleAttribute
          if (collScarabRModuleAttributes != null )
          {
              for (int i=0; i<collScarabRModuleAttributes.size(); i++)
              {
                  ((ScarabRModuleAttribute)collScarabRModuleAttributes.elementAt(i))
                      .setAttributeId(v);
              }
          }
       

            if (this.attribute_id != v)
           {
              this.attribute_id = v;
              setModified(true);
          }
     }
    /**
     * Get the Name
     * @return String
     */
     public String getName()
     {
          return attribute_name;
     }

        
    /**
     * Set the value of Name
     */
     public void setName(String v ) 
     {
  
  

           if ( !ObjectUtils.equals(this.attribute_name, v) )

           {
              this.attribute_name = v;
              setModified(true);
          }
     }
    /**
     * Get the TypeId
     * @return int
     */
     public int getTypeId()
     {
          return attribute_type_id;
     }

            
    /**
     * Set the value of TypeId
     */
     public void setTypeId(int v ) throws Exception
     {
                  if ( aScarabAttributeType != null && !aScarabAttributeType.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

            if (this.attribute_type_id != v)
           {
              this.attribute_type_id = v;
              setModified(true);
          }
     }
    /**
     * Get the Deleted
     * @return boolean
     */
     public boolean getDeleted()
     {
          return deleted;
     }

        
    /**
     * Set the value of Deleted
     */
     public void setDeleted(boolean v ) 
     {
  
  

           if (this.deleted != v)
           {
              this.deleted = v;
              setModified(true);
          }
     }

 
 
   
             
   
   
    /**
     * Declares an association between this object and a ScarabAttributeType object
     *
     * @param ScarabAttributeType v
     */
    private ScarabAttributeType aScarabAttributeType;
    public void setScarabAttributeType(ScarabAttributeType v) throws Exception
    {
        aScarabAttributeType = null;
           setTypeId(v.getAttributeTypeId());
           aScarabAttributeType = v;
    }

                     
    public ScarabAttributeType getScarabAttributeType() throws Exception
    {
        if (aScarabAttributeType != null)
        {
            return aScarabAttributeType;            
        }
        else if (this.attribute_type_id>0)
        {
            ScarabAttributeType obj = ScarabAttributeTypePeer.retrieveByPK(this.attribute_type_id);
            // The following line can be added to guarantee the related
            // object contains a reference to this object, but this
            // level of coupling may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // obj.addScarabAttributes(this);
            return obj;
        }
        return null;
    }

    
                
      
    /**
     * Collection to store aggregation of collScarabActivitys
     */
    private Vector collScarabActivitys;
    /**
     * Temporary storage of collScarabActivitys to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollScarabActivitys;

    public void initScarabActivitys()
    {
        if (collScarabActivitys == null)
            collScarabActivitys = new Vector();
    }

    /**
     * Method called to associate a ScarabActivity object to this object
     * through the ScarabActivity foreign key attribute
     *
     * @param ScarabActivity l
     */
    public void addScarabActivitys(ScarabActivity l) throws Exception
    {
        /*
        if (collScarabActivitys == null)
        {
            if (tempcollScarabActivitys == null)
            {
                tempcollScarabActivitys = new Vector();
            }
            tempcollScarabActivitys.add(l);
        }
        else
        {
            collScarabActivitys.add(l);
        }
        */
        getScarabActivitys().add(l);
        l.setScarabAttribute(this);
    }

    /**
     * The criteria used to select the current contents of collScarabActivitys
     */
    private Criteria lastScarabActivitysCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getScarabActivitys(new Criteria())
     */
    public Vector getScarabActivitys() throws Exception
    {
        if (collScarabActivitys == null)
        {
            collScarabActivitys = getScarabActivitys(new Criteria(10));
        }
        return collScarabActivitys;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabAttribute is new, it will return
     * an empty collection; or if this ScarabAttribute has previously
     * been saved, it will retrieve related ScarabActivitys from storage.
     */
    public Vector getScarabActivitys(Criteria criteria) throws Exception
    {
        if (collScarabActivitys == null)
        {
            if ( isNew() ) 
            {
               collScarabActivitys = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabActivityPeer.ATTRIBUTE_ID, getAttributeId() );               
                   collScarabActivitys = ScarabActivityPeer.doSelect(criteria);
            }
/*
            if (tempcollScarabActivitys != null)
            {
                for (int i=0; i<tempcollScarabActivitys.size(); i++)
                {
                    collScarabActivitys.add(tempcollScarabActivitys.get(i));
                }
                tempcollScarabActivitys = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabActivityPeer.ATTRIBUTE_ID, getAttributeId() );               
               if ( !lastScarabActivitysCriteria.equals(criteria)  )
            {
                collScarabActivitys = ScarabActivityPeer.doSelect(criteria);  
            }
        }
        lastScarabActivitysCriteria = criteria; 

        return collScarabActivitys;
    }
     

        
      
      
          
                    
            
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabAttribute is new, it will return
     * an empty collection; or if this ScarabAttribute has previously
     * been saved, it will retrieve related ScarabActivitys from storage.
     */
    public Vector getScarabActivitysJoinScarabIssue(Criteria criteria) 
        throws Exception
    {
        if (collScarabActivitys == null)
        {
            if ( isNew() ) 
            {
               collScarabActivitys = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabActivityPeer.ATTRIBUTE_ID, getAttributeId() );               
                   collScarabActivitys = ScarabActivityPeer.doSelectJoinScarabIssue(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabActivityPeer.ATTRIBUTE_ID, getAttributeId() );               
               if ( !lastScarabActivitysCriteria.equals(criteria)  )
            {
                collScarabActivitys = ScarabActivityPeer.doSelectJoinScarabIssue(criteria);
            }
        }
        lastScarabActivitysCriteria = criteria; 

        return collScarabActivitys;
    }
      
      
         
          
                    
            
        
       
      
      
          
                    
            
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabAttribute is new, it will return
     * an empty collection; or if this ScarabAttribute has previously
     * been saved, it will retrieve related ScarabActivitys from storage.
     */
    public Vector getScarabActivitysJoinScarabTransaction(Criteria criteria) 
        throws Exception
    {
        if (collScarabActivitys == null)
        {
            if ( isNew() ) 
            {
               collScarabActivitys = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabActivityPeer.ATTRIBUTE_ID, getAttributeId() );               
                   collScarabActivitys = ScarabActivityPeer.doSelectJoinScarabTransaction(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabActivityPeer.ATTRIBUTE_ID, getAttributeId() );               
               if ( !lastScarabActivitysCriteria.equals(criteria)  )
            {
                collScarabActivitys = ScarabActivityPeer.doSelectJoinScarabTransaction(criteria);
            }
        }
        lastScarabActivitysCriteria = criteria; 

        return collScarabActivitys;
    }
     



             
      
    /**
     * Collection to store aggregation of collScarabAttributeOptions
     */
    private Vector collScarabAttributeOptions;
    /**
     * Temporary storage of collScarabAttributeOptions to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollScarabAttributeOptions;

    public void initScarabAttributeOptions()
    {
        if (collScarabAttributeOptions == null)
            collScarabAttributeOptions = new Vector();
    }

    /**
     * Method called to associate a ScarabAttributeOption object to this object
     * through the ScarabAttributeOption foreign key attribute
     *
     * @param ScarabAttributeOption l
     */
    public void addScarabAttributeOptions(ScarabAttributeOption l) throws Exception
    {
        /*
        if (collScarabAttributeOptions == null)
        {
            if (tempcollScarabAttributeOptions == null)
            {
                tempcollScarabAttributeOptions = new Vector();
            }
            tempcollScarabAttributeOptions.add(l);
        }
        else
        {
            collScarabAttributeOptions.add(l);
        }
        */
        getScarabAttributeOptions().add(l);
        l.setScarabAttribute(this);
    }

    /**
     * The criteria used to select the current contents of collScarabAttributeOptions
     */
    private Criteria lastScarabAttributeOptionsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getScarabAttributeOptions(new Criteria())
     */
    public Vector getScarabAttributeOptions() throws Exception
    {
        if (collScarabAttributeOptions == null)
        {
            collScarabAttributeOptions = getScarabAttributeOptions(new Criteria(10));
        }
        return collScarabAttributeOptions;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabAttribute is new, it will return
     * an empty collection; or if this ScarabAttribute has previously
     * been saved, it will retrieve related ScarabAttributeOptions from storage.
     */
    public Vector getScarabAttributeOptions(Criteria criteria) throws Exception
    {
        if (collScarabAttributeOptions == null)
        {
            if ( isNew() ) 
            {
               collScarabAttributeOptions = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabAttributeOptionPeer.ATTRIBUTE_ID, getAttributeId() );               
                   collScarabAttributeOptions = ScarabAttributeOptionPeer.doSelect(criteria);
            }
/*
            if (tempcollScarabAttributeOptions != null)
            {
                for (int i=0; i<tempcollScarabAttributeOptions.size(); i++)
                {
                    collScarabAttributeOptions.add(tempcollScarabAttributeOptions.get(i));
                }
                tempcollScarabAttributeOptions = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabAttributeOptionPeer.ATTRIBUTE_ID, getAttributeId() );               
               if ( !lastScarabAttributeOptionsCriteria.equals(criteria)  )
            {
                collScarabAttributeOptions = ScarabAttributeOptionPeer.doSelect(criteria);  
            }
        }
        lastScarabAttributeOptionsCriteria = criteria; 

        return collScarabAttributeOptions;
    }
   

        
      
         
          
                    
            
        
      



             
      
    /**
     * Collection to store aggregation of collScarabIssueAttributeValues
     */
    private Vector collScarabIssueAttributeValues;
    /**
     * Temporary storage of collScarabIssueAttributeValues to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollScarabIssueAttributeValues;

    public void initScarabIssueAttributeValues()
    {
        if (collScarabIssueAttributeValues == null)
            collScarabIssueAttributeValues = new Vector();
    }

    /**
     * Method called to associate a ScarabIssueAttributeValue object to this object
     * through the ScarabIssueAttributeValue foreign key attribute
     *
     * @param ScarabIssueAttributeValue l
     */
    public void addScarabIssueAttributeValues(ScarabIssueAttributeValue l) throws Exception
    {
        /*
        if (collScarabIssueAttributeValues == null)
        {
            if (tempcollScarabIssueAttributeValues == null)
            {
                tempcollScarabIssueAttributeValues = new Vector();
            }
            tempcollScarabIssueAttributeValues.add(l);
        }
        else
        {
            collScarabIssueAttributeValues.add(l);
        }
        */
        getScarabIssueAttributeValues().add(l);
        l.setScarabAttribute(this);
    }

    /**
     * The criteria used to select the current contents of collScarabIssueAttributeValues
     */
    private Criteria lastScarabIssueAttributeValuesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getScarabIssueAttributeValues(new Criteria())
     */
    public Vector getScarabIssueAttributeValues() throws Exception
    {
        if (collScarabIssueAttributeValues == null)
        {
            collScarabIssueAttributeValues = getScarabIssueAttributeValues(new Criteria(10));
        }
        return collScarabIssueAttributeValues;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabAttribute is new, it will return
     * an empty collection; or if this ScarabAttribute has previously
     * been saved, it will retrieve related ScarabIssueAttributeValues from storage.
     */
    public Vector getScarabIssueAttributeValues(Criteria criteria) throws Exception
    {
        if (collScarabIssueAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collScarabIssueAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabIssueAttributeValuePeer.ATTRIBUTE_ID, getAttributeId() );               
                   collScarabIssueAttributeValues = ScarabIssueAttributeValuePeer.doSelect(criteria);
            }
/*
            if (tempcollScarabIssueAttributeValues != null)
            {
                for (int i=0; i<tempcollScarabIssueAttributeValues.size(); i++)
                {
                    collScarabIssueAttributeValues.add(tempcollScarabIssueAttributeValues.get(i));
                }
                tempcollScarabIssueAttributeValues = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabIssueAttributeValuePeer.ATTRIBUTE_ID, getAttributeId() );               
               if ( !lastScarabIssueAttributeValuesCriteria.equals(criteria)  )
            {
                collScarabIssueAttributeValues = ScarabIssueAttributeValuePeer.doSelect(criteria);  
            }
        }
        lastScarabIssueAttributeValuesCriteria = criteria; 

        return collScarabIssueAttributeValues;
    }
      

        
      
      
          
                    
            
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabAttribute is new, it will return
     * an empty collection; or if this ScarabAttribute has previously
     * been saved, it will retrieve related ScarabIssueAttributeValues from storage.
     */
    public Vector getScarabIssueAttributeValuesJoinScarabIssue(Criteria criteria) 
        throws Exception
    {
        if (collScarabIssueAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collScarabIssueAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabIssueAttributeValuePeer.ATTRIBUTE_ID, getAttributeId() );               
                   collScarabIssueAttributeValues = ScarabIssueAttributeValuePeer.doSelectJoinScarabIssue(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabIssueAttributeValuePeer.ATTRIBUTE_ID, getAttributeId() );               
               if ( !lastScarabIssueAttributeValuesCriteria.equals(criteria)  )
            {
                collScarabIssueAttributeValues = ScarabIssueAttributeValuePeer.doSelectJoinScarabIssue(criteria);
            }
        }
        lastScarabIssueAttributeValuesCriteria = criteria; 

        return collScarabIssueAttributeValues;
    }
      
      
         
          
                    
            
        
       
      
      
          
                    
            
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabAttribute is new, it will return
     * an empty collection; or if this ScarabAttribute has previously
     * been saved, it will retrieve related ScarabIssueAttributeValues from storage.
     */
    public Vector getScarabIssueAttributeValuesJoinScarabAttributeOption(Criteria criteria) 
        throws Exception
    {
        if (collScarabIssueAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collScarabIssueAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabIssueAttributeValuePeer.ATTRIBUTE_ID, getAttributeId() );               
                   collScarabIssueAttributeValues = ScarabIssueAttributeValuePeer.doSelectJoinScarabAttributeOption(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabIssueAttributeValuePeer.ATTRIBUTE_ID, getAttributeId() );               
               if ( !lastScarabIssueAttributeValuesCriteria.equals(criteria)  )
            {
                collScarabIssueAttributeValues = ScarabIssueAttributeValuePeer.doSelectJoinScarabAttributeOption(criteria);
            }
        }
        lastScarabIssueAttributeValuesCriteria = criteria; 

        return collScarabIssueAttributeValues;
    }
      
      
      
          
                    
            
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabAttribute is new, it will return
     * an empty collection; or if this ScarabAttribute has previously
     * been saved, it will retrieve related ScarabIssueAttributeValues from storage.
     */
    public Vector getScarabIssueAttributeValuesJoinTurbineUser(Criteria criteria) 
        throws Exception
    {
        if (collScarabIssueAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collScarabIssueAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabIssueAttributeValuePeer.ATTRIBUTE_ID, getAttributeId() );               
                   collScarabIssueAttributeValues = ScarabIssueAttributeValuePeer.doSelectJoinTurbineUser(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabIssueAttributeValuePeer.ATTRIBUTE_ID, getAttributeId() );               
               if ( !lastScarabIssueAttributeValuesCriteria.equals(criteria)  )
            {
                collScarabIssueAttributeValues = ScarabIssueAttributeValuePeer.doSelectJoinTurbineUser(criteria);
            }
        }
        lastScarabIssueAttributeValuesCriteria = criteria; 

        return collScarabIssueAttributeValues;
    }
     



             
      
    /**
     * Collection to store aggregation of collScarabRModuleAttributes
     */
    private Vector collScarabRModuleAttributes;
    /**
     * Temporary storage of collScarabRModuleAttributes to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollScarabRModuleAttributes;

    public void initScarabRModuleAttributes()
    {
        if (collScarabRModuleAttributes == null)
            collScarabRModuleAttributes = new Vector();
    }

    /**
     * Method called to associate a ScarabRModuleAttribute object to this object
     * through the ScarabRModuleAttribute foreign key attribute
     *
     * @param ScarabRModuleAttribute l
     */
    public void addScarabRModuleAttributes(ScarabRModuleAttribute l) throws Exception
    {
        /*
        if (collScarabRModuleAttributes == null)
        {
            if (tempcollScarabRModuleAttributes == null)
            {
                tempcollScarabRModuleAttributes = new Vector();
            }
            tempcollScarabRModuleAttributes.add(l);
        }
        else
        {
            collScarabRModuleAttributes.add(l);
        }
        */
        getScarabRModuleAttributes().add(l);
        l.setScarabAttribute(this);
    }

    /**
     * The criteria used to select the current contents of collScarabRModuleAttributes
     */
    private Criteria lastScarabRModuleAttributesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getScarabRModuleAttributes(new Criteria())
     */
    public Vector getScarabRModuleAttributes() throws Exception
    {
        if (collScarabRModuleAttributes == null)
        {
            collScarabRModuleAttributes = getScarabRModuleAttributes(new Criteria(10));
        }
        return collScarabRModuleAttributes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabAttribute is new, it will return
     * an empty collection; or if this ScarabAttribute has previously
     * been saved, it will retrieve related ScarabRModuleAttributes from storage.
     */
    public Vector getScarabRModuleAttributes(Criteria criteria) throws Exception
    {
        if (collScarabRModuleAttributes == null)
        {
            if ( isNew() ) 
            {
               collScarabRModuleAttributes = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabRModuleAttributePeer.ATTRIBUTE_ID, getAttributeId() );               
                   collScarabRModuleAttributes = ScarabRModuleAttributePeer.doSelect(criteria);
            }
/*
            if (tempcollScarabRModuleAttributes != null)
            {
                for (int i=0; i<tempcollScarabRModuleAttributes.size(); i++)
                {
                    collScarabRModuleAttributes.add(tempcollScarabRModuleAttributes.get(i));
                }
                tempcollScarabRModuleAttributes = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabRModuleAttributePeer.ATTRIBUTE_ID, getAttributeId() );               
               if ( !lastScarabRModuleAttributesCriteria.equals(criteria)  )
            {
                collScarabRModuleAttributes = ScarabRModuleAttributePeer.doSelect(criteria);  
            }
        }
        lastScarabRModuleAttributesCriteria = criteria; 

        return collScarabRModuleAttributes;
    }
    

        
      
         
          
                    
            
        
       
      
      
          
                    
            
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabAttribute is new, it will return
     * an empty collection; or if this ScarabAttribute has previously
     * been saved, it will retrieve related ScarabRModuleAttributes from storage.
     */
    public Vector getScarabRModuleAttributesJoinScarabModule(Criteria criteria) 
        throws Exception
    {
        if (collScarabRModuleAttributes == null)
        {
            if ( isNew() ) 
            {
               collScarabRModuleAttributes = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabRModuleAttributePeer.ATTRIBUTE_ID, getAttributeId() );               
                   collScarabRModuleAttributes = ScarabRModuleAttributePeer.doSelectJoinScarabModule(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabRModuleAttributePeer.ATTRIBUTE_ID, getAttributeId() );               
               if ( !lastScarabRModuleAttributesCriteria.equals(criteria)  )
            {
                collScarabRModuleAttributes = ScarabRModuleAttributePeer.doSelectJoinScarabModule(criteria);
            }
        }
        lastScarabRModuleAttributesCriteria = criteria; 

        return collScarabRModuleAttributes;
    }
     



     
    


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                ScarabAttributePeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                ScarabAttributePeer.doInsert(this, dbCon);
            }
            else
            {
                ScarabAttributePeer.doUpdate(this, dbCon);
                setNew(false);
            }
        }

                                    
                
          if (collScarabActivitys != null )
          {
              for (int i=0; i<collScarabActivitys.size(); i++)
              {
                  ((ScarabActivity)collScarabActivitys.elementAt(i)).save(dbCon);
              }
          }
                                        
                
          if (collScarabAttributeOptions != null )
          {
              for (int i=0; i<collScarabAttributeOptions.size(); i++)
              {
                  ((ScarabAttributeOption)collScarabAttributeOptions.elementAt(i)).save(dbCon);
              }
          }
                                        
                
          if (collScarabIssueAttributeValues != null )
          {
              for (int i=0; i<collScarabIssueAttributeValues.size(); i++)
              {
                  ((ScarabIssueAttributeValue)collScarabIssueAttributeValues.elementAt(i)).save(dbCon);
              }
          }
                                        
                
          if (collScarabRModuleAttributes != null )
          {
              for (int i=0; i<collScarabRModuleAttributes.size(); i++)
              {
                  ((ScarabRModuleAttribute)collScarabRModuleAttributes.elementAt(i)).save(dbCon);
              }
          }
                  alreadyInSave = false;
      }
      }

                                                
    /** 
     * Set the Id using pk values.
     *
     * @param int attribute_id
     */
    public void setId(
                      int attribute_id
                                                                 ) throws Exception
    {
                     setAttributeId(attribute_id);
                                                    }


    /** 
     * Set the Id using a : separated String of pk values.
     */
    public void setId(Object id) throws Exception
    {
        StringTokenizer st = new StringTokenizer(id.toString(), ":");
                           setAttributeId( Integer.parseInt(st.nextToken()) );
                                                            }


    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public Object getId() 
    {
        return ""
                      + getAttributeId()
                                                                 ;
    } 

    /** 
     * returns an id that can be used to specify this object in
     * a query string.
     */
    public String getQueryOID() 
    {
        return "ScarabAttribute[" + getId() + "]";
    }

    /**
     * Makes a copy of this object.  
     * It creates a new object filling in the simple attributes.
      * It then fills all the association collections and sets the
     * related objects to isNew=true.
      */
    public ScarabAttribute copy() throws Exception
    {
        ScarabAttribute copyObj = new ScarabAttribute();
         copyObj.setAttributeId(attribute_id);
         copyObj.setName(attribute_name);
         copyObj.setTypeId(attribute_type_id);
         copyObj.setDeleted(deleted);
 
                                  
                
         Vector v = copyObj.getScarabActivitys();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.elementAt(i)).setNew(true);
         }
                                         
                
         v = copyObj.getScarabAttributeOptions();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.elementAt(i)).setNew(true);
         }
                                         
                
         v = copyObj.getScarabIssueAttributeValues();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.elementAt(i)).setNew(true);
         }
                                         
                
         v = copyObj.getScarabRModuleAttributes();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.elementAt(i)).setNew(true);
         }
         
                        
        copyObj.setAttributeId(NEW_ID);
                                return copyObj;
    }             

}
