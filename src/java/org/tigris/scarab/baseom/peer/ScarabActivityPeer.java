package org.tigris.scarab.baseom.peer;

// JDK classes
import java.util.*;

// Village classes
import com.workingdogs.village.*;

// Turbine classes
import org.apache.turbine.om.peer.*;
import org.apache.turbine.util.*;
import org.apache.turbine.util.db.*;
import org.apache.turbine.util.db.map.*;
import org.apache.turbine.util.db.pool.DBConnection;

import org.tigris.scarab.baseom.ScarabActivity;

// Local classes
import org.tigris.scarab.baseom.map.*;
import org.tigris.scarab.baseom.*;

/** This class was autogenerated by GenerateMapBuilder on: Mon Jan 08 11:17:17 PST 2001 */
public class ScarabActivityPeer extends BasePeer
{
    /** the mapbuilder for this class */
    private static final ScarabActivityMapBuilder mapBuilder = 
        (ScarabActivityMapBuilder)getMapBuilder(ScarabActivityMapBuilder.CLASS_NAME);

    /** the table name for this class */
    public static final String TABLE_NAME = mapBuilder.getTable();

    /** the column name for the ISSUE_ID field */
    public static final String ISSUE_ID = mapBuilder.getScarabActivity_IssueId();
    /** the column name for the ATTRIBUTE_ID field */
    public static final String ATTRIBUTE_ID = mapBuilder.getScarabActivity_AttributeId();
    /** the column name for the TRANSACTION_ID field */
    public static final String TRANSACTION_ID = mapBuilder.getScarabActivity_TransactionId();
    /** the column name for the OLD_VALUE field */
    public static final String OLD_VALUE = mapBuilder.getScarabActivity_OldValue();
    /** the column name for the NEW_VALUE field */
    public static final String NEW_VALUE = mapBuilder.getScarabActivity_NewValue();

    /** number of columns for this peer */
    public static final int numColumns =  5;;

    /** Method to do inserts */
    public static Object doInsert( Criteria criteria ) throws Exception
    {
        criteria.setDbName(getMapBuilder().getDatabaseMap().getName());
                                                                                   return BasePeer.doInsert( criteria );
    }

    /** 
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Criteria) method.  It will take care of 
     * the connection details internally. 
     */
    public static Object doInsert( Criteria criteria, DBConnection dbCon ) throws Exception
    {
        criteria.setDbName(getMapBuilder().getDatabaseMap().getName());
                                                                                   return BasePeer.doInsert( criteria, dbCon );
    }

    /** Add all the columns needed to create a new object */
    public static void addSelectColumns (Criteria criteria) throws Exception
    {
            criteria.addSelectColumn( ISSUE_ID );
            criteria.addSelectColumn( ATTRIBUTE_ID );
            criteria.addSelectColumn( TRANSACTION_ID );
            criteria.addSelectColumn( OLD_VALUE );
            criteria.addSelectColumn( NEW_VALUE );
        }


    /** Create a new object of type cls from a resultset row starting
      * from a specified offset.  This is done so that you can select
      * other rows than just those needed for this object.  You may
      * for example want to create two objects from the same row.
      */
    public static ScarabActivity row2Object (Record row, int offset, Class cls ) throws Exception
    {
        ScarabActivity obj = (ScarabActivity)cls.newInstance();
                                        obj.setIssueId(row.getValue(offset+0).asInt());
                                            obj.setAttributeId(row.getValue(offset+1).asInt());
                                            obj.setTransactionId(row.getValue(offset+2).asInt());
                                            obj.setOldValue(row.getValue(offset+3).asString());
                                            obj.setNewValue(row.getValue(offset+4).asString());
                                        obj.setModified(false);
            obj.setNew(false);
                return obj;
    }

    /** Method to do selects */
    public static Vector doSelect( Criteria criteria ) throws Exception
    {
        criteria.setDbName(getMapBuilder().getDatabaseMap().getName());
        return doSelect (criteria,"org.tigris.scarab.baseom.ScarabActivity", null);
    }

    /** 
     * Method to do selects.  This method is to be used during a transaction,
     * otherwise use the doSelect(Criteria) method.  It will take care of 
     * the connection details internally. 
     */
    public static Vector doSelect( Criteria criteria, DBConnection dbCon ) throws Exception
    {
        criteria.setDbName(getMapBuilder().getDatabaseMap().getName());
        return doSelect (criteria,"org.tigris.scarab.baseom.ScarabActivity", dbCon);
    }

    /** Method to do selects. The returned vector will have object
      * of className
      */
    public static Vector doSelect( Criteria criteria, String className, DBConnection dbCon) throws Exception
    {
        addSelectColumns ( criteria );

                                                                           
        // BasePeer returns a Vector of Value (Village) arrays.  The array
        // order follows the order columns were placed in the Select clause.
        Vector rows = null;
        if (dbCon == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria, dbCon);
        }
        Vector results = new Vector();

        // populate the object(s)
        for ( int i=0; i<rows.size(); i++ )
        {
            Record row = (Record)rows.elementAt(i);
            results.add (row2Object (row,1,Class.forName (className)));
         }
         return results;
    }

    /**
     * Method to do updates. 
     *
     * @param Criteria object containing data that is used to create the UPDATE statement.
     */
    public static void doUpdate(Criteria criteria) throws Exception
    {
        criteria.setDbName(getMapBuilder().getDatabaseMap().getName());
        Criteria selectCriteria = new Criteria(2);
                                selectCriteria.put( ISSUE_ID, criteria.remove(ISSUE_ID) );
                                         selectCriteria.put( ATTRIBUTE_ID, criteria.remove(ATTRIBUTE_ID) );
                                         selectCriteria.put( TRANSACTION_ID, criteria.remove(TRANSACTION_ID) );
                                                                     BasePeer.doUpdate( selectCriteria, criteria );
    }

    /** 
     * Method to do updates.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Criteria) method.  It will take care of 
     * the connection details internally. 
     *
     * @param Criteria object containing data that is used to create the UPDATE statement.
     */
    public static void doUpdate(Criteria criteria, DBConnection dbCon) throws Exception
    {
         criteria.setDbName(getMapBuilder().getDatabaseMap().getName());
         Criteria selectCriteria = new Criteria(2);
                                selectCriteria.put( ISSUE_ID, criteria.remove(ISSUE_ID) );
                                         selectCriteria.put( ATTRIBUTE_ID, criteria.remove(ATTRIBUTE_ID) );
                                         selectCriteria.put( TRANSACTION_ID, criteria.remove(TRANSACTION_ID) );
                                                                     BasePeer.doUpdate( selectCriteria, criteria, dbCon );
     }

    /** 
     * Method to do deletes.
     *
     * @param Criteria object containing data that is used DELETE from database.
     */
     public static void doDelete(Criteria criteria) throws Exception
     {
         criteria.setDbName(getMapBuilder().getDatabaseMap().getName());
                                                                                    BasePeer.doDelete ( criteria );
     }

    /** 
     * Method to do deletes.  This method is to be used during a transaction,
     * otherwise use the doInsert(Criteria) method.  It will take care of 
     * the connection details internally. 
     *
     * @param Criteria object containing data that is used DELETE from database.
     */
     public static void doDelete(Criteria criteria, DBConnection dbCon) throws Exception
     {
         criteria.setDbName(getMapBuilder().getDatabaseMap().getName());
                                                                                    BasePeer.doDelete ( criteria, dbCon );
     }

    /** Method to do inserts */
    public static void doInsert( ScarabActivity obj ) throws Exception
    {
        obj.setPrimaryKey(doInsert(buildCriteria(obj)));
    }

    /**
     * @param obj the data object to update in the database.
     */
    public static void doUpdate(ScarabActivity obj) throws Exception
    {
        doUpdate(buildCriteria(obj));
    }
    /**
     * @param obj the data object to delete in the database.
     */
    public static void doDelete(ScarabActivity obj) throws Exception
    {
        doDelete(buildCriteria(obj));
    }

    /** 
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(ScarabActivity) method.  It will take 
     * care of the connection details internally. 
     *
     * @param obj the data object to insert into the database.
     */
    public static void doInsert( ScarabActivity obj, DBConnection dbCon) throws Exception
    {
        obj.setPrimaryKey(doInsert(buildCriteria(obj), dbCon));
    }

    /**
     * Method to do update.  This method is to be used during a transaction,
     * otherwise use the doUpdate(ScarabActivity) method.  It will take 
     * care of the connection details internally. 
     *
     * @param obj the data object to update in the database.
     */
    public static void doUpdate(ScarabActivity obj, DBConnection dbCon) throws Exception
    {
        doUpdate(buildCriteria(obj), dbCon);
    }
    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(ScarabActivity) method.  It will take 
     * care of the connection details internally. 
     *
     * @param obj the data object to delete in the database.
     */
    public static void doDelete(ScarabActivity obj, DBConnection dbCon) throws Exception
    {
        doDelete(buildCriteria(obj), dbCon);
    }

    /** Build a Criteria object from the data object for this peer */
    public static Criteria buildCriteria( ScarabActivity obj )
    {
        Criteria criteria = new Criteria();
                            if ( !obj.isNew() )
            criteria.add( ISSUE_ID, obj.getIssueId() );
                                        if ( !obj.isNew() )
            criteria.add( ATTRIBUTE_ID, obj.getAttributeId() );
                                        if ( !obj.isNew() )
            criteria.add( TRANSACTION_ID, obj.getTransactionId() );
                                        criteria.add( OLD_VALUE, obj.getOldValue() );
                                        criteria.add( NEW_VALUE, obj.getNewValue() );
                            return criteria;
    }

    /** 
     * Retrieve a single object by pk where multiple PK's are separated
     * by colons
     *
     * @param int issue_id
     * @param int attribute_id
     * @param int transaction_id
     */
    public static ScarabActivity retrieveById(Object pkid) 
        throws Exception
    {
        StringTokenizer stok = new StringTokenizer((String)pkid, ":");
        if ( stok.countTokens() < 3 )
        {   
            throw new TurbineException(
                "id tokens did not match number of primary keys" );
        }
           int issue_id = Integer.parseInt(stok.nextToken());;
           int attribute_id = Integer.parseInt(stok.nextToken());;
           int transaction_id = Integer.parseInt(stok.nextToken());;

       return retrieveByPK(
             issue_id
              , attribute_id
              , transaction_id
              );
    }

    /** 
     * Retrieve a single object by pk
     *
     * @param int issue_id
     * @param int attribute_id
     * @param int transaction_id
     */
    public static ScarabActivity retrieveByPK(
                      int issue_id
                                      , int attribute_id
                                      , int transaction_id
                                                     ) throws Exception
    {
        Criteria criteria = new Criteria();
                       if( issue_id > 0 )
                  criteria.add( ScarabActivityPeer.ISSUE_ID, issue_id );
                            if( attribute_id > 0 )
                  criteria.add( ScarabActivityPeer.ATTRIBUTE_ID, attribute_id );
                            if( transaction_id > 0 )
                  criteria.add( ScarabActivityPeer.TRANSACTION_ID, transaction_id );
                                   Vector ScarabActivityVector = doSelect(criteria);
        if (ScarabActivityVector.size() != 1)
        {
            throw new Exception("Failed to select one and only one row.");
        }
        else
        {
            return (ScarabActivity) ScarabActivityVector.firstElement();
        }
    }


       
        
                       
     
          


   /**
    * selects a collection of ScarabActivity objects pre-filled with their
    * ScarabIssue objects.
    */
    public static Vector doSelectJoinScarabIssue(Criteria c)
        throws Exception
    {
        addSelectColumns(c);
        int offset = numColumns + 1;
        ScarabIssuePeer.addSelectColumns(c);

                                                                                   
        Vector rows = BasePeer.doSelect(c);
        Vector results = new Vector();

        for (int i=0; i<rows.size(); i++)
        {
            ScarabActivity obj1 = 
                row2Object((com.workingdogs.village.Record)rows.elementAt(i),
                            1, Class.forName("org.tigris.scarab.baseom.ScarabActivity") );
            ScarabIssue obj2 = ScarabIssuePeer
                .row2Object((com.workingdogs.village.Record)rows.elementAt(i),
                            offset, Class.forName("org.tigris.scarab.baseom.ScarabIssue") );
            
            boolean newObject = true;
            for (int j=0; j<results.size(); j++)
            {
                ScarabActivity temp_obj1 = (ScarabActivity)results.elementAt(j);
                ScarabIssue temp_obj2 = temp_obj1.getScarabIssue();
                if ( temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey() ) )
                {
                    newObject = false;
                    temp_obj2.addScarabActivitys(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScarabActivitys();
                obj2.addScarabActivitys(obj1);
            }
            results.add(obj1);

        }

        return results;
    }
         
                       
     
          


   /**
    * selects a collection of ScarabActivity objects pre-filled with their
    * ScarabAttribute objects.
    */
    public static Vector doSelectJoinScarabAttribute(Criteria c)
        throws Exception
    {
        addSelectColumns(c);
        int offset = numColumns + 1;
        ScarabAttributePeer.addSelectColumns(c);

                                                                                   
        Vector rows = BasePeer.doSelect(c);
        Vector results = new Vector();

        for (int i=0; i<rows.size(); i++)
        {
            ScarabActivity obj1 = 
                row2Object((com.workingdogs.village.Record)rows.elementAt(i),
                            1, Class.forName("org.tigris.scarab.baseom.ScarabActivity") );
            ScarabAttribute obj2 = ScarabAttributePeer
                .row2Object((com.workingdogs.village.Record)rows.elementAt(i),
                            offset, Class.forName("org.tigris.scarab.baseom.ScarabAttribute") );
            
            boolean newObject = true;
            for (int j=0; j<results.size(); j++)
            {
                ScarabActivity temp_obj1 = (ScarabActivity)results.elementAt(j);
                ScarabAttribute temp_obj2 = temp_obj1.getScarabAttribute();
                if ( temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey() ) )
                {
                    newObject = false;
                    temp_obj2.addScarabActivitys(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScarabActivitys();
                obj2.addScarabActivitys(obj1);
            }
            results.add(obj1);

        }

        return results;
    }
         
                       
     
          


   /**
    * selects a collection of ScarabActivity objects pre-filled with their
    * ScarabTransaction objects.
    */
    public static Vector doSelectJoinScarabTransaction(Criteria c)
        throws Exception
    {
        addSelectColumns(c);
        int offset = numColumns + 1;
        ScarabTransactionPeer.addSelectColumns(c);

                                                                                   
        Vector rows = BasePeer.doSelect(c);
        Vector results = new Vector();

        for (int i=0; i<rows.size(); i++)
        {
            ScarabActivity obj1 = 
                row2Object((com.workingdogs.village.Record)rows.elementAt(i),
                            1, Class.forName("org.tigris.scarab.baseom.ScarabActivity") );
            ScarabTransaction obj2 = ScarabTransactionPeer
                .row2Object((com.workingdogs.village.Record)rows.elementAt(i),
                            offset, Class.forName("org.tigris.scarab.baseom.ScarabTransaction") );
            
            boolean newObject = true;
            for (int j=0; j<results.size(); j++)
            {
                ScarabActivity temp_obj1 = (ScarabActivity)results.elementAt(j);
                ScarabTransaction temp_obj2 = temp_obj1.getScarabTransaction();
                if ( temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey() ) )
                {
                    newObject = false;
                    temp_obj2.addScarabActivitys(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScarabActivitys();
                obj2.addScarabActivitys(obj1);
            }
            results.add(obj1);

        }

        return results;
    }
    

  
  
     
                       
          


   /**
    * selects a collection of ScarabActivity objects pre-filled with 
    * all related objects.
    */
    public static Vector doSelectJoinAllExceptScarabIssue(Criteria c) 
        throws Exception
    {
        addSelectColumns(c);
        int offset2 = numColumns + 1;
        
                    
                ScarabAttributePeer.addSelectColumns(c);
        int offset3 = offset2 + ScarabAttributePeer.numColumns;
                        
                ScarabTransactionPeer.addSelectColumns(c);
        int offset4 = offset3 + ScarabTransactionPeer.numColumns;
                                                                                                   
        Vector rows = BasePeer.doSelect(c);
        Vector results = new Vector();

        for (int i=0; i<rows.size(); i++)
        {
            ScarabActivity obj1 = 
                row2Object((com.workingdogs.village.Record)rows.elementAt(i),
                            1, Class.forName("org.tigris.scarab.baseom.ScarabActivity") );
        
                  
                                                
                        
                        ScarabAttribute obj2 = ScarabAttributePeer
                .row2Object((com.workingdogs.village.Record)rows.elementAt(i),
                            offset2, Class.forName("org.tigris.scarab.baseom.ScarabAttribute") );

            
             boolean  newObject = true;
            for (int j=0; j<results.size(); j++)
            {
                ScarabActivity temp_obj1 = (ScarabActivity)results.elementAt(j);
                ScarabAttribute temp_obj2 = temp_obj1.getScarabAttribute();
                if ( temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey() ) )
                {
                    newObject = false;
                    temp_obj2.addScarabActivitys(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScarabActivitys();
                obj2.addScarabActivitys(obj1);
            }
      
                                                
                        
                        ScarabTransaction obj3 = ScarabTransactionPeer
                .row2Object((com.workingdogs.village.Record)rows.elementAt(i),
                            offset3, Class.forName("org.tigris.scarab.baseom.ScarabTransaction") );

            
             newObject = true;
            for (int j=0; j<results.size(); j++)
            {
                ScarabActivity temp_obj1 = (ScarabActivity)results.elementAt(j);
                ScarabTransaction temp_obj3 = temp_obj1.getScarabTransaction();
                if ( temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey() ) )
                {
                    newObject = false;
                    temp_obj3.addScarabActivitys(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initScarabActivitys();
                obj3.addScarabActivitys(obj1);
            }
                  results.add(obj1);

        }

        return results;
    }
  
     
                       
          


   /**
    * selects a collection of ScarabActivity objects pre-filled with 
    * all related objects.
    */
    public static Vector doSelectJoinAllExceptScarabAttribute(Criteria c) 
        throws Exception
    {
        addSelectColumns(c);
        int offset2 = numColumns + 1;
        
                ScarabIssuePeer.addSelectColumns(c);
        int offset3 = offset2 + ScarabIssuePeer.numColumns;
                        
                    
                ScarabTransactionPeer.addSelectColumns(c);
        int offset4 = offset3 + ScarabTransactionPeer.numColumns;
                                                                                                   
        Vector rows = BasePeer.doSelect(c);
        Vector results = new Vector();

        for (int i=0; i<rows.size(); i++)
        {
            ScarabActivity obj1 = 
                row2Object((com.workingdogs.village.Record)rows.elementAt(i),
                            1, Class.forName("org.tigris.scarab.baseom.ScarabActivity") );
        
                                                
                        
                        ScarabIssue obj2 = ScarabIssuePeer
                .row2Object((com.workingdogs.village.Record)rows.elementAt(i),
                            offset2, Class.forName("org.tigris.scarab.baseom.ScarabIssue") );

            
             boolean  newObject = true;
            for (int j=0; j<results.size(); j++)
            {
                ScarabActivity temp_obj1 = (ScarabActivity)results.elementAt(j);
                ScarabIssue temp_obj2 = temp_obj1.getScarabIssue();
                if ( temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey() ) )
                {
                    newObject = false;
                    temp_obj2.addScarabActivitys(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScarabActivitys();
                obj2.addScarabActivitys(obj1);
            }
      
                  
                                                
                        
                        ScarabTransaction obj3 = ScarabTransactionPeer
                .row2Object((com.workingdogs.village.Record)rows.elementAt(i),
                            offset3, Class.forName("org.tigris.scarab.baseom.ScarabTransaction") );

            
             newObject = true;
            for (int j=0; j<results.size(); j++)
            {
                ScarabActivity temp_obj1 = (ScarabActivity)results.elementAt(j);
                ScarabTransaction temp_obj3 = temp_obj1.getScarabTransaction();
                if ( temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey() ) )
                {
                    newObject = false;
                    temp_obj3.addScarabActivitys(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initScarabActivitys();
                obj3.addScarabActivitys(obj1);
            }
                  results.add(obj1);

        }

        return results;
    }
  
     
                       
          


   /**
    * selects a collection of ScarabActivity objects pre-filled with 
    * all related objects.
    */
    public static Vector doSelectJoinAllExceptScarabTransaction(Criteria c) 
        throws Exception
    {
        addSelectColumns(c);
        int offset2 = numColumns + 1;
        
                ScarabIssuePeer.addSelectColumns(c);
        int offset3 = offset2 + ScarabIssuePeer.numColumns;
                        
                ScarabAttributePeer.addSelectColumns(c);
        int offset4 = offset3 + ScarabAttributePeer.numColumns;
                        
                                                                                               
        Vector rows = BasePeer.doSelect(c);
        Vector results = new Vector();

        for (int i=0; i<rows.size(); i++)
        {
            ScarabActivity obj1 = 
                row2Object((com.workingdogs.village.Record)rows.elementAt(i),
                            1, Class.forName("org.tigris.scarab.baseom.ScarabActivity") );
        
                                                
                        
                        ScarabIssue obj2 = ScarabIssuePeer
                .row2Object((com.workingdogs.village.Record)rows.elementAt(i),
                            offset2, Class.forName("org.tigris.scarab.baseom.ScarabIssue") );

            
             boolean  newObject = true;
            for (int j=0; j<results.size(); j++)
            {
                ScarabActivity temp_obj1 = (ScarabActivity)results.elementAt(j);
                ScarabIssue temp_obj2 = temp_obj1.getScarabIssue();
                if ( temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey() ) )
                {
                    newObject = false;
                    temp_obj2.addScarabActivitys(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScarabActivitys();
                obj2.addScarabActivitys(obj1);
            }
      
                                                
                        
                        ScarabAttribute obj3 = ScarabAttributePeer
                .row2Object((com.workingdogs.village.Record)rows.elementAt(i),
                            offset3, Class.forName("org.tigris.scarab.baseom.ScarabAttribute") );

            
             newObject = true;
            for (int j=0; j<results.size(); j++)
            {
                ScarabActivity temp_obj1 = (ScarabActivity)results.elementAt(j);
                ScarabAttribute temp_obj3 = temp_obj1.getScarabAttribute();
                if ( temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey() ) )
                {
                    newObject = false;
                    temp_obj3.addScarabActivitys(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initScarabActivitys();
                obj3.addScarabActivitys(obj1);
            }
      
                              results.add(obj1);

        }

        return results;
    }
   


  
    /** 
     * Retrieve objects by fk
     *
     * @param int issue_id
     */
//    public static Vector retrieveByIssueId(int issue_id)
//    {
        
    
    /** 
     * Retrieve objects by fk
     *
     * @param int attribute_id
     */
//    public static Vector retrieveByAttributeId(int attribute_id)
//    {
        
    
    /** 
     * Retrieve objects by fk
     *
     * @param int transaction_id
     */
//    public static Vector retrieveByTransactionId(int transaction_id)
//    {
        
      
}








