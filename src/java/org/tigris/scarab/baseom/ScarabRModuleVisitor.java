package org.tigris.scarab.baseom;

// JDK classes
import java.util.*;

// Turbine classes
import org.apache.turbine.om.BaseObject;
import org.apache.turbine.om.peer.BasePeer;
import org.tigris.scarab.baseom.peer.*;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

/** This class was autogenerated by GenerateMapBuilder on: Fri Dec 15 13:47:21 PST 2000 */
public class ScarabRModuleVisitor extends BaseObject
{
    /** the value for the module_id field */
    private int module_id;
    /** the value for the visitor_id field */
    private int visitor_id;
    /** the value for the deleted field */
    private String deleted;


    /**
     * Get the ModuleId
     * @return int
     */
     public int getModuleId()
     {
          return module_id;
     }

                        
    /**
     * Set the value of ModuleId
     */
     public void setModuleId(int v ) throws Exception
     {
                  if ( aScarabModule != null && !aScarabModule.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  
       
          // update associated ScarabRModuleVisitorRole
          if (collScarabRModuleVisitorRoles != null )
          {
              for (int i=0; i<collScarabRModuleVisitorRoles.size(); i++)
              {
                  ((ScarabRModuleVisitorRole)collScarabRModuleVisitorRoles.elementAt(i))
                      .setModuleId(v);
              }
          }

 
           if (this.module_id != v)
           {
              this.module_id = v;
              setModified(true);
          }
     }
    /**
     * Get the VisitorId
     * @return int
     */
     public int getVisitorId()
     {
          return visitor_id;
     }

                            
    /**
     * Set the value of VisitorId
     */
     public void setVisitorId(int v ) throws Exception
     {
  
  
       
          // update associated ScarabRModuleVisitorRole
          if (collScarabRModuleVisitorRoles != null )
          {
              for (int i=0; i<collScarabRModuleVisitorRoles.size(); i++)
              {
                  ((ScarabRModuleVisitorRole)collScarabRModuleVisitorRoles.elementAt(i))
                      .setVisitorId(v);
              }
          }

 
           if (this.visitor_id != v)
           {
              this.visitor_id = v;
              setModified(true);
          }
     }
    /**
     * Get the Deleted
     * @return String
     */
     public String getDeleted()
     {
          return deleted;
     }

        
    /**
     * Set the value of Deleted
     */
     public void setDeleted(String v ) 
     {
  
  
           if ( !ObjectUtils.equals(this.deleted, v) )
           {
              this.deleted = v;
              setModified(true);
          }
     }

 
 
   
             
   
   
    /**
     * Declares an association between this object and a ScarabModule object
     *
     * @param ScarabModule v
     */
    private ScarabModule aScarabModule;
    void setScarabModule(ScarabModule v) throws Exception
    {
        aScarabModule = null;
           setModuleId(v.getModuleId());
           aScarabModule = v;
    }

                     
    public ScarabModule getScarabModule() throws Exception
    {
        if (aScarabModule != null)
        {
            return aScarabModule;            
        }
        else if (this.module_id>0)
        {
            ScarabModule obj = ScarabModulePeer.retrieveByPK(this.module_id);
            // The following line can be added to guarantee the related
            // object contains a reference to this object, but this
            // level of coupling may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // obj.addScarabRModuleVisitors(this);
            return obj;
        }
        return null;
    }

    
                     
      
    /**
     * Collection to store aggregation of collScarabRModuleVisitorRoles
     */
    private Vector collScarabRModuleVisitorRoles;
    /**
     * Temporary storage of collScarabRModuleVisitorRoles to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollScarabRModuleVisitorRoles;

    public void initScarabRModuleVisitorRoles()
    {
        if (collScarabRModuleVisitorRoles == null)
            collScarabRModuleVisitorRoles = new Vector();
    }

    /**
     * Method called to associate a ScarabRModuleVisitorRole object to this object
     * through the ScarabRModuleVisitorRole foreign key attribute
     *
     * @param ScarabRModuleVisitorRole l
     */
    public void addScarabRModuleVisitorRoles(ScarabRModuleVisitorRole l) throws Exception
    {
        /*
        if (collScarabRModuleVisitorRoles == null)
        {
            if (tempcollScarabRModuleVisitorRoles == null)
            {
                tempcollScarabRModuleVisitorRoles = new Vector();
            }
            tempcollScarabRModuleVisitorRoles.add(l);
        }
        else
        {
            collScarabRModuleVisitorRoles.add(l);
        }
        */
        getScarabRModuleVisitorRoles().add(l);
        l.setScarabRModuleVisitor(this);
    }

    /**
     * The criteria used to select the current contents of collScarabRModuleVisitorRoles
     */
    private Criteria lastScarabRModuleVisitorRolesCriteria = null;

    /**
     * If this collection has already been initialized, it returns
     * the collection. Otherwise if this ScarabRModuleVisitor is new, it will return
     * an empty collection; or if this ScarabRModuleVisitor has previously
     * been saved, it will retrieve related ScarabRModuleVisitorRoles from storage.
     */
    public Vector getScarabRModuleVisitorRoles() throws Exception
    {
        return getScarabRModuleVisitorRoles(new Criteria(5));
    }

    /**
     * If this collection has already been initialized, it returns
     * the collection. Otherwise if this ScarabRModuleVisitor is new, it will return
     * an empty collection; or if this ScarabRModuleVisitor has previously
     * been saved, it will retrieve related ScarabRModuleVisitorRoles from storage.
     */
    public Vector getScarabRModuleVisitorRoles(Criteria criteria) throws Exception
    {
        if (collScarabRModuleVisitorRoles == null)
        {
            if ( isNew() ) 
            {
               collScarabRModuleVisitorRoles = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabRModuleVisitorRolePeer.MODULE_ID, getModuleId() );               
                   criteria.add(ScarabRModuleVisitorRolePeer.VISITOR_ID, getVisitorId() );               
                   collScarabRModuleVisitorRoles = ScarabRModuleVisitorRolePeer.doSelect(criteria);
            }
/*
            if (tempcollScarabRModuleVisitorRoles != null)
            {
                for (int i=0; i<tempcollScarabRModuleVisitorRoles.size(); i++)
                {
                    collScarabRModuleVisitorRoles.add(tempcollScarabRModuleVisitorRoles.get(i));
                }
                tempcollScarabRModuleVisitorRoles = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabRModuleVisitorRolePeer.MODULE_ID, getModuleId() );               
                   criteria.add(ScarabRModuleVisitorRolePeer.VISITOR_ID, getVisitorId() );               
               if ( lastScarabRModuleVisitorRolesCriteria.size() == criteria.size() )
            {
                newCriteria = false;
                for (Enumeration e=criteria.keys(); e.hasMoreElements(); )
                {
                    Object key = e.nextElement();
                    if ( lastScarabRModuleVisitorRolesCriteria.containsKey(key) )
                    {
                        if ( !criteria.get(key).equals(
                            lastScarabRModuleVisitorRolesCriteria.get(key)) )
                        {
                            newCriteria = true;
                            break;
                        }
                    }
                    else
                    {
                        newCriteria = true;
                        break;
                    }
                }
            }
            if (newCriteria)
            {
                collScarabRModuleVisitorRoles = ScarabRModuleVisitorRolePeer.doSelect(criteria);  
            }
        }
        lastScarabRModuleVisitorRolesCriteria = criteria; 

        return collScarabRModuleVisitorRoles;
    }

     
    


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                ScarabRModuleVisitorPeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                ScarabRModuleVisitorPeer.doInsert(this, dbCon);
            }
            else
            {
                ScarabRModuleVisitorPeer.doUpdate(this, dbCon);
                setNew(false);
            }
        }

                    
      
          if (collScarabRModuleVisitorRoles != null )
          {
              for (int i=0; i<collScarabRModuleVisitorRoles.size(); i++)
              {
                  ((ScarabRModuleVisitorRole)collScarabRModuleVisitorRoles.elementAt(i)).save(dbCon);
              }
          }
             alreadyInSave = false;
      }
      }

                                                                
    /** 
     * Set the Id using pk values.
     *
     * @param int module_id
     * @param int visitor_id
     */
    public void setId(
                      int module_id
                                      , int visitor_id
                                         ) throws Exception
    {
                     setModuleId(module_id);
                             setVisitorId(visitor_id);
                            }


    /** 
     * Set the Id using a : separated String of pk values.
     */
    public void setId(Object id) throws Exception
    {
        StringTokenizer st = new StringTokenizer(id.toString(), ":");
                           setModuleId( Integer.parseInt(st.nextToken()) );
                                          setVisitorId( Integer.parseInt(st.nextToken()) );
                                    }


    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public Object getId() 
    {
        return ""
                      + getModuleId()
                                      + ":"  + getVisitorId()
                                         ;
    } 

    /** 
     * returns an id that can be used to specify this object in
     * a query string.
     */
    public String getQueryOID() 
    {
        return "ScarabRModuleVisitor[" + getId() + "]";
    }


}




