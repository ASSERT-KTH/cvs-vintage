package org.tigris.scarab.baseom;

// JDK classes
import java.util.*;

// Turbine classes
import org.apache.turbine.om.BaseObject;
import org.apache.turbine.om.peer.BasePeer;
import org.tigris.scarab.baseom.peer.*;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

/** This class was autogenerated by GenerateMapBuilder on: Fri Dec 15 13:47:21 PST 2000 */
public class ScarabAttachment extends BaseObject
{
    /** the value for the attachment_id field */
    private int attachment_id;
    /** the value for the issue_id field */
    private int issue_id;
    /** the value for the attachment_type_id field */
    private int attachment_type_id;
    /** the value for the attachment_name field */
    private String attachment_name;
    /** the value for the attachment_data field */
    private String attachment_data;
    /** the value for the attachment_file_path field */
    private String attachment_file_path;
    /** the value for the attachment_mime_type field */
    private String attachment_mime_type;
    /** the value for the modified_by field */
    private int modified_by;
    /** the value for the created_by field */
    private int created_by;
    /** the value for the modified_date field */
    private Date modified_date;
    /** the value for the created_date field */
    private Date created_date;
    /** the value for the deleted field */
    private String deleted;


    /**
     * Get the AttachmentId
     * @return int
     */
     public int getAttachmentId()
     {
          return attachment_id;
     }

        
    /**
     * Set the value of AttachmentId
     */
     public void setAttachmentId(int v ) 
     {
  
  
           if (this.attachment_id != v)
           {
              this.attachment_id = v;
              setModified(true);
          }
     }
    /**
     * Get the IssueId
     * @return int
     */
     public int getIssueId()
     {
          return issue_id;
     }

            
    /**
     * Set the value of IssueId
     */
     public void setIssueId(int v ) throws Exception
     {
                  if ( aScarabIssue != null && !aScarabIssue.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  
           if (this.issue_id != v)
           {
              this.issue_id = v;
              setModified(true);
          }
     }
    /**
     * Get the TypeId
     * @return int
     */
     public int getTypeId()
     {
          return attachment_type_id;
     }

            
    /**
     * Set the value of TypeId
     */
     public void setTypeId(int v ) throws Exception
     {
                  if ( aScarabAttachmentType != null && !aScarabAttachmentType.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  
           if (this.attachment_type_id != v)
           {
              this.attachment_type_id = v;
              setModified(true);
          }
     }
    /**
     * Get the Name
     * @return String
     */
     public String getName()
     {
          return attachment_name;
     }

        
    /**
     * Set the value of Name
     */
     public void setName(String v ) 
     {
  
  
           if ( !ObjectUtils.equals(this.attachment_name, v) )
           {
              this.attachment_name = v;
              setModified(true);
          }
     }
    /**
     * Get the Data
     * @return String
     */
     public String getData()
     {
          return attachment_data;
     }

        
    /**
     * Set the value of Data
     */
     public void setData(String v ) 
     {
  
  
           if ( !ObjectUtils.equals(this.attachment_data, v) )
           {
              this.attachment_data = v;
              setModified(true);
          }
     }
    /**
     * Get the FilePath
     * @return String
     */
     public String getFilePath()
     {
          return attachment_file_path;
     }

        
    /**
     * Set the value of FilePath
     */
     public void setFilePath(String v ) 
     {
  
  
           if ( !ObjectUtils.equals(this.attachment_file_path, v) )
           {
              this.attachment_file_path = v;
              setModified(true);
          }
     }
    /**
     * Get the MimeType
     * @return String
     */
     public String getMimeType()
     {
          return attachment_mime_type;
     }

        
    /**
     * Set the value of MimeType
     */
     public void setMimeType(String v ) 
     {
  
  
           if ( !ObjectUtils.equals(this.attachment_mime_type, v) )
           {
              this.attachment_mime_type = v;
              setModified(true);
          }
     }
    /**
     * Get the ModifiedBy
     * @return int
     */
     public int getModifiedBy()
     {
          return modified_by;
     }

        
    /**
     * Set the value of ModifiedBy
     */
     public void setModifiedBy(int v ) 
     {
  
  
           if (this.modified_by != v)
           {
              this.modified_by = v;
              setModified(true);
          }
     }
    /**
     * Get the CreatedBy
     * @return int
     */
     public int getCreatedBy()
     {
          return created_by;
     }

        
    /**
     * Set the value of CreatedBy
     */
     public void setCreatedBy(int v ) 
     {
  
  
           if (this.created_by != v)
           {
              this.created_by = v;
              setModified(true);
          }
     }
    /**
     * Get the ModifiedDate
     * @return Date
     */
     public Date getModifiedDate()
     {
          return modified_date;
     }

        
    /**
     * Set the value of ModifiedDate
     */
     public void setModifiedDate(Date v ) 
     {
  
  
           if ( !ObjectUtils.equals(this.modified_date, v) )
           {
              this.modified_date = v;
              setModified(true);
          }
     }
    /**
     * Get the CreatedDate
     * @return Date
     */
     public Date getCreatedDate()
     {
          return created_date;
     }

        
    /**
     * Set the value of CreatedDate
     */
     public void setCreatedDate(Date v ) 
     {
  
  
           if ( !ObjectUtils.equals(this.created_date, v) )
           {
              this.created_date = v;
              setModified(true);
          }
     }
    /**
     * Get the Deleted
     * @return String
     */
     public String getDeleted()
     {
          return deleted;
     }

        
    /**
     * Set the value of Deleted
     */
     public void setDeleted(String v ) 
     {
  
  
           if ( !ObjectUtils.equals(this.deleted, v) )
           {
              this.deleted = v;
              setModified(true);
          }
     }

 
 
   
             
   
   
    /**
     * Declares an association between this object and a ScarabIssue object
     *
     * @param ScarabIssue v
     */
    private ScarabIssue aScarabIssue;
    void setScarabIssue(ScarabIssue v) throws Exception
    {
        aScarabIssue = null;
           setIssueId(v.getIssueId());
           aScarabIssue = v;
    }

                     
    public ScarabIssue getScarabIssue() throws Exception
    {
        if (aScarabIssue != null)
        {
            return aScarabIssue;            
        }
        else if (this.issue_id>0)
        {
            ScarabIssue obj = ScarabIssuePeer.retrieveByPK(this.issue_id);
            // The following line can be added to guarantee the related
            // object contains a reference to this object, but this
            // level of coupling may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // obj.addScarabAttachments(this);
            return obj;
        }
        return null;
    }

 
   
             
   
   
    /**
     * Declares an association between this object and a ScarabAttachmentType object
     *
     * @param ScarabAttachmentType v
     */
    private ScarabAttachmentType aScarabAttachmentType;
    void setScarabAttachmentType(ScarabAttachmentType v) throws Exception
    {
        aScarabAttachmentType = null;
           setTypeId(v.getAttachmentTypeId());
           aScarabAttachmentType = v;
    }

                     
    public ScarabAttachmentType getScarabAttachmentType() throws Exception
    {
        if (aScarabAttachmentType != null)
        {
            return aScarabAttachmentType;            
        }
        else if (this.attachment_type_id>0)
        {
            ScarabAttachmentType obj = ScarabAttachmentTypePeer.retrieveByPK(this.attachment_type_id);
            // The following line can be added to guarantee the related
            // object contains a reference to this object, but this
            // level of coupling may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // obj.addScarabAttachments(this);
            return obj;
        }
        return null;
    }

    
        
    


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                ScarabAttachmentPeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                ScarabAttachmentPeer.doInsert(this, dbCon);
            }
            else
            {
                ScarabAttachmentPeer.doUpdate(this, dbCon);
                setNew(false);
            }
        }

              alreadyInSave = false;
      }
      }

                                                            
    /** 
     * Set the Id using pk values.
     *
     * @param int attachment_id
     */
    public void setId(
                      int attachment_id
                                                                                                                                                                 ) 
    {
                     setAttachmentId(attachment_id);
                                                                                                                                                    }


    /** 
     * Set the Id using a : separated String of pk values.
     */
    public void setId(Object id) throws Exception
    {
        StringTokenizer st = new StringTokenizer(id.toString(), ":");
                           setAttachmentId( Integer.parseInt(st.nextToken()) );
                                                                                                                                                            }


    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public Object getId() 
    {
        return ""
                      + getAttachmentId()
                                                                                                                                                                 ;
    } 

    /** 
     * returns an id that can be used to specify this object in
     * a query string.
     */
    public String getQueryOID() 
    {
        return "ScarabAttachment[" + getId() + "]";
    }

    /**
     * Makes a copy of this object.  
     * It creates a new object filling in the simple attributes.
      * It then fills all the association collections and sets the
     * related objects to isNew=true.
      */
    public ScarabAttachment copy() throws Exception
    {
        ScarabAttachment copyObj = new ScarabAttachment();
         copyObj.setAttachmentId(attachment_id);
         copyObj.setIssueId(issue_id);
         copyObj.setTypeId(attachment_type_id);
         copyObj.setName(attachment_name);
         copyObj.setData(attachment_data);
         copyObj.setFilePath(attachment_file_path);
         copyObj.setMimeType(attachment_mime_type);
         copyObj.setModifiedBy(modified_by);
         copyObj.setCreatedBy(created_by);
         copyObj.setModifiedDate(modified_date);
         copyObj.setCreatedDate(created_date);
         copyObj.setDeleted(deleted);
 
  
                        
        copyObj.setAttachmentId(NEW_ID);
                                                                                        return copyObj;
    }             

}




