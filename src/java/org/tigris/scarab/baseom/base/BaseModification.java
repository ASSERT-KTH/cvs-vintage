package org.tigris.scarab.baseom.base;


// JDK classes
import java.util.*;
import java.math.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.StringUtils;
import org.apache.turbine.util.ParameterParser;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

import org.tigris.scarab.baseom.*;
import org.tigris.scarab.baseom.peer.*;

/** 
 * This class was autogenerated by Torque on:
 *
 * [Thu Feb 22 18:38:08 PST 2001]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Modification 
 */
public abstract class BaseModification extends BaseObject
{
    /** the value for the table_id field */
    private SimpleKey table_id;
    /** the value for the column_id field */
    private SimpleKey column_id;
    /** the value for the modified_by field */
    private int modified_by;
    /** the value for the created_by field */
    private int created_by;
    /** the value for the modified_date field */
    private Date modified_date;
    /** the value for the created_date field */
    private Date created_date;


    /**
     * Get the TableId
     * @return SimpleKey
     */
     public SimpleKey getTableId()
     {
          return table_id;
     }

        
    /**
     * Set the value of TableId
     */
     public void setTableId(SimpleKey v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.table_id, v) )
        {
                       if (this.table_id == null)
            {
                this.table_id = v;
            }
            else
            {
                this.table_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the ColumnId
     * @return SimpleKey
     */
     public SimpleKey getColumnId()
     {
          return column_id;
     }

        
    /**
     * Set the value of ColumnId
     */
     public void setColumnId(SimpleKey v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.column_id, v) )
        {
                       if (this.column_id == null)
            {
                this.column_id = v;
            }
            else
            {
                this.column_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the ModifiedBy
     * @return int
     */
     public int getModifiedBy()
     {
          return modified_by;
     }

        
    /**
     * Set the value of ModifiedBy
     */
     public void setModifiedBy(int v ) 
     {
  
  

         if (this.modified_by != v)
        {
                       this.modified_by = v;
                      setModified(true);
        }
     }
    /**
     * Get the CreatedBy
     * @return int
     */
     public int getCreatedBy()
     {
          return created_by;
     }

        
    /**
     * Set the value of CreatedBy
     */
     public void setCreatedBy(int v ) 
     {
  
  

         if (this.created_by != v)
        {
                       this.created_by = v;
                      setModified(true);
        }
     }
    /**
     * Get the ModifiedDate
     * @return Date
     */
     public Date getModifiedDate()
     {
          return modified_date;
     }

        
    /**
     * Set the value of ModifiedDate
     */
     public void setModifiedDate(Date v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.modified_date, v) )
        {
                       this.modified_date = v;
                      setModified(true);
        }
     }
    /**
     * Get the CreatedDate
     * @return Date
     */
     public Date getCreatedDate()
     {
          return created_date;
     }

        
    /**
     * Set the value of CreatedDate
     */
     public void setCreatedDate(Date v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.created_date, v) )
        {
                       this.created_date = v;
                      setModified(true);
        }
     }

 
    
        
    
    private static Vector fieldNames_ = null;

    /**
     * Generate a list of field names.
     */
    public static Vector getFieldNames()
    {
      if (fieldNames_ == null)
      {
        fieldNames_ = new Vector();
            fieldNames_.add("TableId");
            fieldNames_.add("ColumnId");
            fieldNames_.add("ModifiedBy");
            fieldNames_.add("CreatedBy");
            fieldNames_.add("ModifiedDate");
            fieldNames_.add("CreatedDate");
          }
      return fieldNames_;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.
     */
    public Object getByName(String name)
    {
            if (name.equals("TableId"))
	{
	  	    return getTableId();
	  	}
            if (name.equals("ColumnId"))
	{
	  	    return getColumnId();
	  	}
            if (name.equals("ModifiedBy"))
	{
	  	    return new Integer(getModifiedBy());
	  	}
            if (name.equals("CreatedBy"))
	{
	  	    return new Integer(getCreatedBy());
	  	}
            if (name.equals("ModifiedDate"))
	{
	  	    return getModifiedDate();
	  	}
            if (name.equals("CreatedDate"))
	{
	  	    return getCreatedDate();
	  	}
            return null; 
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     */
    public Object getByPeerName(String name)
    {
            if (name == ModificationPeer.TABLE_ID )
	    {
	  	    return getTableId();
	  	}
            if (name == ModificationPeer.COLUMN_ID )
	    {
	  	    return getColumnId();
	  	}
            if (name == ModificationPeer.MODIFIED_BY )
	    {
	  	    return new Integer(getModifiedBy());
	  	}
            if (name == ModificationPeer.CREATED_BY )
	    {
	  	    return new Integer(getCreatedBy());
	  	}
            if (name == ModificationPeer.MODIFIED_DATE )
	    {
	  	    return getModifiedDate();
	  	}
            if (name == ModificationPeer.CREATED_DATE )
	    {
	  	    return getCreatedDate();
	  	}
            return null; 
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     */
    public Object getByPosition(int pos)
    {
            if ( pos == 0 )
	{
	  	    return getTableId();
	  	}
            if ( pos == 1 )
	{
	  	    return getColumnId();
	  	}
            if ( pos == 2 )
	{
	  	    return new Integer(getModifiedBy());
	  	}
            if ( pos == 3 )
	{
	  	    return new Integer(getCreatedBy());
	  	}
            if ( pos == 4 )
	{
	  	    return getModifiedDate();
	  	}
            if ( pos == 5 )
	{
	  	    return getCreatedDate();
	  	}
                return null; 
    }

     	

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                ModificationPeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                ModificationPeer.doInsert((Modification)this, dbCon);
            }
            else
            {
                ModificationPeer.doUpdate((Modification)this, dbCon);
                setNew(false);
            }
        }

              alreadyInSave = false;
      }
      }

                                                
    /** 
     * Set the Id using pk values.
     *
     * @param SimpleKey table_id
     * @param SimpleKey column_id
     */
    public void setPrimaryKey(
     SimpleKey table_id
            , SimpleKey column_id
                ) 
    {
         setTableId(table_id);
         setColumnId(column_id);
    }
    


    private final SimpleKey[] pks = new SimpleKey[2];
    private final ComboKey comboPK = new ComboKey(pks);
    /** 
     * Set the PrimaryKey with an ObjectKey
     */
    public void setPrimaryKey(ComboKey key) throws Exception
    {
        //if (key.getInternalObject() instanceof SimpleKey[])
        //{
            SimpleKey[] keys = (SimpleKey[])key.getInternalObject();
                    setTableId(keys[0]);
                        setColumnId(keys[1]);
                
    }

    /** 
     * Set the PrimaryKey using a String.
     */
    public void setPrimaryKey(String key) throws Exception
    {
        int prevPos = 0;

                  int colonPos = key.indexOf(':', prevPos);
        setTableId( new SimpleKey(key.substring(prevPos, colonPos)) );
        prevPos = colonPos + 1;
                     colonPos = key.indexOf(':', prevPos);
        setColumnId( new SimpleKey(key.substring(prevPos, colonPos)) );
        prevPos = colonPos + 1;
                 }



    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey() 
    {
            pks[0] = getTableId();
                    pks[1] = getColumnId();
                    return comboPK;
    }

    /**
     * Makes a copy of this object.  
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Modification copy() throws Exception
    {
        Modification copyObj = new Modification();
        copyObj.setTableId(table_id);
        copyObj.setColumnId(column_id);
        copyObj.setModifiedBy(modified_by);
        copyObj.setCreatedBy(created_by);
        copyObj.setModifiedDate(modified_date);
        copyObj.setCreatedDate(created_date);


            
        copyObj.setTableId(null);
                
        copyObj.setColumnId(null);
                        return copyObj;
    }             
}

