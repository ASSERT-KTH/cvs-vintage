package org.tigris.scarab.baseom.base;


// JDK classes
import java.util.*;
import java.math.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.StringUtils;
import org.apache.turbine.util.ParameterParser;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

import org.tigris.scarab.baseom.*;
import org.tigris.scarab.baseom.peer.*;

/** 
 * This class was autogenerated by Torque on:
 *
 * [Thu Feb 22 18:38:08 PST 2001]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Module 
 */
public abstract class BaseModule extends BaseObject
{
    /** the value for the module_id field */
    private SimpleKey module_id;
    /** the value for the module_name field */
    private String module_name;
    /** the value for the module_description field */
    private String module_description;
    /** the value for the module_url field */
    private String module_url;
    /** the value for the parent_id field */
    private SimpleKey parent_id;
    /** the value for the owner_id field */
    private SimpleKey owner_id;
    /** the value for the qa_contact_id field */
    private SimpleKey qa_contact_id;
    /** the value for the deleted field */
    private boolean deleted;


    /**
     * Get the ModuleId
     * @return SimpleKey
     */
     public SimpleKey getModuleId()
     {
          return module_id;
     }

                            
    /**
     * Set the value of ModuleId
     */
     public void setModuleId(SimpleKey v ) throws Exception
     {
  
       
        
                
          // update associated Issue
          if (collIssues != null )
          {
              for (int i=0; i<collIssues.size(); i++)
              {
                  ((Issue)collIssues.get(i))
                      .setModuleId(v);
              }
          }
                   
        
                
          // update associated RModuleAttribute
          if (collRModuleAttributes != null )
          {
              for (int i=0; i<collRModuleAttributes.size(); i++)
              {
                  ((RModuleAttribute)collRModuleAttributes.get(i))
                      .setModuleId(v);
              }
          }
            
        
                
          // update associated RModuleUser
          if (collRModuleUsers != null )
          {
              for (int i=0; i<collRModuleUsers.size(); i++)
              {
                  ((RModuleUser)collRModuleUsers.get(i))
                      .setModuleId(v);
              }
          }
       

         if ( !ObjectUtils.equals(this.module_id, v) )
        {
                       if (this.module_id == null)
            {
                this.module_id = v;
            }
            else
            {
                this.module_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the Name
     * @return String
     */
     public String getName()
     {
          return module_name;
     }

        
    /**
     * Set the value of Name
     */
     public void setName(String v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.module_name, v) )
        {
                       this.module_name = v;
                      setModified(true);
        }
     }
    /**
     * Get the Description
     * @return String
     */
     public String getDescription()
     {
          return module_description;
     }

        
    /**
     * Set the value of Description
     */
     public void setDescription(String v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.module_description, v) )
        {
                       this.module_description = v;
                      setModified(true);
        }
     }
    /**
     * Get the Url
     * @return String
     */
     public String getUrl()
     {
          return module_url;
     }

        
    /**
     * Set the value of Url
     */
     public void setUrl(String v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.module_url, v) )
        {
                       this.module_url = v;
                      setModified(true);
        }
     }
    /**
     * Get the ParentId
     * @return SimpleKey
     */
     public SimpleKey getParentId()
     {
          return parent_id;
     }

            
    /**
     * Set the value of ParentId
     */
     public void setParentId(SimpleKey v ) throws Exception
     {
                  if ( aModuleRelatedByParentId != null && !aModuleRelatedByParentId.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

         if ( !ObjectUtils.equals(this.parent_id, v) )
        {
                       if (this.parent_id == null)
            {
                this.parent_id = v;
            }
            else
            {
                this.parent_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the OwnerId
     * @return SimpleKey
     */
     public SimpleKey getOwnerId()
     {
          return owner_id;
     }

            
    /**
     * Set the value of OwnerId
     */
     public void setOwnerId(SimpleKey v ) throws Exception
     {
                  if ( aTurbineUserRelatedByOwnerId != null && !aTurbineUserRelatedByOwnerId.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

         if ( !ObjectUtils.equals(this.owner_id, v) )
        {
                       if (this.owner_id == null)
            {
                this.owner_id = v;
            }
            else
            {
                this.owner_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the QaContactId
     * @return SimpleKey
     */
     public SimpleKey getQaContactId()
     {
          return qa_contact_id;
     }

            
    /**
     * Set the value of QaContactId
     */
     public void setQaContactId(SimpleKey v ) throws Exception
     {
                  if ( aTurbineUserRelatedByQaContactId != null && !aTurbineUserRelatedByQaContactId.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

         if ( !ObjectUtils.equals(this.qa_contact_id, v) )
        {
                       if (this.qa_contact_id == null)
            {
                this.qa_contact_id = v;
            }
            else
            {
                this.qa_contact_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the Deleted
     * @return boolean
     */
     public boolean getDeleted()
     {
          return deleted;
     }

        
    /**
     * Set the value of Deleted
     */
     public void setDeleted(boolean v ) 
     {
  
  

         if (this.deleted != v)
        {
                       this.deleted = v;
                      setModified(true);
        }
     }

 
 
   
                 
      
   
    /**
     * Declares an association between this object and a Module object
     *
     * @param Module v
     */
    private Module aModuleRelatedByParentId;
    public void setModuleRelatedByParentId(Module v) throws Exception
    {
        aModuleRelatedByParentId = null;
           setParentId(v.getModuleId());
           aModuleRelatedByParentId = v;
    }

                     
    public Module getModuleRelatedByParentId() throws Exception
    {
        if ( aModuleRelatedByParentId==null && (!ObjectUtils.equals(this.parent_id, null)) )
        {
            aModuleRelatedByParentId = ModulePeer.retrieveByPK(this.parent_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // Module obj = ModulePeer.retrieveByPK(this.parent_id);
            // obj.addModulesRelatedByParentId(this);
        }
        return aModuleRelatedByParentId;
    }

 
   
                 
      
   
    /**
     * Declares an association between this object and a TurbineUser object
     *
     * @param TurbineUser v
     */
    private TurbineUser aTurbineUserRelatedByOwnerId;
    public void setTurbineUserRelatedByOwnerId(TurbineUser v) throws Exception
    {
        aTurbineUserRelatedByOwnerId = null;
           setOwnerId(v.getUserId());
           aTurbineUserRelatedByOwnerId = v;
    }

                     
    public TurbineUser getTurbineUserRelatedByOwnerId() throws Exception
    {
        if ( aTurbineUserRelatedByOwnerId==null && (!ObjectUtils.equals(this.owner_id, null)) )
        {
            aTurbineUserRelatedByOwnerId = TurbineUserPeer.retrieveByPK(this.owner_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // TurbineUser obj = TurbineUserPeer.retrieveByPK(this.owner_id);
            // obj.addModulesRelatedByOwnerId(this);
        }
        return aTurbineUserRelatedByOwnerId;
    }

 
   
                 
      
   
    /**
     * Declares an association between this object and a TurbineUser object
     *
     * @param TurbineUser v
     */
    private TurbineUser aTurbineUserRelatedByQaContactId;
    public void setTurbineUserRelatedByQaContactId(TurbineUser v) throws Exception
    {
        aTurbineUserRelatedByQaContactId = null;
           setQaContactId(v.getUserId());
           aTurbineUserRelatedByQaContactId = v;
    }

                     
    public TurbineUser getTurbineUserRelatedByQaContactId() throws Exception
    {
        if ( aTurbineUserRelatedByQaContactId==null && (!ObjectUtils.equals(this.qa_contact_id, null)) )
        {
            aTurbineUserRelatedByQaContactId = TurbineUserPeer.retrieveByPK(this.qa_contact_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // TurbineUser obj = TurbineUserPeer.retrieveByPK(this.qa_contact_id);
            // obj.addModulesRelatedByQaContactId(this);
        }
        return aTurbineUserRelatedByQaContactId;
    }

    
                
      
    /**
     * Collection to store aggregation of collIssues
     */
    private Vector collIssues;
    /**
     * Temporary storage of collIssues to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollIssues;

    public void initIssues()
    {
        if (collIssues == null)
            collIssues = new Vector();
    }

    /**
     * Method called to associate a Issue object to this object
     * through the Issue foreign key attribute
     *
     * @param Issue l
     */
    public void addIssues(Issue l) throws Exception
    {
        /*
        if (collIssues == null)
        {
            if (tempcollIssues == null)
            {
                tempcollIssues = new Vector();
            }
            tempcollIssues.add(l);
        }
        else
        {
            collIssues.add(l);
        }
        */
        getIssues().add(l);
        l.setModule((Module)this);
    }

    /**
     * The criteria used to select the current contents of collIssues
     */
    private Criteria lastIssuesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getIssues(new Criteria())
     */
    public Vector getIssues() throws Exception
    {
        if (collIssues == null)
        {
            collIssues = getIssues(new Criteria(10));
        }
        return collIssues;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Module is new, it will return
     * an empty collection; or if this Module has previously
     * been saved, it will retrieve related Issues from storage.
     */
    public Vector getIssues(Criteria criteria) throws Exception
    {
        if (collIssues == null)
        {
            if ( isNew() ) 
            {
               collIssues = new Vector();       
            } 
            else
            {
                   criteria.add(IssuePeer.MODULE_ID, getModuleId() );               
                   collIssues = IssuePeer.doSelect(criteria);
            }
/*
            if (tempcollIssues != null)
            {
                for (int i=0; i<tempcollIssues.size(); i++)
                {
                    collIssues.add(tempcollIssues.get(i));
                }
                tempcollIssues = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(IssuePeer.MODULE_ID, getModuleId() );               
               if ( !lastIssuesCriteria.equals(criteria)  )
            {
                collIssues = IssuePeer.doSelect(criteria);  
            }
        }
        lastIssuesCriteria = criteria; 

        return collIssues;
    }
     

        
      
         
          
                    
                
        
        
       
      
      
              
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Module is new, it will return
     * an empty collection; or if this Module has previously
     * been saved, it will retrieve related Issues from storage.
     */
    public Vector getIssuesJoinTurbineUserRelatedByCreatedBy(Criteria criteria) 
        throws Exception
    {
        if (collIssues == null)
        {
            if ( isNew() ) 
            {
               collIssues = new Vector();       
            } 
            else
            {
                   criteria.add(IssuePeer.MODULE_ID, getModuleId() );               
                   collIssues = IssuePeer.doSelectJoinTurbineUserRelatedByCreatedBy(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(IssuePeer.MODULE_ID, getModuleId() );               
               if ( !lastIssuesCriteria.equals(criteria)  )
            {
                collIssues = IssuePeer.doSelectJoinTurbineUserRelatedByCreatedBy(criteria);
            }
        }
        lastIssuesCriteria = criteria; 

        return collIssues;
    }
      
      
      
              
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Module is new, it will return
     * an empty collection; or if this Module has previously
     * been saved, it will retrieve related Issues from storage.
     */
    public Vector getIssuesJoinTurbineUserRelatedByModifiedBy(Criteria criteria) 
        throws Exception
    {
        if (collIssues == null)
        {
            if ( isNew() ) 
            {
               collIssues = new Vector();       
            } 
            else
            {
                   criteria.add(IssuePeer.MODULE_ID, getModuleId() );               
                   collIssues = IssuePeer.doSelectJoinTurbineUserRelatedByModifiedBy(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(IssuePeer.MODULE_ID, getModuleId() );               
               if ( !lastIssuesCriteria.equals(criteria)  )
            {
                collIssues = IssuePeer.doSelectJoinTurbineUserRelatedByModifiedBy(criteria);
            }
        }
        lastIssuesCriteria = criteria; 

        return collIssues;
    }
     



   



             
      
    /**
     * Collection to store aggregation of collRModuleAttributes
     */
    private Vector collRModuleAttributes;
    /**
     * Temporary storage of collRModuleAttributes to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollRModuleAttributes;

    public void initRModuleAttributes()
    {
        if (collRModuleAttributes == null)
            collRModuleAttributes = new Vector();
    }

    /**
     * Method called to associate a RModuleAttribute object to this object
     * through the RModuleAttribute foreign key attribute
     *
     * @param RModuleAttribute l
     */
    public void addRModuleAttributes(RModuleAttribute l) throws Exception
    {
        /*
        if (collRModuleAttributes == null)
        {
            if (tempcollRModuleAttributes == null)
            {
                tempcollRModuleAttributes = new Vector();
            }
            tempcollRModuleAttributes.add(l);
        }
        else
        {
            collRModuleAttributes.add(l);
        }
        */
        getRModuleAttributes().add(l);
        l.setModule((Module)this);
    }

    /**
     * The criteria used to select the current contents of collRModuleAttributes
     */
    private Criteria lastRModuleAttributesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getRModuleAttributes(new Criteria())
     */
    public Vector getRModuleAttributes() throws Exception
    {
        if (collRModuleAttributes == null)
        {
            collRModuleAttributes = getRModuleAttributes(new Criteria(10));
        }
        return collRModuleAttributes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Module is new, it will return
     * an empty collection; or if this Module has previously
     * been saved, it will retrieve related RModuleAttributes from storage.
     */
    public Vector getRModuleAttributes(Criteria criteria) throws Exception
    {
        if (collRModuleAttributes == null)
        {
            if ( isNew() ) 
            {
               collRModuleAttributes = new Vector();       
            } 
            else
            {
                   criteria.add(RModuleAttributePeer.MODULE_ID, getModuleId() );               
                   collRModuleAttributes = RModuleAttributePeer.doSelect(criteria);
            }
/*
            if (tempcollRModuleAttributes != null)
            {
                for (int i=0; i<tempcollRModuleAttributes.size(); i++)
                {
                    collRModuleAttributes.add(tempcollRModuleAttributes.get(i));
                }
                tempcollRModuleAttributes = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(RModuleAttributePeer.MODULE_ID, getModuleId() );               
               if ( !lastRModuleAttributesCriteria.equals(criteria)  )
            {
                collRModuleAttributes = RModuleAttributePeer.doSelect(criteria);  
            }
        }
        lastRModuleAttributesCriteria = criteria; 

        return collRModuleAttributes;
    }
    

        
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Module is new, it will return
     * an empty collection; or if this Module has previously
     * been saved, it will retrieve related RModuleAttributes from storage.
     */
    public Vector getRModuleAttributesJoinAttribute(Criteria criteria) 
        throws Exception
    {
        if (collRModuleAttributes == null)
        {
            if ( isNew() ) 
            {
               collRModuleAttributes = new Vector();       
            } 
            else
            {
                   criteria.add(RModuleAttributePeer.MODULE_ID, getModuleId() );               
                   collRModuleAttributes = RModuleAttributePeer.doSelectJoinAttribute(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(RModuleAttributePeer.MODULE_ID, getModuleId() );               
               if ( !lastRModuleAttributesCriteria.equals(criteria)  )
            {
                collRModuleAttributes = RModuleAttributePeer.doSelectJoinAttribute(criteria);
            }
        }
        lastRModuleAttributesCriteria = criteria; 

        return collRModuleAttributes;
    }
      
      
         
          
                    
                
        
        
      



             
      
    /**
     * Collection to store aggregation of collRModuleUsers
     */
    private Vector collRModuleUsers;
    /**
     * Temporary storage of collRModuleUsers to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollRModuleUsers;

    public void initRModuleUsers()
    {
        if (collRModuleUsers == null)
            collRModuleUsers = new Vector();
    }

    /**
     * Method called to associate a RModuleUser object to this object
     * through the RModuleUser foreign key attribute
     *
     * @param RModuleUser l
     */
    public void addRModuleUsers(RModuleUser l) throws Exception
    {
        /*
        if (collRModuleUsers == null)
        {
            if (tempcollRModuleUsers == null)
            {
                tempcollRModuleUsers = new Vector();
            }
            tempcollRModuleUsers.add(l);
        }
        else
        {
            collRModuleUsers.add(l);
        }
        */
        getRModuleUsers().add(l);
        l.setModule((Module)this);
    }

    /**
     * The criteria used to select the current contents of collRModuleUsers
     */
    private Criteria lastRModuleUsersCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getRModuleUsers(new Criteria())
     */
    public Vector getRModuleUsers() throws Exception
    {
        if (collRModuleUsers == null)
        {
            collRModuleUsers = getRModuleUsers(new Criteria(10));
        }
        return collRModuleUsers;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Module is new, it will return
     * an empty collection; or if this Module has previously
     * been saved, it will retrieve related RModuleUsers from storage.
     */
    public Vector getRModuleUsers(Criteria criteria) throws Exception
    {
        if (collRModuleUsers == null)
        {
            if ( isNew() ) 
            {
               collRModuleUsers = new Vector();       
            } 
            else
            {
                   criteria.add(RModuleUserPeer.MODULE_ID, getModuleId() );               
                   collRModuleUsers = RModuleUserPeer.doSelect(criteria);
            }
/*
            if (tempcollRModuleUsers != null)
            {
                for (int i=0; i<tempcollRModuleUsers.size(); i++)
                {
                    collRModuleUsers.add(tempcollRModuleUsers.get(i));
                }
                tempcollRModuleUsers = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(RModuleUserPeer.MODULE_ID, getModuleId() );               
               if ( !lastRModuleUsersCriteria.equals(criteria)  )
            {
                collRModuleUsers = RModuleUserPeer.doSelect(criteria);  
            }
        }
        lastRModuleUsersCriteria = criteria; 

        return collRModuleUsers;
    }
    

        
      
         
          
                    
                
        
        
       
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Module is new, it will return
     * an empty collection; or if this Module has previously
     * been saved, it will retrieve related RModuleUsers from storage.
     */
    public Vector getRModuleUsersJoinTurbineUser(Criteria criteria) 
        throws Exception
    {
        if (collRModuleUsers == null)
        {
            if ( isNew() ) 
            {
               collRModuleUsers = new Vector();       
            } 
            else
            {
                   criteria.add(RModuleUserPeer.MODULE_ID, getModuleId() );               
                   collRModuleUsers = RModuleUserPeer.doSelectJoinTurbineUser(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(RModuleUserPeer.MODULE_ID, getModuleId() );               
               if ( !lastRModuleUsersCriteria.equals(criteria)  )
            {
                collRModuleUsers = RModuleUserPeer.doSelectJoinTurbineUser(criteria);
            }
        }
        lastRModuleUsersCriteria = criteria; 

        return collRModuleUsers;
    }
     



     
    
    private static Vector fieldNames_ = null;

    /**
     * Generate a list of field names.
     */
    public static Vector getFieldNames()
    {
      if (fieldNames_ == null)
      {
        fieldNames_ = new Vector();
            fieldNames_.add("ModuleId");
            fieldNames_.add("Name");
            fieldNames_.add("Description");
            fieldNames_.add("Url");
            fieldNames_.add("ParentId");
            fieldNames_.add("OwnerId");
            fieldNames_.add("QaContactId");
            fieldNames_.add("Deleted");
          }
      return fieldNames_;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.
     */
    public Object getByName(String name)
    {
            if (name.equals("ModuleId"))
	{
	  	    return getModuleId();
	  	}
            if (name.equals("Name"))
	{
	  	    return getName();
	  	}
            if (name.equals("Description"))
	{
	  	    return getDescription();
	  	}
            if (name.equals("Url"))
	{
	  	    return getUrl();
	  	}
            if (name.equals("ParentId"))
	{
	  	    return getParentId();
	  	}
            if (name.equals("OwnerId"))
	{
	  	    return getOwnerId();
	  	}
            if (name.equals("QaContactId"))
	{
	  	    return getQaContactId();
	  	}
            if (name.equals("Deleted"))
	{
	  	    return new Boolean(getDeleted());
	  	}
            return null; 
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     */
    public Object getByPeerName(String name)
    {
            if (name == ModulePeer.MODULE_ID )
	    {
	  	    return getModuleId();
	  	}
            if (name == ModulePeer.MODULE_NAME )
	    {
	  	    return getName();
	  	}
            if (name == ModulePeer.MODULE_DESCRIPTION )
	    {
	  	    return getDescription();
	  	}
            if (name == ModulePeer.MODULE_URL )
	    {
	  	    return getUrl();
	  	}
            if (name == ModulePeer.PARENT_ID )
	    {
	  	    return getParentId();
	  	}
            if (name == ModulePeer.OWNER_ID )
	    {
	  	    return getOwnerId();
	  	}
            if (name == ModulePeer.QA_CONTACT_ID )
	    {
	  	    return getQaContactId();
	  	}
            if (name == ModulePeer.DELETED )
	    {
	  	    return new Boolean(getDeleted());
	  	}
            return null; 
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     */
    public Object getByPosition(int pos)
    {
            if ( pos == 0 )
	{
	  	    return getModuleId();
	  	}
            if ( pos == 1 )
	{
	  	    return getName();
	  	}
            if ( pos == 2 )
	{
	  	    return getDescription();
	  	}
            if ( pos == 3 )
	{
	  	    return getUrl();
	  	}
            if ( pos == 4 )
	{
	  	    return getParentId();
	  	}
            if ( pos == 5 )
	{
	  	    return getOwnerId();
	  	}
            if ( pos == 6 )
	{
	  	    return getQaContactId();
	  	}
            if ( pos == 7 )
	{
	  	    return new Boolean(getDeleted());
	  	}
                return null; 
    }

     	

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                ModulePeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                ModulePeer.doInsert((Module)this, dbCon);
            }
            else
            {
                ModulePeer.doUpdate((Module)this, dbCon);
                setNew(false);
            }
        }

                                    
                
          if (collIssues != null )
          {
              for (int i=0; i<collIssues.size(); i++)
              {
                  ((Issue)collIssues.get(i)).save(dbCon);
              }
          }
                                               
                
          if (collRModuleAttributes != null )
          {
              for (int i=0; i<collRModuleAttributes.size(); i++)
              {
                  ((RModuleAttribute)collRModuleAttributes.get(i)).save(dbCon);
              }
          }
                                        
                
          if (collRModuleUsers != null )
          {
              for (int i=0; i<collRModuleUsers.size(); i++)
              {
                  ((RModuleUser)collRModuleUsers.get(i)).save(dbCon);
              }
          }
                  alreadyInSave = false;
      }
      }

                                                                
    /** 
     * Set the Id using pk values.
     *
     * @param SimpleKey module_id
     */
    public void setPrimaryKey(
     SimpleKey module_id
                ) throws Exception
    {
         setModuleId(module_id);
    }
    



    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey() 
    {
        return getModuleId();
    }

    /**
     * Makes a copy of this object.  
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Module copy() throws Exception
    {
        Module copyObj = new Module();
        copyObj.setModuleId(module_id);
        copyObj.setName(module_name);
        copyObj.setDescription(module_description);
        copyObj.setUrl(module_url);
        copyObj.setParentId(parent_id);
        copyObj.setOwnerId(owner_id);
        copyObj.setQaContactId(qa_contact_id);
        copyObj.setDeleted(deleted);

                                
                
         List v = copyObj.getIssues();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
                                                
                
         v = copyObj.getRModuleAttributes();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
                                            
                
         v = copyObj.getRModuleUsers();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
            
            
        copyObj.setModuleId(null);
                                    return copyObj;
    }             
}

