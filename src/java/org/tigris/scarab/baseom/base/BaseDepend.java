package org.tigris.scarab.baseom.base;


// JDK classes
import java.util.*;
import java.math.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.StringUtils;
import org.apache.turbine.util.ParameterParser;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

import org.tigris.scarab.baseom.*;
import org.tigris.scarab.baseom.peer.*;

/** 
 * This class was autogenerated by Torque on:
 *
 * [Thu Feb 22 18:38:08 PST 2001]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Depend 
 */
public abstract class BaseDepend extends BaseObject
{
    /** the value for the observed_id field */
    private SimpleKey observed_id;
    /** the value for the observer_id field */
    private SimpleKey observer_id;
    /** the value for the depend_type_id field */
    private SimpleKey depend_type_id;
    /** the value for the deleted field */
    private boolean deleted;


    /**
     * Get the ObservedId
     * @return SimpleKey
     */
     public SimpleKey getObservedId()
     {
          return observed_id;
     }

            
    /**
     * Set the value of ObservedId
     */
     public void setObservedId(SimpleKey v ) throws Exception
     {
                  if ( aIssueRelatedByObservedId != null && !aIssueRelatedByObservedId.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

         if ( !ObjectUtils.equals(this.observed_id, v) )
        {
                       if (this.observed_id == null)
            {
                this.observed_id = v;
            }
            else
            {
                this.observed_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the ObserverId
     * @return SimpleKey
     */
     public SimpleKey getObserverId()
     {
          return observer_id;
     }

            
    /**
     * Set the value of ObserverId
     */
     public void setObserverId(SimpleKey v ) throws Exception
     {
                  if ( aIssueRelatedByObserverId != null && !aIssueRelatedByObserverId.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

         if ( !ObjectUtils.equals(this.observer_id, v) )
        {
                       if (this.observer_id == null)
            {
                this.observer_id = v;
            }
            else
            {
                this.observer_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the TypeId
     * @return SimpleKey
     */
     public SimpleKey getTypeId()
     {
          return depend_type_id;
     }

            
    /**
     * Set the value of TypeId
     */
     public void setTypeId(SimpleKey v ) throws Exception
     {
                  if ( aDependType != null && !aDependType.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

         if ( !ObjectUtils.equals(this.depend_type_id, v) )
        {
                       if (this.depend_type_id == null)
            {
                this.depend_type_id = v;
            }
            else
            {
                this.depend_type_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the Deleted
     * @return boolean
     */
     public boolean getDeleted()
     {
          return deleted;
     }

        
    /**
     * Set the value of Deleted
     */
     public void setDeleted(boolean v ) 
     {
  
  

         if (this.deleted != v)
        {
                       this.deleted = v;
                      setModified(true);
        }
     }

 
 
   
                 
      
   
    /**
     * Declares an association between this object and a Issue object
     *
     * @param Issue v
     */
    private Issue aIssueRelatedByObservedId;
    public void setIssueRelatedByObservedId(Issue v) throws Exception
    {
        aIssueRelatedByObservedId = null;
           setObservedId(v.getIssueId());
           aIssueRelatedByObservedId = v;
    }

                     
    public Issue getIssueRelatedByObservedId() throws Exception
    {
        if ( aIssueRelatedByObservedId==null && (!ObjectUtils.equals(this.observed_id, null)) )
        {
            aIssueRelatedByObservedId = IssuePeer.retrieveByPK(this.observed_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // Issue obj = IssuePeer.retrieveByPK(this.observed_id);
            // obj.addDependsRelatedByObservedId(this);
        }
        return aIssueRelatedByObservedId;
    }

 
   
                 
      
   
    /**
     * Declares an association between this object and a Issue object
     *
     * @param Issue v
     */
    private Issue aIssueRelatedByObserverId;
    public void setIssueRelatedByObserverId(Issue v) throws Exception
    {
        aIssueRelatedByObserverId = null;
           setObserverId(v.getIssueId());
           aIssueRelatedByObserverId = v;
    }

                     
    public Issue getIssueRelatedByObserverId() throws Exception
    {
        if ( aIssueRelatedByObserverId==null && (!ObjectUtils.equals(this.observer_id, null)) )
        {
            aIssueRelatedByObserverId = IssuePeer.retrieveByPK(this.observer_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // Issue obj = IssuePeer.retrieveByPK(this.observer_id);
            // obj.addDependsRelatedByObserverId(this);
        }
        return aIssueRelatedByObserverId;
    }

 
   
             
   
   
    /**
     * Declares an association between this object and a DependType object
     *
     * @param DependType v
     */
    private DependType aDependType;
    public void setDependType(DependType v) throws Exception
    {
        aDependType = null;
           setTypeId(v.getDependTypeId());
           aDependType = v;
    }

                     
    public DependType getDependType() throws Exception
    {
        if ( aDependType==null && (!ObjectUtils.equals(this.depend_type_id, null)) )
        {
            aDependType = DependTypePeer.retrieveByPK(this.depend_type_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // DependType obj = DependTypePeer.retrieveByPK(this.depend_type_id);
            // obj.addDepends(this);
        }
        return aDependType;
    }

    
        
    
    private static Vector fieldNames_ = null;

    /**
     * Generate a list of field names.
     */
    public static Vector getFieldNames()
    {
      if (fieldNames_ == null)
      {
        fieldNames_ = new Vector();
            fieldNames_.add("ObservedId");
            fieldNames_.add("ObserverId");
            fieldNames_.add("TypeId");
            fieldNames_.add("Deleted");
          }
      return fieldNames_;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.
     */
    public Object getByName(String name)
    {
            if (name.equals("ObservedId"))
	{
	  	    return getObservedId();
	  	}
            if (name.equals("ObserverId"))
	{
	  	    return getObserverId();
	  	}
            if (name.equals("TypeId"))
	{
	  	    return getTypeId();
	  	}
            if (name.equals("Deleted"))
	{
	  	    return new Boolean(getDeleted());
	  	}
            return null; 
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     */
    public Object getByPeerName(String name)
    {
            if (name == DependPeer.OBSERVED_ID )
	    {
	  	    return getObservedId();
	  	}
            if (name == DependPeer.OBSERVER_ID )
	    {
	  	    return getObserverId();
	  	}
            if (name == DependPeer.DEPEND_TYPE_ID )
	    {
	  	    return getTypeId();
	  	}
            if (name == DependPeer.DELETED )
	    {
	  	    return new Boolean(getDeleted());
	  	}
            return null; 
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     */
    public Object getByPosition(int pos)
    {
            if ( pos == 0 )
	{
	  	    return getObservedId();
	  	}
            if ( pos == 1 )
	{
	  	    return getObserverId();
	  	}
            if ( pos == 2 )
	{
	  	    return getTypeId();
	  	}
            if ( pos == 3 )
	{
	  	    return new Boolean(getDeleted());
	  	}
                return null; 
    }

     	

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                DependPeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                DependPeer.doInsert((Depend)this, dbCon);
            }
            else
            {
                DependPeer.doUpdate((Depend)this, dbCon);
                setNew(false);
            }
        }

              alreadyInSave = false;
      }
      }

                                                
    /** 
     * Set the Id using pk values.
     *
     * @param SimpleKey observed_id
     * @param SimpleKey observer_id
     */
    public void setPrimaryKey(
     SimpleKey observed_id
            , SimpleKey observer_id
                ) throws Exception
    {
         setObservedId(observed_id);
         setObserverId(observer_id);
    }
    


    private final SimpleKey[] pks = new SimpleKey[2];
    private final ComboKey comboPK = new ComboKey(pks);
    /** 
     * Set the PrimaryKey with an ObjectKey
     */
    public void setPrimaryKey(ComboKey key) throws Exception
    {
        //if (key.getInternalObject() instanceof SimpleKey[])
        //{
            SimpleKey[] keys = (SimpleKey[])key.getInternalObject();
                    setObservedId(keys[0]);
                        setObserverId(keys[1]);
                
    }

    /** 
     * Set the PrimaryKey using a String.
     */
    public void setPrimaryKey(String key) throws Exception
    {
        int prevPos = 0;

                  int colonPos = key.indexOf(':', prevPos);
        setObservedId( new SimpleKey(key.substring(prevPos, colonPos)) );
        prevPos = colonPos + 1;
                     colonPos = key.indexOf(':', prevPos);
        setObserverId( new SimpleKey(key.substring(prevPos, colonPos)) );
        prevPos = colonPos + 1;
                 }



    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey() 
    {
            pks[0] = getObservedId();
                    pks[1] = getObserverId();
                    return comboPK;
    }

    /**
     * Makes a copy of this object.  
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Depend copy() throws Exception
    {
        Depend copyObj = new Depend();
        copyObj.setObservedId(observed_id);
        copyObj.setObserverId(observer_id);
        copyObj.setTypeId(depend_type_id);
        copyObj.setDeleted(deleted);


            
        copyObj.setObservedId(null);
                
        copyObj.setObserverId(null);
                return copyObj;
    }             
}

