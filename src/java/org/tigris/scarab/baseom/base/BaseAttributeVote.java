package org.tigris.scarab.baseom.base;


// JDK classes
import java.util.*;
import java.math.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.StringUtils;
import org.apache.turbine.util.ParameterParser;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

import org.tigris.scarab.baseom.*;
import org.tigris.scarab.baseom.peer.*;

/** 
 * This class was autogenerated by Torque on:
 *
 * [Thu Feb 22 18:38:08 PST 2001]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to AttributeVote 
 */
public abstract class BaseAttributeVote extends BaseObject
{
    /** the value for the issue_id field */
    private SimpleKey issue_id;
    /** the value for the attribute_id field */
    private SimpleKey attribute_id;
    /** the value for the user_id field */
    private SimpleKey user_id;
    /** the value for the option_id field */
    private SimpleKey option_id;


    /**
     * Get the IssueId
     * @return SimpleKey
     */
     public SimpleKey getIssueId()
     {
          return issue_id;
     }

            
    /**
     * Set the value of IssueId
     */
     public void setIssueId(SimpleKey v ) throws Exception
     {
                  if ( aAttributeValue != null && !aAttributeValue.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

         if ( !ObjectUtils.equals(this.issue_id, v) )
        {
                       if (this.issue_id == null)
            {
                this.issue_id = v;
            }
            else
            {
                this.issue_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the AttributeId
     * @return SimpleKey
     */
     public SimpleKey getAttributeId()
     {
          return attribute_id;
     }

            
    /**
     * Set the value of AttributeId
     */
     public void setAttributeId(SimpleKey v ) throws Exception
     {
                  if ( aAttributeValue != null && !aAttributeValue.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

         if ( !ObjectUtils.equals(this.attribute_id, v) )
        {
                       if (this.attribute_id == null)
            {
                this.attribute_id = v;
            }
            else
            {
                this.attribute_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the UserId
     * @return SimpleKey
     */
     public SimpleKey getUserId()
     {
          return user_id;
     }

            
    /**
     * Set the value of UserId
     */
     public void setUserId(SimpleKey v ) throws Exception
     {
                  if ( aTurbineUser != null && !aTurbineUser.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

         if ( !ObjectUtils.equals(this.user_id, v) )
        {
                       if (this.user_id == null)
            {
                this.user_id = v;
            }
            else
            {
                this.user_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the OptionId
     * @return SimpleKey
     */
     public SimpleKey getOptionId()
     {
          return option_id;
     }

            
    /**
     * Set the value of OptionId
     */
     public void setOptionId(SimpleKey v ) throws Exception
     {
                  if ( aAttributeOption != null && !aAttributeOption.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

         if ( !ObjectUtils.equals(this.option_id, v) )
        {
                       if (this.option_id == null)
            {
                this.option_id = v;
            }
            else
            {
                this.option_id.set(v);
            }
                      setModified(true);
        }
     }

 
 
   
             
   
   
    /**
     * Declares an association between this object and a AttributeOption object
     *
     * @param AttributeOption v
     */
    private AttributeOption aAttributeOption;
    public void setAttributeOption(AttributeOption v) throws Exception
    {
        aAttributeOption = null;
           setOptionId(v.getOptionId());
           aAttributeOption = v;
    }

                     
    public AttributeOption getAttributeOption() throws Exception
    {
        if ( aAttributeOption==null && (!ObjectUtils.equals(this.option_id, null)) )
        {
            aAttributeOption = AttributeOptionPeer.retrieveByPK(this.option_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // AttributeOption obj = AttributeOptionPeer.retrieveByPK(this.option_id);
            // obj.addAttributeVotes(this);
        }
        return aAttributeOption;
    }

 
   
                    
   
   
    /**
     * Declares an association between this object and a AttributeValue object
     *
     * @param AttributeValue v
     */
    private AttributeValue aAttributeValue;
    public void setAttributeValue(AttributeValue v) throws Exception
    {
        aAttributeValue = null;
           setIssueId(v.getIssueId());
           setAttributeId(v.getAttributeId());
           aAttributeValue = v;
    }

                                
    public AttributeValue getAttributeValue() throws Exception
    {
        if ( aAttributeValue==null && (!ObjectUtils.equals(this.issue_id, null) && !ObjectUtils.equals(this.attribute_id, null)) )
        {
            aAttributeValue = AttributeValuePeer.retrieveByPK(this.issue_id, this.attribute_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // AttributeValue obj = AttributeValuePeer.retrieveByPK(this.issue_id, this.attribute_id);
            // obj.addAttributeVotes(this);
        }
        return aAttributeValue;
    }

 
   
             
   
   
    /**
     * Declares an association between this object and a TurbineUser object
     *
     * @param TurbineUser v
     */
    private TurbineUser aTurbineUser;
    public void setTurbineUser(TurbineUser v) throws Exception
    {
        aTurbineUser = null;
           setUserId(v.getUserId());
           aTurbineUser = v;
    }

                     
    public TurbineUser getTurbineUser() throws Exception
    {
        if ( aTurbineUser==null && (!ObjectUtils.equals(this.user_id, null)) )
        {
            aTurbineUser = TurbineUserPeer.retrieveByPK(this.user_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // TurbineUser obj = TurbineUserPeer.retrieveByPK(this.user_id);
            // obj.addAttributeVotes(this);
        }
        return aTurbineUser;
    }

    
        
    
    private static Vector fieldNames_ = null;

    /**
     * Generate a list of field names.
     */
    public static Vector getFieldNames()
    {
      if (fieldNames_ == null)
      {
        fieldNames_ = new Vector();
            fieldNames_.add("IssueId");
            fieldNames_.add("AttributeId");
            fieldNames_.add("UserId");
            fieldNames_.add("OptionId");
          }
      return fieldNames_;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.
     */
    public Object getByName(String name)
    {
            if (name.equals("IssueId"))
	{
	  	    return getIssueId();
	  	}
            if (name.equals("AttributeId"))
	{
	  	    return getAttributeId();
	  	}
            if (name.equals("UserId"))
	{
	  	    return getUserId();
	  	}
            if (name.equals("OptionId"))
	{
	  	    return getOptionId();
	  	}
            return null; 
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     */
    public Object getByPeerName(String name)
    {
            if (name == AttributeVotePeer.ISSUE_ID )
	    {
	  	    return getIssueId();
	  	}
            if (name == AttributeVotePeer.ATTRIBUTE_ID )
	    {
	  	    return getAttributeId();
	  	}
            if (name == AttributeVotePeer.USER_ID )
	    {
	  	    return getUserId();
	  	}
            if (name == AttributeVotePeer.OPTION_ID )
	    {
	  	    return getOptionId();
	  	}
            return null; 
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     */
    public Object getByPosition(int pos)
    {
            if ( pos == 0 )
	{
	  	    return getIssueId();
	  	}
            if ( pos == 1 )
	{
	  	    return getAttributeId();
	  	}
            if ( pos == 2 )
	{
	  	    return getUserId();
	  	}
            if ( pos == 3 )
	{
	  	    return getOptionId();
	  	}
                return null; 
    }

     	

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                AttributeVotePeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                AttributeVotePeer.doInsert((AttributeVote)this, dbCon);
            }
            else
            {
                AttributeVotePeer.doUpdate((AttributeVote)this, dbCon);
                setNew(false);
            }
        }

              alreadyInSave = false;
      }
      }

                                                                
    /** 
     * Set the Id using pk values.
     *
     * @param SimpleKey issue_id
     * @param SimpleKey attribute_id
     * @param SimpleKey user_id
     */
    public void setPrimaryKey(
     SimpleKey issue_id
            , SimpleKey attribute_id
            , SimpleKey user_id
                ) throws Exception
    {
         setIssueId(issue_id);
         setAttributeId(attribute_id);
         setUserId(user_id);
    }
    


    private final SimpleKey[] pks = new SimpleKey[3];
    private final ComboKey comboPK = new ComboKey(pks);
    /** 
     * Set the PrimaryKey with an ObjectKey
     */
    public void setPrimaryKey(ComboKey key) throws Exception
    {
        //if (key.getInternalObject() instanceof SimpleKey[])
        //{
            SimpleKey[] keys = (SimpleKey[])key.getInternalObject();
                    setIssueId(keys[0]);
                        setAttributeId(keys[1]);
                        setUserId(keys[2]);
                
    }

    /** 
     * Set the PrimaryKey using a String.
     */
    public void setPrimaryKey(String key) throws Exception
    {
        int prevPos = 0;

                  int colonPos = key.indexOf(':', prevPos);
        setIssueId( new SimpleKey(key.substring(prevPos, colonPos)) );
        prevPos = colonPos + 1;
                     colonPos = key.indexOf(':', prevPos);
        setAttributeId( new SimpleKey(key.substring(prevPos, colonPos)) );
        prevPos = colonPos + 1;
                     colonPos = key.indexOf(':', prevPos);
        setUserId( new SimpleKey(key.substring(prevPos, colonPos)) );
        prevPos = colonPos + 1;
                 }



    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey() 
    {
            pks[0] = getIssueId();
                    pks[1] = getAttributeId();
                    pks[2] = getUserId();
                    return comboPK;
    }

    /**
     * Makes a copy of this object.  
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public AttributeVote copy() throws Exception
    {
        AttributeVote copyObj = new AttributeVote();
        copyObj.setIssueId(issue_id);
        copyObj.setAttributeId(attribute_id);
        copyObj.setUserId(user_id);
        copyObj.setOptionId(option_id);


            
        copyObj.setIssueId(null);
                
        copyObj.setAttributeId(null);
                
        copyObj.setUserId(null);
            return copyObj;
    }             
}

