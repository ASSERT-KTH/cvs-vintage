package org.tigris.scarab.baseom.base;


// JDK classes
import java.util.*;
import java.math.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.StringUtils;
import org.apache.turbine.util.ParameterParser;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

import org.tigris.scarab.baseom.*;
import org.tigris.scarab.baseom.peer.*;

/** 
 * This class was autogenerated by Torque on:
 *
 * [Thu Feb 22 18:38:08 PST 2001]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Issue 
 */
public abstract class BaseIssue extends BaseObject
{
    /** the value for the issue_id field */
    private SimpleKey issue_id;
    /** the value for the module_id field */
    private SimpleKey module_id;
    /** the value for the modified_by field */
    private SimpleKey modified_by;
    /** the value for the created_by field */
    private SimpleKey created_by;
    /** the value for the modified_date field */
    private Date modified_date;
    /** the value for the created_date field */
    private Date created_date;
    /** the value for the deleted field */
    private boolean deleted;


    /**
     * Get the IssueId
     * @return SimpleKey
     */
     public SimpleKey getIssueId()
     {
          return issue_id;
     }

                            
    /**
     * Set the value of IssueId
     */
     public void setIssueId(SimpleKey v ) throws Exception
     {
  
       
        
                
          // update associated Activity
          if (collActivitys != null )
          {
              for (int i=0; i<collActivitys.size(); i++)
              {
                  ((Activity)collActivitys.get(i))
                      .setIssueId(v);
              }
          }
            
        
                
          // update associated Attachment
          if (collAttachments != null )
          {
              for (int i=0; i<collAttachments.size(); i++)
              {
                  ((Attachment)collAttachments.get(i))
                      .setIssueId(v);
              }
          }
            
        
                
          // update associated Depend
          if (collDependsRelatedByObservedId != null )
          {
              for (int i=0; i<collDependsRelatedByObservedId.size(); i++)
              {
                  ((Depend)collDependsRelatedByObservedId.get(i))
                      .setObservedId(v);
              }
          }
            
        
                
          // update associated Depend
          if (collDependsRelatedByObserverId != null )
          {
              for (int i=0; i<collDependsRelatedByObserverId.size(); i++)
              {
                  ((Depend)collDependsRelatedByObserverId.get(i))
                      .setObserverId(v);
              }
          }
            
        
                
          // update associated AttributeValue
          if (collAttributeValues != null )
          {
              for (int i=0; i<collAttributeValues.size(); i++)
              {
                  ((AttributeValue)collAttributeValues.get(i))
                      .setIssueId(v);
              }
          }
       

         if ( !ObjectUtils.equals(this.issue_id, v) )
        {
                       if (this.issue_id == null)
            {
                this.issue_id = v;
            }
            else
            {
                this.issue_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the ModuleId
     * @return SimpleKey
     */
     public SimpleKey getModuleId()
     {
          return module_id;
     }

            
    /**
     * Set the value of ModuleId
     */
     public void setModuleId(SimpleKey v ) throws Exception
     {
                  if ( aModule != null && !aModule.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

         if ( !ObjectUtils.equals(this.module_id, v) )
        {
                       if (this.module_id == null)
            {
                this.module_id = v;
            }
            else
            {
                this.module_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the ModifiedBy
     * @return SimpleKey
     */
     public SimpleKey getModifiedBy()
     {
          return modified_by;
     }

            
    /**
     * Set the value of ModifiedBy
     */
     public void setModifiedBy(SimpleKey v ) throws Exception
     {
                  if ( aTurbineUserRelatedByModifiedBy != null && !aTurbineUserRelatedByModifiedBy.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

         if ( !ObjectUtils.equals(this.modified_by, v) )
        {
                       if (this.modified_by == null)
            {
                this.modified_by = v;
            }
            else
            {
                this.modified_by.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the CreatedBy
     * @return SimpleKey
     */
     public SimpleKey getCreatedBy()
     {
          return created_by;
     }

            
    /**
     * Set the value of CreatedBy
     */
     public void setCreatedBy(SimpleKey v ) throws Exception
     {
                  if ( aTurbineUserRelatedByCreatedBy != null && !aTurbineUserRelatedByCreatedBy.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

         if ( !ObjectUtils.equals(this.created_by, v) )
        {
                       if (this.created_by == null)
            {
                this.created_by = v;
            }
            else
            {
                this.created_by.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the ModifiedDate
     * @return Date
     */
     public Date getModifiedDate()
     {
          return modified_date;
     }

        
    /**
     * Set the value of ModifiedDate
     */
     public void setModifiedDate(Date v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.modified_date, v) )
        {
                       this.modified_date = v;
                      setModified(true);
        }
     }
    /**
     * Get the CreatedDate
     * @return Date
     */
     public Date getCreatedDate()
     {
          return created_date;
     }

        
    /**
     * Set the value of CreatedDate
     */
     public void setCreatedDate(Date v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.created_date, v) )
        {
                       this.created_date = v;
                      setModified(true);
        }
     }
    /**
     * Get the Deleted
     * @return boolean
     */
     public boolean getDeleted()
     {
          return deleted;
     }

        
    /**
     * Set the value of Deleted
     */
     public void setDeleted(boolean v ) 
     {
  
  

         if (this.deleted != v)
        {
                       this.deleted = v;
                      setModified(true);
        }
     }

 
 
   
             
   
   
    /**
     * Declares an association between this object and a Module object
     *
     * @param Module v
     */
    private Module aModule;
    public void setModule(Module v) throws Exception
    {
        aModule = null;
           setModuleId(v.getModuleId());
           aModule = v;
    }

                     
    public Module getModule() throws Exception
    {
        if ( aModule==null && (!ObjectUtils.equals(this.module_id, null)) )
        {
            aModule = ModulePeer.retrieveByPK(this.module_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // Module obj = ModulePeer.retrieveByPK(this.module_id);
            // obj.addIssues(this);
        }
        return aModule;
    }

 
   
                 
      
   
    /**
     * Declares an association between this object and a TurbineUser object
     *
     * @param TurbineUser v
     */
    private TurbineUser aTurbineUserRelatedByCreatedBy;
    public void setTurbineUserRelatedByCreatedBy(TurbineUser v) throws Exception
    {
        aTurbineUserRelatedByCreatedBy = null;
           setCreatedBy(v.getUserId());
           aTurbineUserRelatedByCreatedBy = v;
    }

                     
    public TurbineUser getTurbineUserRelatedByCreatedBy() throws Exception
    {
        if ( aTurbineUserRelatedByCreatedBy==null && (!ObjectUtils.equals(this.created_by, null)) )
        {
            aTurbineUserRelatedByCreatedBy = TurbineUserPeer.retrieveByPK(this.created_by);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // TurbineUser obj = TurbineUserPeer.retrieveByPK(this.created_by);
            // obj.addIssuesRelatedByCreatedBy(this);
        }
        return aTurbineUserRelatedByCreatedBy;
    }

 
   
                 
      
   
    /**
     * Declares an association between this object and a TurbineUser object
     *
     * @param TurbineUser v
     */
    private TurbineUser aTurbineUserRelatedByModifiedBy;
    public void setTurbineUserRelatedByModifiedBy(TurbineUser v) throws Exception
    {
        aTurbineUserRelatedByModifiedBy = null;
           setModifiedBy(v.getUserId());
           aTurbineUserRelatedByModifiedBy = v;
    }

                     
    public TurbineUser getTurbineUserRelatedByModifiedBy() throws Exception
    {
        if ( aTurbineUserRelatedByModifiedBy==null && (!ObjectUtils.equals(this.modified_by, null)) )
        {
            aTurbineUserRelatedByModifiedBy = TurbineUserPeer.retrieveByPK(this.modified_by);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // TurbineUser obj = TurbineUserPeer.retrieveByPK(this.modified_by);
            // obj.addIssuesRelatedByModifiedBy(this);
        }
        return aTurbineUserRelatedByModifiedBy;
    }

    
                
      
    /**
     * Collection to store aggregation of collActivitys
     */
    private Vector collActivitys;
    /**
     * Temporary storage of collActivitys to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollActivitys;

    public void initActivitys()
    {
        if (collActivitys == null)
            collActivitys = new Vector();
    }

    /**
     * Method called to associate a Activity object to this object
     * through the Activity foreign key attribute
     *
     * @param Activity l
     */
    public void addActivitys(Activity l) throws Exception
    {
        /*
        if (collActivitys == null)
        {
            if (tempcollActivitys == null)
            {
                tempcollActivitys = new Vector();
            }
            tempcollActivitys.add(l);
        }
        else
        {
            collActivitys.add(l);
        }
        */
        getActivitys().add(l);
        l.setIssue((Issue)this);
    }

    /**
     * The criteria used to select the current contents of collActivitys
     */
    private Criteria lastActivitysCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getActivitys(new Criteria())
     */
    public Vector getActivitys() throws Exception
    {
        if (collActivitys == null)
        {
            collActivitys = getActivitys(new Criteria(10));
        }
        return collActivitys;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Issue is new, it will return
     * an empty collection; or if this Issue has previously
     * been saved, it will retrieve related Activitys from storage.
     */
    public Vector getActivitys(Criteria criteria) throws Exception
    {
        if (collActivitys == null)
        {
            if ( isNew() ) 
            {
               collActivitys = new Vector();       
            } 
            else
            {
                   criteria.add(ActivityPeer.ISSUE_ID, getIssueId() );               
                   collActivitys = ActivityPeer.doSelect(criteria);
            }
/*
            if (tempcollActivitys != null)
            {
                for (int i=0; i<tempcollActivitys.size(); i++)
                {
                    collActivitys.add(tempcollActivitys.get(i));
                }
                tempcollActivitys = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ActivityPeer.ISSUE_ID, getIssueId() );               
               if ( !lastActivitysCriteria.equals(criteria)  )
            {
                collActivitys = ActivityPeer.doSelect(criteria);  
            }
        }
        lastActivitysCriteria = criteria; 

        return collActivitys;
    }
     

        
      
         
          
                    
                
        
        
       
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Issue is new, it will return
     * an empty collection; or if this Issue has previously
     * been saved, it will retrieve related Activitys from storage.
     */
    public Vector getActivitysJoinAttribute(Criteria criteria) 
        throws Exception
    {
        if (collActivitys == null)
        {
            if ( isNew() ) 
            {
               collActivitys = new Vector();       
            } 
            else
            {
                   criteria.add(ActivityPeer.ISSUE_ID, getIssueId() );               
                   collActivitys = ActivityPeer.doSelectJoinAttribute(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ActivityPeer.ISSUE_ID, getIssueId() );               
               if ( !lastActivitysCriteria.equals(criteria)  )
            {
                collActivitys = ActivityPeer.doSelectJoinAttribute(criteria);
            }
        }
        lastActivitysCriteria = criteria; 

        return collActivitys;
    }
      
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Issue is new, it will return
     * an empty collection; or if this Issue has previously
     * been saved, it will retrieve related Activitys from storage.
     */
    public Vector getActivitysJoinTransaction(Criteria criteria) 
        throws Exception
    {
        if (collActivitys == null)
        {
            if ( isNew() ) 
            {
               collActivitys = new Vector();       
            } 
            else
            {
                   criteria.add(ActivityPeer.ISSUE_ID, getIssueId() );               
                   collActivitys = ActivityPeer.doSelectJoinTransaction(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ActivityPeer.ISSUE_ID, getIssueId() );               
               if ( !lastActivitysCriteria.equals(criteria)  )
            {
                collActivitys = ActivityPeer.doSelectJoinTransaction(criteria);
            }
        }
        lastActivitysCriteria = criteria; 

        return collActivitys;
    }
     



             
      
    /**
     * Collection to store aggregation of collAttachments
     */
    private Vector collAttachments;
    /**
     * Temporary storage of collAttachments to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollAttachments;

    public void initAttachments()
    {
        if (collAttachments == null)
            collAttachments = new Vector();
    }

    /**
     * Method called to associate a Attachment object to this object
     * through the Attachment foreign key attribute
     *
     * @param Attachment l
     */
    public void addAttachments(Attachment l) throws Exception
    {
        /*
        if (collAttachments == null)
        {
            if (tempcollAttachments == null)
            {
                tempcollAttachments = new Vector();
            }
            tempcollAttachments.add(l);
        }
        else
        {
            collAttachments.add(l);
        }
        */
        getAttachments().add(l);
        l.setIssue((Issue)this);
    }

    /**
     * The criteria used to select the current contents of collAttachments
     */
    private Criteria lastAttachmentsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getAttachments(new Criteria())
     */
    public Vector getAttachments() throws Exception
    {
        if (collAttachments == null)
        {
            collAttachments = getAttachments(new Criteria(10));
        }
        return collAttachments;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Issue is new, it will return
     * an empty collection; or if this Issue has previously
     * been saved, it will retrieve related Attachments from storage.
     */
    public Vector getAttachments(Criteria criteria) throws Exception
    {
        if (collAttachments == null)
        {
            if ( isNew() ) 
            {
               collAttachments = new Vector();       
            } 
            else
            {
                   criteria.add(AttachmentPeer.ISSUE_ID, getIssueId() );               
                   collAttachments = AttachmentPeer.doSelect(criteria);
            }
/*
            if (tempcollAttachments != null)
            {
                for (int i=0; i<tempcollAttachments.size(); i++)
                {
                    collAttachments.add(tempcollAttachments.get(i));
                }
                tempcollAttachments = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttachmentPeer.ISSUE_ID, getIssueId() );               
               if ( !lastAttachmentsCriteria.equals(criteria)  )
            {
                collAttachments = AttachmentPeer.doSelect(criteria);  
            }
        }
        lastAttachmentsCriteria = criteria; 

        return collAttachments;
    }
    

        
      
         
          
                    
                
        
        
       
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Issue is new, it will return
     * an empty collection; or if this Issue has previously
     * been saved, it will retrieve related Attachments from storage.
     */
    public Vector getAttachmentsJoinAttachmentType(Criteria criteria) 
        throws Exception
    {
        if (collAttachments == null)
        {
            if ( isNew() ) 
            {
               collAttachments = new Vector();       
            } 
            else
            {
                   criteria.add(AttachmentPeer.ISSUE_ID, getIssueId() );               
                   collAttachments = AttachmentPeer.doSelectJoinAttachmentType(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttachmentPeer.ISSUE_ID, getIssueId() );               
               if ( !lastAttachmentsCriteria.equals(criteria)  )
            {
                collAttachments = AttachmentPeer.doSelectJoinAttachmentType(criteria);
            }
        }
        lastAttachmentsCriteria = criteria; 

        return collAttachments;
    }
     



                 
      
    /**
     * Collection to store aggregation of collDependsRelatedByObservedId
     */
    private Vector collDependsRelatedByObservedId;
    /**
     * Temporary storage of collDependsRelatedByObservedId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollDependsRelatedByObservedId;

    public void initDependsRelatedByObservedId()
    {
        if (collDependsRelatedByObservedId == null)
            collDependsRelatedByObservedId = new Vector();
    }

    /**
     * Method called to associate a Depend object to this object
     * through the Depend foreign key attribute
     *
     * @param Depend l
     */
    public void addDependsRelatedByObservedId(Depend l) throws Exception
    {
        /*
        if (collDependsRelatedByObservedId == null)
        {
            if (tempcollDependsRelatedByObservedId == null)
            {
                tempcollDependsRelatedByObservedId = new Vector();
            }
            tempcollDependsRelatedByObservedId.add(l);
        }
        else
        {
            collDependsRelatedByObservedId.add(l);
        }
        */
        getDependsRelatedByObservedId().add(l);
        l.setIssueRelatedByObservedId((Issue)this);
    }

    /**
     * The criteria used to select the current contents of collDependsRelatedByObservedId
     */
    private Criteria lastDependsRelatedByObservedIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getDependsRelatedByObservedId(new Criteria())
     */
    public Vector getDependsRelatedByObservedId() throws Exception
    {
        if (collDependsRelatedByObservedId == null)
        {
            collDependsRelatedByObservedId = getDependsRelatedByObservedId(new Criteria(10));
        }
        return collDependsRelatedByObservedId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Issue is new, it will return
     * an empty collection; or if this Issue has previously
     * been saved, it will retrieve related DependsRelatedByObservedId from storage.
     */
    public Vector getDependsRelatedByObservedId(Criteria criteria) throws Exception
    {
        if (collDependsRelatedByObservedId == null)
        {
            if ( isNew() ) 
            {
               collDependsRelatedByObservedId = new Vector();       
            } 
            else
            {
                   criteria.add(DependPeer.OBSERVED_ID, getIssueId() );               
                   collDependsRelatedByObservedId = DependPeer.doSelect(criteria);
            }
/*
            if (tempcollDependsRelatedByObservedId != null)
            {
                for (int i=0; i<tempcollDependsRelatedByObservedId.size(); i++)
                {
                    collDependsRelatedByObservedId.add(tempcollDependsRelatedByObservedId.get(i));
                }
                tempcollDependsRelatedByObservedId = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(DependPeer.OBSERVED_ID, getIssueId() );               
               if ( !lastDependsRelatedByObservedIdCriteria.equals(criteria)  )
            {
                collDependsRelatedByObservedId = DependPeer.doSelect(criteria);  
            }
        }
        lastDependsRelatedByObservedIdCriteria = criteria; 

        return collDependsRelatedByObservedId;
    }
     

        
      
         
              
                            
                
        
                        
       
      
         
              
                            
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Issue is new, it will return
     * an empty collection; or if this Issue has previously
     * been saved, it will retrieve related DependsRelatedByObservedId from storage.
     */
    public Vector getDependsRelatedByObservedIdJoinIssueRelatedByObserverId(Criteria criteria) 
        throws Exception
    {
        if (collDependsRelatedByObservedId == null)
        {
            if ( isNew() ) 
            {
               collDependsRelatedByObservedId = new Vector();       
            } 
            else
            {
                   criteria.add(DependPeer.OBSERVED_ID, getIssueId() );               
                   collDependsRelatedByObservedId = DependPeer.doSelectJoinIssueRelatedByObserverId(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(DependPeer.OBSERVED_ID, getIssueId() );               
               if ( !lastDependsRelatedByObservedIdCriteria.equals(criteria)  )
            {
                collDependsRelatedByObservedId = DependPeer.doSelectJoinIssueRelatedByObserverId(criteria);
            }
        }
        lastDependsRelatedByObservedIdCriteria = criteria; 

        return collDependsRelatedByObservedId;
    }
      
      
      
          
                    
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Issue is new, it will return
     * an empty collection; or if this Issue has previously
     * been saved, it will retrieve related DependsRelatedByObservedId from storage.
     */
    public Vector getDependsRelatedByObservedIdJoinDependType(Criteria criteria) 
        throws Exception
    {
        if (collDependsRelatedByObservedId == null)
        {
            if ( isNew() ) 
            {
               collDependsRelatedByObservedId = new Vector();       
            } 
            else
            {
                   criteria.add(DependPeer.OBSERVED_ID, getIssueId() );               
                   collDependsRelatedByObservedId = DependPeer.doSelectJoinDependType(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(DependPeer.OBSERVED_ID, getIssueId() );               
               if ( !lastDependsRelatedByObservedIdCriteria.equals(criteria)  )
            {
                collDependsRelatedByObservedId = DependPeer.doSelectJoinDependType(criteria);
            }
        }
        lastDependsRelatedByObservedIdCriteria = criteria; 

        return collDependsRelatedByObservedId;
    }
     



                 
      
    /**
     * Collection to store aggregation of collDependsRelatedByObserverId
     */
    private Vector collDependsRelatedByObserverId;
    /**
     * Temporary storage of collDependsRelatedByObserverId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollDependsRelatedByObserverId;

    public void initDependsRelatedByObserverId()
    {
        if (collDependsRelatedByObserverId == null)
            collDependsRelatedByObserverId = new Vector();
    }

    /**
     * Method called to associate a Depend object to this object
     * through the Depend foreign key attribute
     *
     * @param Depend l
     */
    public void addDependsRelatedByObserverId(Depend l) throws Exception
    {
        /*
        if (collDependsRelatedByObserverId == null)
        {
            if (tempcollDependsRelatedByObserverId == null)
            {
                tempcollDependsRelatedByObserverId = new Vector();
            }
            tempcollDependsRelatedByObserverId.add(l);
        }
        else
        {
            collDependsRelatedByObserverId.add(l);
        }
        */
        getDependsRelatedByObserverId().add(l);
        l.setIssueRelatedByObserverId((Issue)this);
    }

    /**
     * The criteria used to select the current contents of collDependsRelatedByObserverId
     */
    private Criteria lastDependsRelatedByObserverIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getDependsRelatedByObserverId(new Criteria())
     */
    public Vector getDependsRelatedByObserverId() throws Exception
    {
        if (collDependsRelatedByObserverId == null)
        {
            collDependsRelatedByObserverId = getDependsRelatedByObserverId(new Criteria(10));
        }
        return collDependsRelatedByObserverId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Issue is new, it will return
     * an empty collection; or if this Issue has previously
     * been saved, it will retrieve related DependsRelatedByObserverId from storage.
     */
    public Vector getDependsRelatedByObserverId(Criteria criteria) throws Exception
    {
        if (collDependsRelatedByObserverId == null)
        {
            if ( isNew() ) 
            {
               collDependsRelatedByObserverId = new Vector();       
            } 
            else
            {
                   criteria.add(DependPeer.OBSERVER_ID, getIssueId() );               
                   collDependsRelatedByObserverId = DependPeer.doSelect(criteria);
            }
/*
            if (tempcollDependsRelatedByObserverId != null)
            {
                for (int i=0; i<tempcollDependsRelatedByObserverId.size(); i++)
                {
                    collDependsRelatedByObserverId.add(tempcollDependsRelatedByObserverId.get(i));
                }
                tempcollDependsRelatedByObserverId = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(DependPeer.OBSERVER_ID, getIssueId() );               
               if ( !lastDependsRelatedByObserverIdCriteria.equals(criteria)  )
            {
                collDependsRelatedByObserverId = DependPeer.doSelect(criteria);  
            }
        }
        lastDependsRelatedByObserverIdCriteria = criteria; 

        return collDependsRelatedByObserverId;
    }
     

        
      
         
              
                            
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Issue is new, it will return
     * an empty collection; or if this Issue has previously
     * been saved, it will retrieve related DependsRelatedByObserverId from storage.
     */
    public Vector getDependsRelatedByObserverIdJoinIssueRelatedByObservedId(Criteria criteria) 
        throws Exception
    {
        if (collDependsRelatedByObserverId == null)
        {
            if ( isNew() ) 
            {
               collDependsRelatedByObserverId = new Vector();       
            } 
            else
            {
                   criteria.add(DependPeer.OBSERVER_ID, getIssueId() );               
                   collDependsRelatedByObserverId = DependPeer.doSelectJoinIssueRelatedByObservedId(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(DependPeer.OBSERVER_ID, getIssueId() );               
               if ( !lastDependsRelatedByObserverIdCriteria.equals(criteria)  )
            {
                collDependsRelatedByObserverId = DependPeer.doSelectJoinIssueRelatedByObservedId(criteria);
            }
        }
        lastDependsRelatedByObserverIdCriteria = criteria; 

        return collDependsRelatedByObserverId;
    }
      
      
         
              
                            
                
        
                        
       
      
      
          
                    
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Issue is new, it will return
     * an empty collection; or if this Issue has previously
     * been saved, it will retrieve related DependsRelatedByObserverId from storage.
     */
    public Vector getDependsRelatedByObserverIdJoinDependType(Criteria criteria) 
        throws Exception
    {
        if (collDependsRelatedByObserverId == null)
        {
            if ( isNew() ) 
            {
               collDependsRelatedByObserverId = new Vector();       
            } 
            else
            {
                   criteria.add(DependPeer.OBSERVER_ID, getIssueId() );               
                   collDependsRelatedByObserverId = DependPeer.doSelectJoinDependType(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(DependPeer.OBSERVER_ID, getIssueId() );               
               if ( !lastDependsRelatedByObserverIdCriteria.equals(criteria)  )
            {
                collDependsRelatedByObserverId = DependPeer.doSelectJoinDependType(criteria);
            }
        }
        lastDependsRelatedByObserverIdCriteria = criteria; 

        return collDependsRelatedByObserverId;
    }
     



             
      
    /**
     * Collection to store aggregation of collAttributeValues
     */
    private Vector collAttributeValues;
    /**
     * Temporary storage of collAttributeValues to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollAttributeValues;

    public void initAttributeValues()
    {
        if (collAttributeValues == null)
            collAttributeValues = new Vector();
    }

    /**
     * Method called to associate a AttributeValue object to this object
     * through the AttributeValue foreign key attribute
     *
     * @param AttributeValue l
     */
    public void addAttributeValues(AttributeValue l) throws Exception
    {
        /*
        if (collAttributeValues == null)
        {
            if (tempcollAttributeValues == null)
            {
                tempcollAttributeValues = new Vector();
            }
            tempcollAttributeValues.add(l);
        }
        else
        {
            collAttributeValues.add(l);
        }
        */
        getAttributeValues().add(l);
        l.setIssue((Issue)this);
    }

    /**
     * The criteria used to select the current contents of collAttributeValues
     */
    private Criteria lastAttributeValuesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getAttributeValues(new Criteria())
     */
    public Vector getAttributeValues() throws Exception
    {
        if (collAttributeValues == null)
        {
            collAttributeValues = getAttributeValues(new Criteria(10));
        }
        return collAttributeValues;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Issue is new, it will return
     * an empty collection; or if this Issue has previously
     * been saved, it will retrieve related AttributeValues from storage.
     */
    public Vector getAttributeValues(Criteria criteria) throws Exception
    {
        if (collAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeValuePeer.ISSUE_ID, getIssueId() );               
                   collAttributeValues = AttributeValuePeer.doSelect(criteria);
            }
/*
            if (tempcollAttributeValues != null)
            {
                for (int i=0; i<tempcollAttributeValues.size(); i++)
                {
                    collAttributeValues.add(tempcollAttributeValues.get(i));
                }
                tempcollAttributeValues = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeValuePeer.ISSUE_ID, getIssueId() );               
               if ( !lastAttributeValuesCriteria.equals(criteria)  )
            {
                collAttributeValues = AttributeValuePeer.doSelect(criteria);  
            }
        }
        lastAttributeValuesCriteria = criteria; 

        return collAttributeValues;
    }
      

        
      
         
          
                    
                
        
        
       
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Issue is new, it will return
     * an empty collection; or if this Issue has previously
     * been saved, it will retrieve related AttributeValues from storage.
     */
    public Vector getAttributeValuesJoinAttribute(Criteria criteria) 
        throws Exception
    {
        if (collAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeValuePeer.ISSUE_ID, getIssueId() );               
                   collAttributeValues = AttributeValuePeer.doSelectJoinAttribute(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeValuePeer.ISSUE_ID, getIssueId() );               
               if ( !lastAttributeValuesCriteria.equals(criteria)  )
            {
                collAttributeValues = AttributeValuePeer.doSelectJoinAttribute(criteria);
            }
        }
        lastAttributeValuesCriteria = criteria; 

        return collAttributeValues;
    }
      
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Issue is new, it will return
     * an empty collection; or if this Issue has previously
     * been saved, it will retrieve related AttributeValues from storage.
     */
    public Vector getAttributeValuesJoinAttributeOption(Criteria criteria) 
        throws Exception
    {
        if (collAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeValuePeer.ISSUE_ID, getIssueId() );               
                   collAttributeValues = AttributeValuePeer.doSelectJoinAttributeOption(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeValuePeer.ISSUE_ID, getIssueId() );               
               if ( !lastAttributeValuesCriteria.equals(criteria)  )
            {
                collAttributeValues = AttributeValuePeer.doSelectJoinAttributeOption(criteria);
            }
        }
        lastAttributeValuesCriteria = criteria; 

        return collAttributeValues;
    }
      
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this Issue is new, it will return
     * an empty collection; or if this Issue has previously
     * been saved, it will retrieve related AttributeValues from storage.
     */
    public Vector getAttributeValuesJoinTurbineUser(Criteria criteria) 
        throws Exception
    {
        if (collAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeValuePeer.ISSUE_ID, getIssueId() );               
                   collAttributeValues = AttributeValuePeer.doSelectJoinTurbineUser(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeValuePeer.ISSUE_ID, getIssueId() );               
               if ( !lastAttributeValuesCriteria.equals(criteria)  )
            {
                collAttributeValues = AttributeValuePeer.doSelectJoinTurbineUser(criteria);
            }
        }
        lastAttributeValuesCriteria = criteria; 

        return collAttributeValues;
    }
     



     
    
    private static Vector fieldNames_ = null;

    /**
     * Generate a list of field names.
     */
    public static Vector getFieldNames()
    {
      if (fieldNames_ == null)
      {
        fieldNames_ = new Vector();
            fieldNames_.add("IssueId");
            fieldNames_.add("ModuleId");
            fieldNames_.add("ModifiedBy");
            fieldNames_.add("CreatedBy");
            fieldNames_.add("ModifiedDate");
            fieldNames_.add("CreatedDate");
            fieldNames_.add("Deleted");
          }
      return fieldNames_;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.
     */
    public Object getByName(String name)
    {
            if (name.equals("IssueId"))
	{
	  	    return getIssueId();
	  	}
            if (name.equals("ModuleId"))
	{
	  	    return getModuleId();
	  	}
            if (name.equals("ModifiedBy"))
	{
	  	    return getModifiedBy();
	  	}
            if (name.equals("CreatedBy"))
	{
	  	    return getCreatedBy();
	  	}
            if (name.equals("ModifiedDate"))
	{
	  	    return getModifiedDate();
	  	}
            if (name.equals("CreatedDate"))
	{
	  	    return getCreatedDate();
	  	}
            if (name.equals("Deleted"))
	{
	  	    return new Boolean(getDeleted());
	  	}
            return null; 
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     */
    public Object getByPeerName(String name)
    {
            if (name == IssuePeer.ISSUE_ID )
	    {
	  	    return getIssueId();
	  	}
            if (name == IssuePeer.MODULE_ID )
	    {
	  	    return getModuleId();
	  	}
            if (name == IssuePeer.MODIFIED_BY )
	    {
	  	    return getModifiedBy();
	  	}
            if (name == IssuePeer.CREATED_BY )
	    {
	  	    return getCreatedBy();
	  	}
            if (name == IssuePeer.MODIFIED_DATE )
	    {
	  	    return getModifiedDate();
	  	}
            if (name == IssuePeer.CREATED_DATE )
	    {
	  	    return getCreatedDate();
	  	}
            if (name == IssuePeer.DELETED )
	    {
	  	    return new Boolean(getDeleted());
	  	}
            return null; 
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     */
    public Object getByPosition(int pos)
    {
            if ( pos == 0 )
	{
	  	    return getIssueId();
	  	}
            if ( pos == 1 )
	{
	  	    return getModuleId();
	  	}
            if ( pos == 2 )
	{
	  	    return getModifiedBy();
	  	}
            if ( pos == 3 )
	{
	  	    return getCreatedBy();
	  	}
            if ( pos == 4 )
	{
	  	    return getModifiedDate();
	  	}
            if ( pos == 5 )
	{
	  	    return getCreatedDate();
	  	}
            if ( pos == 6 )
	{
	  	    return new Boolean(getDeleted());
	  	}
                return null; 
    }

     	

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                IssuePeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                IssuePeer.doInsert((Issue)this, dbCon);
            }
            else
            {
                IssuePeer.doUpdate((Issue)this, dbCon);
                setNew(false);
            }
        }

                                    
                
          if (collActivitys != null )
          {
              for (int i=0; i<collActivitys.size(); i++)
              {
                  ((Activity)collActivitys.get(i)).save(dbCon);
              }
          }
                                        
                
          if (collAttachments != null )
          {
              for (int i=0; i<collAttachments.size(); i++)
              {
                  ((Attachment)collAttachments.get(i)).save(dbCon);
              }
          }
                                                    
                
          if (collDependsRelatedByObservedId != null )
          {
              for (int i=0; i<collDependsRelatedByObservedId.size(); i++)
              {
                  ((Depend)collDependsRelatedByObservedId.get(i)).save(dbCon);
              }
          }
                                                    
                
          if (collDependsRelatedByObserverId != null )
          {
              for (int i=0; i<collDependsRelatedByObserverId.size(); i++)
              {
                  ((Depend)collDependsRelatedByObserverId.get(i)).save(dbCon);
              }
          }
                                        
                
          if (collAttributeValues != null )
          {
              for (int i=0; i<collAttributeValues.size(); i++)
              {
                  ((AttributeValue)collAttributeValues.get(i)).save(dbCon);
              }
          }
                  alreadyInSave = false;
      }
      }

                                                            
    /** 
     * Set the Id using pk values.
     *
     * @param SimpleKey issue_id
     */
    public void setPrimaryKey(
     SimpleKey issue_id
                ) throws Exception
    {
         setIssueId(issue_id);
    }
    



    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey() 
    {
        return getIssueId();
    }

    /**
     * Makes a copy of this object.  
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Issue copy() throws Exception
    {
        Issue copyObj = new Issue();
        copyObj.setIssueId(issue_id);
        copyObj.setModuleId(module_id);
        copyObj.setModifiedBy(modified_by);
        copyObj.setCreatedBy(created_by);
        copyObj.setModifiedDate(modified_date);
        copyObj.setCreatedDate(created_date);
        copyObj.setDeleted(deleted);

                                
                
         List v = copyObj.getActivitys();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
                                            
                
         v = copyObj.getAttachments();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
                                                        
                
         v = copyObj.getDependsRelatedByObservedId();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
                                                        
                
         v = copyObj.getDependsRelatedByObserverId();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
                                            
                
         v = copyObj.getAttributeValues();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
            
            
        copyObj.setIssueId(null);
                                return copyObj;
    }             
}

