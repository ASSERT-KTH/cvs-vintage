package org.tigris.scarab.baseom.base;


// JDK classes
import java.util.*;
import java.math.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

import org.tigris.scarab.baseom.*;
import org.tigris.scarab.baseom.peer.*;

/** 
 * This class was autogenerated by Torque on:
 *
 * [Thu Feb 15 16:11:32 PST 2001]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to ScarabRModuleUser 
 */
public abstract class BaseScarabRModuleUser extends BaseObject
{
    /** the value for the module_id field */
    private int module_id;
    /** the value for the user_id field */
    private int user_id;
    /** the value for the deleted field */
    private boolean deleted;


    /**
     * Get the ModuleId
     * @return int
     */
     public int getModuleId()
     {
          return module_id;
     }

                        
    /**
     * Set the value of ModuleId
     */
     public void setModuleId(int v ) throws Exception
     {
                  if ( aScarabModule != null && !aScarabModule.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
       
        
                
          // update associated ScarabRModuleUserRole
          if (collScarabRModuleUserRoles != null )
          {
              for (int i=0; i<collScarabRModuleUserRoles.size(); i++)
              {
                  ((ScarabRModuleUserRole)collScarabRModuleUserRoles.get(i))
                      .setModuleId(v);
              }
          }
       

           if (this.module_id != v)
           {
              this.module_id = v;
              setModified(true);
          }
     }
    /**
     * Get the UserId
     * @return int
     */
     public int getUserId()
     {
          return user_id;
     }

                        
    /**
     * Set the value of UserId
     */
     public void setUserId(int v ) throws Exception
     {
                  if ( aTurbineUser != null && !aTurbineUser.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
       
        
                
          // update associated ScarabRModuleUserRole
          if (collScarabRModuleUserRoles != null )
          {
              for (int i=0; i<collScarabRModuleUserRoles.size(); i++)
              {
                  ((ScarabRModuleUserRole)collScarabRModuleUserRoles.get(i))
                      .setUserId(v);
              }
          }
       

           if (this.user_id != v)
           {
              this.user_id = v;
              setModified(true);
          }
     }
    /**
     * Get the Deleted
     * @return boolean
     */
     public boolean getDeleted()
     {
          return deleted;
     }

        
    /**
     * Set the value of Deleted
     */
     public void setDeleted(boolean v ) 
     {
  
  

           if (this.deleted != v)
           {
              this.deleted = v;
              setModified(true);
          }
     }

 
 
   
             
   
   
    /**
     * Declares an association between this object and a ScarabModule object
     *
     * @param ScarabModule v
     */
    private ScarabModule aScarabModule;
    public void setScarabModule(ScarabModule v) throws Exception
    {
        aScarabModule = null;
           setModuleId(v.getModuleId());
           aScarabModule = v;
    }

                     
    public ScarabModule getScarabModule() throws Exception
    {
        if ( aScarabModule==null && (this.module_id>0) )
        {
            aScarabModule = ScarabModulePeer.retrieveByPK(this.module_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // ScarabModule obj = ScarabModulePeer.retrieveByPK(this.module_id);
            // obj.addScarabRModuleUsers(this);
        }
        return aScarabModule;
    }

 
   
             
   
   
    /**
     * Declares an association between this object and a TurbineUser object
     *
     * @param TurbineUser v
     */
    private TurbineUser aTurbineUser;
    public void setTurbineUser(TurbineUser v) throws Exception
    {
        aTurbineUser = null;
           setUserId(v.getUserId());
           aTurbineUser = v;
    }

                     
    public TurbineUser getTurbineUser() throws Exception
    {
        if ( aTurbineUser==null && (this.user_id>0) )
        {
            aTurbineUser = TurbineUserPeer.retrieveByPK(this.user_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // TurbineUser obj = TurbineUserPeer.retrieveByPK(this.user_id);
            // obj.addScarabRModuleUsers(this);
        }
        return aTurbineUser;
    }

    
                       
      
    /**
     * Collection to store aggregation of collScarabRModuleUserRoles
     */
    private Vector collScarabRModuleUserRoles;
    /**
     * Temporary storage of collScarabRModuleUserRoles to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollScarabRModuleUserRoles;

    public void initScarabRModuleUserRoles()
    {
        if (collScarabRModuleUserRoles == null)
            collScarabRModuleUserRoles = new Vector();
    }

    /**
     * Method called to associate a ScarabRModuleUserRole object to this object
     * through the ScarabRModuleUserRole foreign key attribute
     *
     * @param ScarabRModuleUserRole l
     */
    public void addScarabRModuleUserRoles(ScarabRModuleUserRole l) throws Exception
    {
        /*
        if (collScarabRModuleUserRoles == null)
        {
            if (tempcollScarabRModuleUserRoles == null)
            {
                tempcollScarabRModuleUserRoles = new Vector();
            }
            tempcollScarabRModuleUserRoles.add(l);
        }
        else
        {
            collScarabRModuleUserRoles.add(l);
        }
        */
        getScarabRModuleUserRoles().add(l);
        l.setScarabRModuleUser((ScarabRModuleUser)this);
    }

    /**
     * The criteria used to select the current contents of collScarabRModuleUserRoles
     */
    private Criteria lastScarabRModuleUserRolesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getScarabRModuleUserRoles(new Criteria())
     */
    public Vector getScarabRModuleUserRoles() throws Exception
    {
        if (collScarabRModuleUserRoles == null)
        {
            collScarabRModuleUserRoles = getScarabRModuleUserRoles(new Criteria(10));
        }
        return collScarabRModuleUserRoles;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabRModuleUser is new, it will return
     * an empty collection; or if this ScarabRModuleUser has previously
     * been saved, it will retrieve related ScarabRModuleUserRoles from storage.
     */
    public Vector getScarabRModuleUserRoles(Criteria criteria) throws Exception
    {
        if (collScarabRModuleUserRoles == null)
        {
            if ( isNew() ) 
            {
               collScarabRModuleUserRoles = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabRModuleUserRolePeer.MODULE_ID, getModuleId() );               
                   criteria.add(ScarabRModuleUserRolePeer.USER_ID, getUserId() );               
                   collScarabRModuleUserRoles = ScarabRModuleUserRolePeer.doSelect(criteria);
            }
/*
            if (tempcollScarabRModuleUserRoles != null)
            {
                for (int i=0; i<tempcollScarabRModuleUserRoles.size(); i++)
                {
                    collScarabRModuleUserRoles.add(tempcollScarabRModuleUserRoles.get(i));
                }
                tempcollScarabRModuleUserRoles = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabRModuleUserRolePeer.MODULE_ID, getModuleId() );               
                   criteria.add(ScarabRModuleUserRolePeer.USER_ID, getUserId() );               
               if ( !lastScarabRModuleUserRolesCriteria.equals(criteria)  )
            {
                collScarabRModuleUserRoles = ScarabRModuleUserRolePeer.doSelect(criteria);  
            }
        }
        lastScarabRModuleUserRolesCriteria = criteria; 

        return collScarabRModuleUserRoles;
    }
   

        
      
         
                 
                                
                
        
        
      



     
    
    private static Vector fieldNames_ = null;

    /**
     * Generate a list of field names.
     */
    public static Vector getFieldNames()
    {
      if (fieldNames_ == null)
      {
        fieldNames_ = new Vector();
            fieldNames_.add("ModuleId");
            fieldNames_.add("UserId");
            fieldNames_.add("Deleted");
          }
      return fieldNames_;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.
     */
    public Object getByName(String name)
    {
            if (name.equals("ModuleId"))
	{
	  	    return new Integer(getModuleId());
	  	}
            if (name.equals("UserId"))
	{
	  	    return new Integer(getUserId());
	  	}
            if (name.equals("Deleted"))
	{
	  	    return new Boolean(getDeleted());
	  	}
            return null; 
    }
     	

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                ScarabRModuleUserPeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                ScarabRModuleUserPeer.doInsert((ScarabRModuleUser)this, dbCon);
            }
            else
            {
                ScarabRModuleUserPeer.doUpdate((ScarabRModuleUser)this, dbCon);
                setNew(false);
            }
        }

                                                        
                
          if (collScarabRModuleUserRoles != null )
          {
              for (int i=0; i<collScarabRModuleUserRoles.size(); i++)
              {
                  ((ScarabRModuleUserRole)collScarabRModuleUserRoles.get(i)).save(dbCon);
              }
          }
                  alreadyInSave = false;
      }
      }

                                                                    
    /** 
     * Set the Id using pk values.
     *
     * @param int module_id
     * @param int user_id
     */
    public void setPrimaryKey(
                      int module_id
                                      , int user_id
                                         ) throws Exception
    {
                     setModuleId(module_id);
                             setUserId(user_id);
                            }

    /** 
     * Set the Id using a : separated String of pk values.
     */
    public void setPrimaryKey(Object id) throws Exception
    {
        StringTokenizer st = new StringTokenizer(id.toString(), ":");
                           setModuleId( Integer.parseInt(st.nextToken()) );
                                          setUserId( Integer.parseInt(st.nextToken()) );
                                    }


    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public Object getPrimaryKey() 
    {
        return ""
                      + getModuleId()
                                      + ":"  + getUserId()
                                         ;
    } 

    /** 
     * returns an id that can be used to specify this object in
     * a query string.
     */
    public String getQueryOID() 
    {
        return "ScarabRModuleUser[" + getPrimaryKey() + "]";
    }

}
