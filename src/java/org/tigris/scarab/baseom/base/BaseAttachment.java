package org.tigris.scarab.baseom.base;


// JDK classes
import java.util.*;
import java.math.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.StringUtils;
import org.apache.turbine.util.ParameterParser;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

import org.tigris.scarab.baseom.*;
import org.tigris.scarab.baseom.peer.*;

/** 
 * This class was autogenerated by Torque on:
 *
 * [Thu Feb 22 18:38:08 PST 2001]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Attachment 
 */
public abstract class BaseAttachment extends BaseObject
{
    /** the value for the attachment_id field */
    private SimpleKey attachment_id;
    /** the value for the issue_id field */
    private SimpleKey issue_id;
    /** the value for the attachment_type_id field */
    private SimpleKey attachment_type_id;
    /** the value for the attachment_name field */
    private String attachment_name;
    /** the value for the attachment_data field */
    private byte[] attachment_data;
    /** the value for the attachment_file_path field */
    private String attachment_file_path;
    /** the value for the attachment_mime_type field */
    private String attachment_mime_type;
    /** the value for the modified_by field */
    private int modified_by;
    /** the value for the created_by field */
    private int created_by;
    /** the value for the modified_date field */
    private Date modified_date;
    /** the value for the created_date field */
    private Date created_date;
    /** the value for the deleted field */
    private boolean deleted;


    /**
     * Get the AttachmentId
     * @return SimpleKey
     */
     public SimpleKey getAttachmentId()
     {
          return attachment_id;
     }

        
    /**
     * Set the value of AttachmentId
     */
     public void setAttachmentId(SimpleKey v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.attachment_id, v) )
        {
                       if (this.attachment_id == null)
            {
                this.attachment_id = v;
            }
            else
            {
                this.attachment_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the IssueId
     * @return SimpleKey
     */
     public SimpleKey getIssueId()
     {
          return issue_id;
     }

            
    /**
     * Set the value of IssueId
     */
     public void setIssueId(SimpleKey v ) throws Exception
     {
                  if ( aIssue != null && !aIssue.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

         if ( !ObjectUtils.equals(this.issue_id, v) )
        {
                       if (this.issue_id == null)
            {
                this.issue_id = v;
            }
            else
            {
                this.issue_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the TypeId
     * @return SimpleKey
     */
     public SimpleKey getTypeId()
     {
          return attachment_type_id;
     }

            
    /**
     * Set the value of TypeId
     */
     public void setTypeId(SimpleKey v ) throws Exception
     {
                  if ( aAttachmentType != null && !aAttachmentType.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

         if ( !ObjectUtils.equals(this.attachment_type_id, v) )
        {
                       if (this.attachment_type_id == null)
            {
                this.attachment_type_id = v;
            }
            else
            {
                this.attachment_type_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the Name
     * @return String
     */
     public String getName()
     {
          return attachment_name;
     }

        
    /**
     * Set the value of Name
     */
     public void setName(String v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.attachment_name, v) )
        {
                       this.attachment_name = v;
                      setModified(true);
        }
     }
    /**
     * Get the Data
     * @return byte[]
     */
     public byte[] getData()
     {
          return attachment_data;
     }

        
    /**
     * Set the value of Data
     */
     public void setData(byte[] v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.attachment_data, v) )
        {
                       this.attachment_data = v;
                      setModified(true);
        }
     }
    /**
     * Get the FilePath
     * @return String
     */
     public String getFilePath()
     {
          return attachment_file_path;
     }

        
    /**
     * Set the value of FilePath
     */
     public void setFilePath(String v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.attachment_file_path, v) )
        {
                       this.attachment_file_path = v;
                      setModified(true);
        }
     }
    /**
     * Get the MimeType
     * @return String
     */
     public String getMimeType()
     {
          return attachment_mime_type;
     }

        
    /**
     * Set the value of MimeType
     */
     public void setMimeType(String v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.attachment_mime_type, v) )
        {
                       this.attachment_mime_type = v;
                      setModified(true);
        }
     }
    /**
     * Get the ModifiedBy
     * @return int
     */
     public int getModifiedBy()
     {
          return modified_by;
     }

        
    /**
     * Set the value of ModifiedBy
     */
     public void setModifiedBy(int v ) 
     {
  
  

         if (this.modified_by != v)
        {
                       this.modified_by = v;
                      setModified(true);
        }
     }
    /**
     * Get the CreatedBy
     * @return int
     */
     public int getCreatedBy()
     {
          return created_by;
     }

        
    /**
     * Set the value of CreatedBy
     */
     public void setCreatedBy(int v ) 
     {
  
  

         if (this.created_by != v)
        {
                       this.created_by = v;
                      setModified(true);
        }
     }
    /**
     * Get the ModifiedDate
     * @return Date
     */
     public Date getModifiedDate()
     {
          return modified_date;
     }

        
    /**
     * Set the value of ModifiedDate
     */
     public void setModifiedDate(Date v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.modified_date, v) )
        {
                       this.modified_date = v;
                      setModified(true);
        }
     }
    /**
     * Get the CreatedDate
     * @return Date
     */
     public Date getCreatedDate()
     {
          return created_date;
     }

        
    /**
     * Set the value of CreatedDate
     */
     public void setCreatedDate(Date v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.created_date, v) )
        {
                       this.created_date = v;
                      setModified(true);
        }
     }
    /**
     * Get the Deleted
     * @return boolean
     */
     public boolean getDeleted()
     {
          return deleted;
     }

        
    /**
     * Set the value of Deleted
     */
     public void setDeleted(boolean v ) 
     {
  
  

         if (this.deleted != v)
        {
                       this.deleted = v;
                      setModified(true);
        }
     }

 
 
   
             
   
   
    /**
     * Declares an association between this object and a Issue object
     *
     * @param Issue v
     */
    private Issue aIssue;
    public void setIssue(Issue v) throws Exception
    {
        aIssue = null;
           setIssueId(v.getIssueId());
           aIssue = v;
    }

                     
    public Issue getIssue() throws Exception
    {
        if ( aIssue==null && (!ObjectUtils.equals(this.issue_id, null)) )
        {
            aIssue = IssuePeer.retrieveByPK(this.issue_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // Issue obj = IssuePeer.retrieveByPK(this.issue_id);
            // obj.addAttachments(this);
        }
        return aIssue;
    }

 
   
             
   
   
    /**
     * Declares an association between this object and a AttachmentType object
     *
     * @param AttachmentType v
     */
    private AttachmentType aAttachmentType;
    public void setAttachmentType(AttachmentType v) throws Exception
    {
        aAttachmentType = null;
           setTypeId(v.getAttachmentTypeId());
           aAttachmentType = v;
    }

                     
    public AttachmentType getAttachmentType() throws Exception
    {
        if ( aAttachmentType==null && (!ObjectUtils.equals(this.attachment_type_id, null)) )
        {
            aAttachmentType = AttachmentTypePeer.retrieveByPK(this.attachment_type_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // AttachmentType obj = AttachmentTypePeer.retrieveByPK(this.attachment_type_id);
            // obj.addAttachments(this);
        }
        return aAttachmentType;
    }

    
        
    
    private static Vector fieldNames_ = null;

    /**
     * Generate a list of field names.
     */
    public static Vector getFieldNames()
    {
      if (fieldNames_ == null)
      {
        fieldNames_ = new Vector();
            fieldNames_.add("AttachmentId");
            fieldNames_.add("IssueId");
            fieldNames_.add("TypeId");
            fieldNames_.add("Name");
            fieldNames_.add("Data");
            fieldNames_.add("FilePath");
            fieldNames_.add("MimeType");
            fieldNames_.add("ModifiedBy");
            fieldNames_.add("CreatedBy");
            fieldNames_.add("ModifiedDate");
            fieldNames_.add("CreatedDate");
            fieldNames_.add("Deleted");
          }
      return fieldNames_;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.
     */
    public Object getByName(String name)
    {
            if (name.equals("AttachmentId"))
	{
	  	    return getAttachmentId();
	  	}
            if (name.equals("IssueId"))
	{
	  	    return getIssueId();
	  	}
            if (name.equals("TypeId"))
	{
	  	    return getTypeId();
	  	}
            if (name.equals("Name"))
	{
	  	    return getName();
	  	}
            if (name.equals("Data"))
	{
	  	    return getData();
	  	}
            if (name.equals("FilePath"))
	{
	  	    return getFilePath();
	  	}
            if (name.equals("MimeType"))
	{
	  	    return getMimeType();
	  	}
            if (name.equals("ModifiedBy"))
	{
	  	    return new Integer(getModifiedBy());
	  	}
            if (name.equals("CreatedBy"))
	{
	  	    return new Integer(getCreatedBy());
	  	}
            if (name.equals("ModifiedDate"))
	{
	  	    return getModifiedDate();
	  	}
            if (name.equals("CreatedDate"))
	{
	  	    return getCreatedDate();
	  	}
            if (name.equals("Deleted"))
	{
	  	    return new Boolean(getDeleted());
	  	}
            return null; 
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     */
    public Object getByPeerName(String name)
    {
            if (name == AttachmentPeer.ATTACHMENT_ID )
	    {
	  	    return getAttachmentId();
	  	}
            if (name == AttachmentPeer.ISSUE_ID )
	    {
	  	    return getIssueId();
	  	}
            if (name == AttachmentPeer.ATTACHMENT_TYPE_ID )
	    {
	  	    return getTypeId();
	  	}
            if (name == AttachmentPeer.ATTACHMENT_NAME )
	    {
	  	    return getName();
	  	}
            if (name == AttachmentPeer.ATTACHMENT_DATA )
	    {
	  	    return getData();
	  	}
            if (name == AttachmentPeer.ATTACHMENT_FILE_PATH )
	    {
	  	    return getFilePath();
	  	}
            if (name == AttachmentPeer.ATTACHMENT_MIME_TYPE )
	    {
	  	    return getMimeType();
	  	}
            if (name == AttachmentPeer.MODIFIED_BY )
	    {
	  	    return new Integer(getModifiedBy());
	  	}
            if (name == AttachmentPeer.CREATED_BY )
	    {
	  	    return new Integer(getCreatedBy());
	  	}
            if (name == AttachmentPeer.MODIFIED_DATE )
	    {
	  	    return getModifiedDate();
	  	}
            if (name == AttachmentPeer.CREATED_DATE )
	    {
	  	    return getCreatedDate();
	  	}
            if (name == AttachmentPeer.DELETED )
	    {
	  	    return new Boolean(getDeleted());
	  	}
            return null; 
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     */
    public Object getByPosition(int pos)
    {
            if ( pos == 0 )
	{
	  	    return getAttachmentId();
	  	}
            if ( pos == 1 )
	{
	  	    return getIssueId();
	  	}
            if ( pos == 2 )
	{
	  	    return getTypeId();
	  	}
            if ( pos == 3 )
	{
	  	    return getName();
	  	}
            if ( pos == 4 )
	{
	  	    return getData();
	  	}
            if ( pos == 5 )
	{
	  	    return getFilePath();
	  	}
            if ( pos == 6 )
	{
	  	    return getMimeType();
	  	}
            if ( pos == 7 )
	{
	  	    return new Integer(getModifiedBy());
	  	}
            if ( pos == 8 )
	{
	  	    return new Integer(getCreatedBy());
	  	}
            if ( pos == 9 )
	{
	  	    return getModifiedDate();
	  	}
            if ( pos == 10 )
	{
	  	    return getCreatedDate();
	  	}
            if ( pos == 11 )
	{
	  	    return new Boolean(getDeleted());
	  	}
                return null; 
    }

     	

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                AttachmentPeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                AttachmentPeer.doInsert((Attachment)this, dbCon);
            }
            else
            {
                AttachmentPeer.doUpdate((Attachment)this, dbCon);
                setNew(false);
            }
        }

              alreadyInSave = false;
      }
      }

                                                            
    /** 
     * Set the Id using pk values.
     *
     * @param SimpleKey attachment_id
     */
    public void setPrimaryKey(
     SimpleKey attachment_id
                ) 
    {
         setAttachmentId(attachment_id);
    }
    



    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey() 
    {
        return getAttachmentId();
    }

    /**
     * Makes a copy of this object.  
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Attachment copy() throws Exception
    {
        Attachment copyObj = new Attachment();
        copyObj.setAttachmentId(attachment_id);
        copyObj.setIssueId(issue_id);
        copyObj.setTypeId(attachment_type_id);
        copyObj.setName(attachment_name);
        copyObj.setData(attachment_data);
        copyObj.setFilePath(attachment_file_path);
        copyObj.setMimeType(attachment_mime_type);
        copyObj.setModifiedBy(modified_by);
        copyObj.setCreatedBy(created_by);
        copyObj.setModifiedDate(modified_date);
        copyObj.setCreatedDate(created_date);
        copyObj.setDeleted(deleted);


            
        copyObj.setAttachmentId(null);
                                                    return copyObj;
    }             
}

