package org.tigris.scarab.baseom.base;


// JDK classes
import java.util.*;
import java.math.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.StringUtils;
import org.apache.turbine.util.ParameterParser;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

import org.tigris.scarab.baseom.*;
import org.tigris.scarab.baseom.peer.*;

/** 
 * This class was autogenerated by Torque on:
 *
 * [Thu Feb 22 18:38:08 PST 2001]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to TurbineUser 
 */
public abstract class BaseTurbineUser extends BaseObject
{
    /** the value for the user_id field */
    private SimpleKey user_id;


    /**
     * Get the UserId
     * @return SimpleKey
     */
     public SimpleKey getUserId()
     {
          return user_id;
     }

                            
    /**
     * Set the value of UserId
     */
     public void setUserId(SimpleKey v ) throws Exception
     {
  
       
        
                
          // update associated Issue
          if (collIssuesRelatedByCreatedBy != null )
          {
              for (int i=0; i<collIssuesRelatedByCreatedBy.size(); i++)
              {
                  ((Issue)collIssuesRelatedByCreatedBy.get(i))
                      .setCreatedBy(v);
              }
          }
            
        
                
          // update associated Issue
          if (collIssuesRelatedByModifiedBy != null )
          {
              for (int i=0; i<collIssuesRelatedByModifiedBy.size(); i++)
              {
                  ((Issue)collIssuesRelatedByModifiedBy.get(i))
                      .setModifiedBy(v);
              }
          }
            
        
                
          // update associated AttributeValue
          if (collAttributeValues != null )
          {
              for (int i=0; i<collAttributeValues.size(); i++)
              {
                  ((AttributeValue)collAttributeValues.get(i))
                      .setUserId(v);
              }
          }
            
        
                
          // update associated Module
          if (collModulesRelatedByOwnerId != null )
          {
              for (int i=0; i<collModulesRelatedByOwnerId.size(); i++)
              {
                  ((Module)collModulesRelatedByOwnerId.get(i))
                      .setOwnerId(v);
              }
          }
            
        
                
          // update associated Module
          if (collModulesRelatedByQaContactId != null )
          {
              for (int i=0; i<collModulesRelatedByQaContactId.size(); i++)
              {
                  ((Module)collModulesRelatedByQaContactId.get(i))
                      .setQaContactId(v);
              }
          }
            
        
                
          // update associated RModuleUser
          if (collRModuleUsers != null )
          {
              for (int i=0; i<collRModuleUsers.size(); i++)
              {
                  ((RModuleUser)collRModuleUsers.get(i))
                      .setUserId(v);
              }
          }
            
        
                
          // update associated AttributeVote
          if (collAttributeVotes != null )
          {
              for (int i=0; i<collAttributeVotes.size(); i++)
              {
                  ((AttributeVote)collAttributeVotes.get(i))
                      .setUserId(v);
              }
          }
       

         if ( !ObjectUtils.equals(this.user_id, v) )
        {
                       if (this.user_id == null)
            {
                this.user_id = v;
            }
            else
            {
                this.user_id.set(v);
            }
                      setModified(true);
        }
     }

 
    
                    
      
    /**
     * Collection to store aggregation of collIssuesRelatedByCreatedBy
     */
    private Vector collIssuesRelatedByCreatedBy;
    /**
     * Temporary storage of collIssuesRelatedByCreatedBy to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollIssuesRelatedByCreatedBy;

    public void initIssuesRelatedByCreatedBy()
    {
        if (collIssuesRelatedByCreatedBy == null)
            collIssuesRelatedByCreatedBy = new Vector();
    }

    /**
     * Method called to associate a Issue object to this object
     * through the Issue foreign key attribute
     *
     * @param Issue l
     */
    public void addIssuesRelatedByCreatedBy(Issue l) throws Exception
    {
        /*
        if (collIssuesRelatedByCreatedBy == null)
        {
            if (tempcollIssuesRelatedByCreatedBy == null)
            {
                tempcollIssuesRelatedByCreatedBy = new Vector();
            }
            tempcollIssuesRelatedByCreatedBy.add(l);
        }
        else
        {
            collIssuesRelatedByCreatedBy.add(l);
        }
        */
        getIssuesRelatedByCreatedBy().add(l);
        l.setTurbineUserRelatedByCreatedBy((TurbineUser)this);
    }

    /**
     * The criteria used to select the current contents of collIssuesRelatedByCreatedBy
     */
    private Criteria lastIssuesRelatedByCreatedByCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getIssuesRelatedByCreatedBy(new Criteria())
     */
    public Vector getIssuesRelatedByCreatedBy() throws Exception
    {
        if (collIssuesRelatedByCreatedBy == null)
        {
            collIssuesRelatedByCreatedBy = getIssuesRelatedByCreatedBy(new Criteria(10));
        }
        return collIssuesRelatedByCreatedBy;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related IssuesRelatedByCreatedBy from storage.
     */
    public Vector getIssuesRelatedByCreatedBy(Criteria criteria) throws Exception
    {
        if (collIssuesRelatedByCreatedBy == null)
        {
            if ( isNew() ) 
            {
               collIssuesRelatedByCreatedBy = new Vector();       
            } 
            else
            {
                   criteria.add(IssuePeer.CREATED_BY, getUserId() );               
                   collIssuesRelatedByCreatedBy = IssuePeer.doSelect(criteria);
            }
/*
            if (tempcollIssuesRelatedByCreatedBy != null)
            {
                for (int i=0; i<tempcollIssuesRelatedByCreatedBy.size(); i++)
                {
                    collIssuesRelatedByCreatedBy.add(tempcollIssuesRelatedByCreatedBy.get(i));
                }
                tempcollIssuesRelatedByCreatedBy = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(IssuePeer.CREATED_BY, getUserId() );               
               if ( !lastIssuesRelatedByCreatedByCriteria.equals(criteria)  )
            {
                collIssuesRelatedByCreatedBy = IssuePeer.doSelect(criteria);  
            }
        }
        lastIssuesRelatedByCreatedByCriteria = criteria; 

        return collIssuesRelatedByCreatedBy;
    }
     

        
      
      
          
                    
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related IssuesRelatedByCreatedBy from storage.
     */
    public Vector getIssuesRelatedByCreatedByJoinModule(Criteria criteria) 
        throws Exception
    {
        if (collIssuesRelatedByCreatedBy == null)
        {
            if ( isNew() ) 
            {
               collIssuesRelatedByCreatedBy = new Vector();       
            } 
            else
            {
                   criteria.add(IssuePeer.CREATED_BY, getUserId() );               
                   collIssuesRelatedByCreatedBy = IssuePeer.doSelectJoinModule(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(IssuePeer.CREATED_BY, getUserId() );               
               if ( !lastIssuesRelatedByCreatedByCriteria.equals(criteria)  )
            {
                collIssuesRelatedByCreatedBy = IssuePeer.doSelectJoinModule(criteria);
            }
        }
        lastIssuesRelatedByCreatedByCriteria = criteria; 

        return collIssuesRelatedByCreatedBy;
    }
      
      
         
              
                            
                
        
                        
       
      
         
              
                            
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related IssuesRelatedByCreatedBy from storage.
     */
    public Vector getIssuesRelatedByCreatedByJoinTurbineUserRelatedByModifiedBy(Criteria criteria) 
        throws Exception
    {
        if (collIssuesRelatedByCreatedBy == null)
        {
            if ( isNew() ) 
            {
               collIssuesRelatedByCreatedBy = new Vector();       
            } 
            else
            {
                   criteria.add(IssuePeer.CREATED_BY, getUserId() );               
                   collIssuesRelatedByCreatedBy = IssuePeer.doSelectJoinTurbineUserRelatedByModifiedBy(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(IssuePeer.CREATED_BY, getUserId() );               
               if ( !lastIssuesRelatedByCreatedByCriteria.equals(criteria)  )
            {
                collIssuesRelatedByCreatedBy = IssuePeer.doSelectJoinTurbineUserRelatedByModifiedBy(criteria);
            }
        }
        lastIssuesRelatedByCreatedByCriteria = criteria; 

        return collIssuesRelatedByCreatedBy;
    }
     



                 
      
    /**
     * Collection to store aggregation of collIssuesRelatedByModifiedBy
     */
    private Vector collIssuesRelatedByModifiedBy;
    /**
     * Temporary storage of collIssuesRelatedByModifiedBy to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollIssuesRelatedByModifiedBy;

    public void initIssuesRelatedByModifiedBy()
    {
        if (collIssuesRelatedByModifiedBy == null)
            collIssuesRelatedByModifiedBy = new Vector();
    }

    /**
     * Method called to associate a Issue object to this object
     * through the Issue foreign key attribute
     *
     * @param Issue l
     */
    public void addIssuesRelatedByModifiedBy(Issue l) throws Exception
    {
        /*
        if (collIssuesRelatedByModifiedBy == null)
        {
            if (tempcollIssuesRelatedByModifiedBy == null)
            {
                tempcollIssuesRelatedByModifiedBy = new Vector();
            }
            tempcollIssuesRelatedByModifiedBy.add(l);
        }
        else
        {
            collIssuesRelatedByModifiedBy.add(l);
        }
        */
        getIssuesRelatedByModifiedBy().add(l);
        l.setTurbineUserRelatedByModifiedBy((TurbineUser)this);
    }

    /**
     * The criteria used to select the current contents of collIssuesRelatedByModifiedBy
     */
    private Criteria lastIssuesRelatedByModifiedByCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getIssuesRelatedByModifiedBy(new Criteria())
     */
    public Vector getIssuesRelatedByModifiedBy() throws Exception
    {
        if (collIssuesRelatedByModifiedBy == null)
        {
            collIssuesRelatedByModifiedBy = getIssuesRelatedByModifiedBy(new Criteria(10));
        }
        return collIssuesRelatedByModifiedBy;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related IssuesRelatedByModifiedBy from storage.
     */
    public Vector getIssuesRelatedByModifiedBy(Criteria criteria) throws Exception
    {
        if (collIssuesRelatedByModifiedBy == null)
        {
            if ( isNew() ) 
            {
               collIssuesRelatedByModifiedBy = new Vector();       
            } 
            else
            {
                   criteria.add(IssuePeer.MODIFIED_BY, getUserId() );               
                   collIssuesRelatedByModifiedBy = IssuePeer.doSelect(criteria);
            }
/*
            if (tempcollIssuesRelatedByModifiedBy != null)
            {
                for (int i=0; i<tempcollIssuesRelatedByModifiedBy.size(); i++)
                {
                    collIssuesRelatedByModifiedBy.add(tempcollIssuesRelatedByModifiedBy.get(i));
                }
                tempcollIssuesRelatedByModifiedBy = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(IssuePeer.MODIFIED_BY, getUserId() );               
               if ( !lastIssuesRelatedByModifiedByCriteria.equals(criteria)  )
            {
                collIssuesRelatedByModifiedBy = IssuePeer.doSelect(criteria);  
            }
        }
        lastIssuesRelatedByModifiedByCriteria = criteria; 

        return collIssuesRelatedByModifiedBy;
    }
     

        
      
      
          
                    
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related IssuesRelatedByModifiedBy from storage.
     */
    public Vector getIssuesRelatedByModifiedByJoinModule(Criteria criteria) 
        throws Exception
    {
        if (collIssuesRelatedByModifiedBy == null)
        {
            if ( isNew() ) 
            {
               collIssuesRelatedByModifiedBy = new Vector();       
            } 
            else
            {
                   criteria.add(IssuePeer.MODIFIED_BY, getUserId() );               
                   collIssuesRelatedByModifiedBy = IssuePeer.doSelectJoinModule(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(IssuePeer.MODIFIED_BY, getUserId() );               
               if ( !lastIssuesRelatedByModifiedByCriteria.equals(criteria)  )
            {
                collIssuesRelatedByModifiedBy = IssuePeer.doSelectJoinModule(criteria);
            }
        }
        lastIssuesRelatedByModifiedByCriteria = criteria; 

        return collIssuesRelatedByModifiedBy;
    }
      
      
         
              
                            
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related IssuesRelatedByModifiedBy from storage.
     */
    public Vector getIssuesRelatedByModifiedByJoinTurbineUserRelatedByCreatedBy(Criteria criteria) 
        throws Exception
    {
        if (collIssuesRelatedByModifiedBy == null)
        {
            if ( isNew() ) 
            {
               collIssuesRelatedByModifiedBy = new Vector();       
            } 
            else
            {
                   criteria.add(IssuePeer.MODIFIED_BY, getUserId() );               
                   collIssuesRelatedByModifiedBy = IssuePeer.doSelectJoinTurbineUserRelatedByCreatedBy(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(IssuePeer.MODIFIED_BY, getUserId() );               
               if ( !lastIssuesRelatedByModifiedByCriteria.equals(criteria)  )
            {
                collIssuesRelatedByModifiedBy = IssuePeer.doSelectJoinTurbineUserRelatedByCreatedBy(criteria);
            }
        }
        lastIssuesRelatedByModifiedByCriteria = criteria; 

        return collIssuesRelatedByModifiedBy;
    }
      
      
         
              
                            
                
        
                        
      



             
      
    /**
     * Collection to store aggregation of collAttributeValues
     */
    private Vector collAttributeValues;
    /**
     * Temporary storage of collAttributeValues to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollAttributeValues;

    public void initAttributeValues()
    {
        if (collAttributeValues == null)
            collAttributeValues = new Vector();
    }

    /**
     * Method called to associate a AttributeValue object to this object
     * through the AttributeValue foreign key attribute
     *
     * @param AttributeValue l
     */
    public void addAttributeValues(AttributeValue l) throws Exception
    {
        /*
        if (collAttributeValues == null)
        {
            if (tempcollAttributeValues == null)
            {
                tempcollAttributeValues = new Vector();
            }
            tempcollAttributeValues.add(l);
        }
        else
        {
            collAttributeValues.add(l);
        }
        */
        getAttributeValues().add(l);
        l.setTurbineUser((TurbineUser)this);
    }

    /**
     * The criteria used to select the current contents of collAttributeValues
     */
    private Criteria lastAttributeValuesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getAttributeValues(new Criteria())
     */
    public Vector getAttributeValues() throws Exception
    {
        if (collAttributeValues == null)
        {
            collAttributeValues = getAttributeValues(new Criteria(10));
        }
        return collAttributeValues;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related AttributeValues from storage.
     */
    public Vector getAttributeValues(Criteria criteria) throws Exception
    {
        if (collAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeValuePeer.USER_ID, getUserId() );               
                   collAttributeValues = AttributeValuePeer.doSelect(criteria);
            }
/*
            if (tempcollAttributeValues != null)
            {
                for (int i=0; i<tempcollAttributeValues.size(); i++)
                {
                    collAttributeValues.add(tempcollAttributeValues.get(i));
                }
                tempcollAttributeValues = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeValuePeer.USER_ID, getUserId() );               
               if ( !lastAttributeValuesCriteria.equals(criteria)  )
            {
                collAttributeValues = AttributeValuePeer.doSelect(criteria);  
            }
        }
        lastAttributeValuesCriteria = criteria; 

        return collAttributeValues;
    }
      

        
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related AttributeValues from storage.
     */
    public Vector getAttributeValuesJoinIssue(Criteria criteria) 
        throws Exception
    {
        if (collAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeValuePeer.USER_ID, getUserId() );               
                   collAttributeValues = AttributeValuePeer.doSelectJoinIssue(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeValuePeer.USER_ID, getUserId() );               
               if ( !lastAttributeValuesCriteria.equals(criteria)  )
            {
                collAttributeValues = AttributeValuePeer.doSelectJoinIssue(criteria);
            }
        }
        lastAttributeValuesCriteria = criteria; 

        return collAttributeValues;
    }
      
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related AttributeValues from storage.
     */
    public Vector getAttributeValuesJoinAttribute(Criteria criteria) 
        throws Exception
    {
        if (collAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeValuePeer.USER_ID, getUserId() );               
                   collAttributeValues = AttributeValuePeer.doSelectJoinAttribute(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeValuePeer.USER_ID, getUserId() );               
               if ( !lastAttributeValuesCriteria.equals(criteria)  )
            {
                collAttributeValues = AttributeValuePeer.doSelectJoinAttribute(criteria);
            }
        }
        lastAttributeValuesCriteria = criteria; 

        return collAttributeValues;
    }
      
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related AttributeValues from storage.
     */
    public Vector getAttributeValuesJoinAttributeOption(Criteria criteria) 
        throws Exception
    {
        if (collAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeValuePeer.USER_ID, getUserId() );               
                   collAttributeValues = AttributeValuePeer.doSelectJoinAttributeOption(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeValuePeer.USER_ID, getUserId() );               
               if ( !lastAttributeValuesCriteria.equals(criteria)  )
            {
                collAttributeValues = AttributeValuePeer.doSelectJoinAttributeOption(criteria);
            }
        }
        lastAttributeValuesCriteria = criteria; 

        return collAttributeValues;
    }
      
      
         
          
                    
                
        
        
      



                 
      
    /**
     * Collection to store aggregation of collModulesRelatedByOwnerId
     */
    private Vector collModulesRelatedByOwnerId;
    /**
     * Temporary storage of collModulesRelatedByOwnerId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollModulesRelatedByOwnerId;

    public void initModulesRelatedByOwnerId()
    {
        if (collModulesRelatedByOwnerId == null)
            collModulesRelatedByOwnerId = new Vector();
    }

    /**
     * Method called to associate a Module object to this object
     * through the Module foreign key attribute
     *
     * @param Module l
     */
    public void addModulesRelatedByOwnerId(Module l) throws Exception
    {
        /*
        if (collModulesRelatedByOwnerId == null)
        {
            if (tempcollModulesRelatedByOwnerId == null)
            {
                tempcollModulesRelatedByOwnerId = new Vector();
            }
            tempcollModulesRelatedByOwnerId.add(l);
        }
        else
        {
            collModulesRelatedByOwnerId.add(l);
        }
        */
        getModulesRelatedByOwnerId().add(l);
        l.setTurbineUserRelatedByOwnerId((TurbineUser)this);
    }

    /**
     * The criteria used to select the current contents of collModulesRelatedByOwnerId
     */
    private Criteria lastModulesRelatedByOwnerIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getModulesRelatedByOwnerId(new Criteria())
     */
    public Vector getModulesRelatedByOwnerId() throws Exception
    {
        if (collModulesRelatedByOwnerId == null)
        {
            collModulesRelatedByOwnerId = getModulesRelatedByOwnerId(new Criteria(10));
        }
        return collModulesRelatedByOwnerId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related ModulesRelatedByOwnerId from storage.
     */
    public Vector getModulesRelatedByOwnerId(Criteria criteria) throws Exception
    {
        if (collModulesRelatedByOwnerId == null)
        {
            if ( isNew() ) 
            {
               collModulesRelatedByOwnerId = new Vector();       
            } 
            else
            {
                   criteria.add(ModulePeer.OWNER_ID, getUserId() );               
                   collModulesRelatedByOwnerId = ModulePeer.doSelect(criteria);
            }
/*
            if (tempcollModulesRelatedByOwnerId != null)
            {
                for (int i=0; i<tempcollModulesRelatedByOwnerId.size(); i++)
                {
                    collModulesRelatedByOwnerId.add(tempcollModulesRelatedByOwnerId.get(i));
                }
                tempcollModulesRelatedByOwnerId = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ModulePeer.OWNER_ID, getUserId() );               
               if ( !lastModulesRelatedByOwnerIdCriteria.equals(criteria)  )
            {
                collModulesRelatedByOwnerId = ModulePeer.doSelect(criteria);  
            }
        }
        lastModulesRelatedByOwnerIdCriteria = criteria; 

        return collModulesRelatedByOwnerId;
    }
     

        
      
      
          
                    
                    
        
                
       
      
         
              
                            
                
        
                        
       
      
         
              
                            
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related ModulesRelatedByOwnerId from storage.
     */
    public Vector getModulesRelatedByOwnerIdJoinTurbineUserRelatedByQaContactId(Criteria criteria) 
        throws Exception
    {
        if (collModulesRelatedByOwnerId == null)
        {
            if ( isNew() ) 
            {
               collModulesRelatedByOwnerId = new Vector();       
            } 
            else
            {
                   criteria.add(ModulePeer.OWNER_ID, getUserId() );               
                   collModulesRelatedByOwnerId = ModulePeer.doSelectJoinTurbineUserRelatedByQaContactId(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ModulePeer.OWNER_ID, getUserId() );               
               if ( !lastModulesRelatedByOwnerIdCriteria.equals(criteria)  )
            {
                collModulesRelatedByOwnerId = ModulePeer.doSelectJoinTurbineUserRelatedByQaContactId(criteria);
            }
        }
        lastModulesRelatedByOwnerIdCriteria = criteria; 

        return collModulesRelatedByOwnerId;
    }
     



                 
      
    /**
     * Collection to store aggregation of collModulesRelatedByQaContactId
     */
    private Vector collModulesRelatedByQaContactId;
    /**
     * Temporary storage of collModulesRelatedByQaContactId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollModulesRelatedByQaContactId;

    public void initModulesRelatedByQaContactId()
    {
        if (collModulesRelatedByQaContactId == null)
            collModulesRelatedByQaContactId = new Vector();
    }

    /**
     * Method called to associate a Module object to this object
     * through the Module foreign key attribute
     *
     * @param Module l
     */
    public void addModulesRelatedByQaContactId(Module l) throws Exception
    {
        /*
        if (collModulesRelatedByQaContactId == null)
        {
            if (tempcollModulesRelatedByQaContactId == null)
            {
                tempcollModulesRelatedByQaContactId = new Vector();
            }
            tempcollModulesRelatedByQaContactId.add(l);
        }
        else
        {
            collModulesRelatedByQaContactId.add(l);
        }
        */
        getModulesRelatedByQaContactId().add(l);
        l.setTurbineUserRelatedByQaContactId((TurbineUser)this);
    }

    /**
     * The criteria used to select the current contents of collModulesRelatedByQaContactId
     */
    private Criteria lastModulesRelatedByQaContactIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getModulesRelatedByQaContactId(new Criteria())
     */
    public Vector getModulesRelatedByQaContactId() throws Exception
    {
        if (collModulesRelatedByQaContactId == null)
        {
            collModulesRelatedByQaContactId = getModulesRelatedByQaContactId(new Criteria(10));
        }
        return collModulesRelatedByQaContactId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related ModulesRelatedByQaContactId from storage.
     */
    public Vector getModulesRelatedByQaContactId(Criteria criteria) throws Exception
    {
        if (collModulesRelatedByQaContactId == null)
        {
            if ( isNew() ) 
            {
               collModulesRelatedByQaContactId = new Vector();       
            } 
            else
            {
                   criteria.add(ModulePeer.QA_CONTACT_ID, getUserId() );               
                   collModulesRelatedByQaContactId = ModulePeer.doSelect(criteria);
            }
/*
            if (tempcollModulesRelatedByQaContactId != null)
            {
                for (int i=0; i<tempcollModulesRelatedByQaContactId.size(); i++)
                {
                    collModulesRelatedByQaContactId.add(tempcollModulesRelatedByQaContactId.get(i));
                }
                tempcollModulesRelatedByQaContactId = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ModulePeer.QA_CONTACT_ID, getUserId() );               
               if ( !lastModulesRelatedByQaContactIdCriteria.equals(criteria)  )
            {
                collModulesRelatedByQaContactId = ModulePeer.doSelect(criteria);  
            }
        }
        lastModulesRelatedByQaContactIdCriteria = criteria; 

        return collModulesRelatedByQaContactId;
    }
     

        
      
      
          
                    
                    
        
                
       
      
         
              
                            
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related ModulesRelatedByQaContactId from storage.
     */
    public Vector getModulesRelatedByQaContactIdJoinTurbineUserRelatedByOwnerId(Criteria criteria) 
        throws Exception
    {
        if (collModulesRelatedByQaContactId == null)
        {
            if ( isNew() ) 
            {
               collModulesRelatedByQaContactId = new Vector();       
            } 
            else
            {
                   criteria.add(ModulePeer.QA_CONTACT_ID, getUserId() );               
                   collModulesRelatedByQaContactId = ModulePeer.doSelectJoinTurbineUserRelatedByOwnerId(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ModulePeer.QA_CONTACT_ID, getUserId() );               
               if ( !lastModulesRelatedByQaContactIdCriteria.equals(criteria)  )
            {
                collModulesRelatedByQaContactId = ModulePeer.doSelectJoinTurbineUserRelatedByOwnerId(criteria);
            }
        }
        lastModulesRelatedByQaContactIdCriteria = criteria; 

        return collModulesRelatedByQaContactId;
    }
      
      
         
              
                            
                
        
                        
      



             
      
    /**
     * Collection to store aggregation of collRModuleUsers
     */
    private Vector collRModuleUsers;
    /**
     * Temporary storage of collRModuleUsers to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollRModuleUsers;

    public void initRModuleUsers()
    {
        if (collRModuleUsers == null)
            collRModuleUsers = new Vector();
    }

    /**
     * Method called to associate a RModuleUser object to this object
     * through the RModuleUser foreign key attribute
     *
     * @param RModuleUser l
     */
    public void addRModuleUsers(RModuleUser l) throws Exception
    {
        /*
        if (collRModuleUsers == null)
        {
            if (tempcollRModuleUsers == null)
            {
                tempcollRModuleUsers = new Vector();
            }
            tempcollRModuleUsers.add(l);
        }
        else
        {
            collRModuleUsers.add(l);
        }
        */
        getRModuleUsers().add(l);
        l.setTurbineUser((TurbineUser)this);
    }

    /**
     * The criteria used to select the current contents of collRModuleUsers
     */
    private Criteria lastRModuleUsersCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getRModuleUsers(new Criteria())
     */
    public Vector getRModuleUsers() throws Exception
    {
        if (collRModuleUsers == null)
        {
            collRModuleUsers = getRModuleUsers(new Criteria(10));
        }
        return collRModuleUsers;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related RModuleUsers from storage.
     */
    public Vector getRModuleUsers(Criteria criteria) throws Exception
    {
        if (collRModuleUsers == null)
        {
            if ( isNew() ) 
            {
               collRModuleUsers = new Vector();       
            } 
            else
            {
                   criteria.add(RModuleUserPeer.USER_ID, getUserId() );               
                   collRModuleUsers = RModuleUserPeer.doSelect(criteria);
            }
/*
            if (tempcollRModuleUsers != null)
            {
                for (int i=0; i<tempcollRModuleUsers.size(); i++)
                {
                    collRModuleUsers.add(tempcollRModuleUsers.get(i));
                }
                tempcollRModuleUsers = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(RModuleUserPeer.USER_ID, getUserId() );               
               if ( !lastRModuleUsersCriteria.equals(criteria)  )
            {
                collRModuleUsers = RModuleUserPeer.doSelect(criteria);  
            }
        }
        lastRModuleUsersCriteria = criteria; 

        return collRModuleUsers;
    }
    

        
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related RModuleUsers from storage.
     */
    public Vector getRModuleUsersJoinModule(Criteria criteria) 
        throws Exception
    {
        if (collRModuleUsers == null)
        {
            if ( isNew() ) 
            {
               collRModuleUsers = new Vector();       
            } 
            else
            {
                   criteria.add(RModuleUserPeer.USER_ID, getUserId() );               
                   collRModuleUsers = RModuleUserPeer.doSelectJoinModule(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(RModuleUserPeer.USER_ID, getUserId() );               
               if ( !lastRModuleUsersCriteria.equals(criteria)  )
            {
                collRModuleUsers = RModuleUserPeer.doSelectJoinModule(criteria);
            }
        }
        lastRModuleUsersCriteria = criteria; 

        return collRModuleUsers;
    }
      
      
         
          
                    
                
        
        
      



             
      
    /**
     * Collection to store aggregation of collAttributeVotes
     */
    private Vector collAttributeVotes;
    /**
     * Temporary storage of collAttributeVotes to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollAttributeVotes;

    public void initAttributeVotes()
    {
        if (collAttributeVotes == null)
            collAttributeVotes = new Vector();
    }

    /**
     * Method called to associate a AttributeVote object to this object
     * through the AttributeVote foreign key attribute
     *
     * @param AttributeVote l
     */
    public void addAttributeVotes(AttributeVote l) throws Exception
    {
        /*
        if (collAttributeVotes == null)
        {
            if (tempcollAttributeVotes == null)
            {
                tempcollAttributeVotes = new Vector();
            }
            tempcollAttributeVotes.add(l);
        }
        else
        {
            collAttributeVotes.add(l);
        }
        */
        getAttributeVotes().add(l);
        l.setTurbineUser((TurbineUser)this);
    }

    /**
     * The criteria used to select the current contents of collAttributeVotes
     */
    private Criteria lastAttributeVotesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getAttributeVotes(new Criteria())
     */
    public Vector getAttributeVotes() throws Exception
    {
        if (collAttributeVotes == null)
        {
            collAttributeVotes = getAttributeVotes(new Criteria(10));
        }
        return collAttributeVotes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related AttributeVotes from storage.
     */
    public Vector getAttributeVotes(Criteria criteria) throws Exception
    {
        if (collAttributeVotes == null)
        {
            if ( isNew() ) 
            {
               collAttributeVotes = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeVotePeer.USER_ID, getUserId() );               
                   collAttributeVotes = AttributeVotePeer.doSelect(criteria);
            }
/*
            if (tempcollAttributeVotes != null)
            {
                for (int i=0; i<tempcollAttributeVotes.size(); i++)
                {
                    collAttributeVotes.add(tempcollAttributeVotes.get(i));
                }
                tempcollAttributeVotes = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeVotePeer.USER_ID, getUserId() );               
               if ( !lastAttributeVotesCriteria.equals(criteria)  )
            {
                collAttributeVotes = AttributeVotePeer.doSelect(criteria);  
            }
        }
        lastAttributeVotesCriteria = criteria; 

        return collAttributeVotes;
    }
     

        
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related AttributeVotes from storage.
     */
    public Vector getAttributeVotesJoinAttributeOption(Criteria criteria) 
        throws Exception
    {
        if (collAttributeVotes == null)
        {
            if ( isNew() ) 
            {
               collAttributeVotes = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeVotePeer.USER_ID, getUserId() );               
                   collAttributeVotes = AttributeVotePeer.doSelectJoinAttributeOption(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeVotePeer.USER_ID, getUserId() );               
               if ( !lastAttributeVotesCriteria.equals(criteria)  )
            {
                collAttributeVotes = AttributeVotePeer.doSelectJoinAttributeOption(criteria);
            }
        }
        lastAttributeVotesCriteria = criteria; 

        return collAttributeVotes;
    }
      
      
      
                 
                                
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this TurbineUser is new, it will return
     * an empty collection; or if this TurbineUser has previously
     * been saved, it will retrieve related AttributeVotes from storage.
     */
    public Vector getAttributeVotesJoinAttributeValue(Criteria criteria) 
        throws Exception
    {
        if (collAttributeVotes == null)
        {
            if ( isNew() ) 
            {
               collAttributeVotes = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeVotePeer.USER_ID, getUserId() );               
                   collAttributeVotes = AttributeVotePeer.doSelectJoinAttributeValue(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeVotePeer.USER_ID, getUserId() );               
               if ( !lastAttributeVotesCriteria.equals(criteria)  )
            {
                collAttributeVotes = AttributeVotePeer.doSelectJoinAttributeValue(criteria);
            }
        }
        lastAttributeVotesCriteria = criteria; 

        return collAttributeVotes;
    }
      
      
         
          
                    
                
        
        
      



     
    
    private static Vector fieldNames_ = null;

    /**
     * Generate a list of field names.
     */
    public static Vector getFieldNames()
    {
      if (fieldNames_ == null)
      {
        fieldNames_ = new Vector();
            fieldNames_.add("UserId");
          }
      return fieldNames_;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.
     */
    public Object getByName(String name)
    {
            if (name.equals("UserId"))
	{
	  	    return getUserId();
	  	}
            return null; 
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     */
    public Object getByPeerName(String name)
    {
            if (name == TurbineUserPeer.USER_ID )
	    {
	  	    return getUserId();
	  	}
            return null; 
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     */
    public Object getByPosition(int pos)
    {
            if ( pos == 0 )
	{
	  	    return getUserId();
	  	}
                return null; 
    }

     	

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                TurbineUserPeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                TurbineUserPeer.doInsert((TurbineUser)this, dbCon);
            }
            else
            {
                TurbineUserPeer.doUpdate((TurbineUser)this, dbCon);
                setNew(false);
            }
        }

                                                
                
          if (collIssuesRelatedByCreatedBy != null )
          {
              for (int i=0; i<collIssuesRelatedByCreatedBy.size(); i++)
              {
                  ((Issue)collIssuesRelatedByCreatedBy.get(i)).save(dbCon);
              }
          }
                                                    
                
          if (collIssuesRelatedByModifiedBy != null )
          {
              for (int i=0; i<collIssuesRelatedByModifiedBy.size(); i++)
              {
                  ((Issue)collIssuesRelatedByModifiedBy.get(i)).save(dbCon);
              }
          }
                                        
                
          if (collAttributeValues != null )
          {
              for (int i=0; i<collAttributeValues.size(); i++)
              {
                  ((AttributeValue)collAttributeValues.get(i)).save(dbCon);
              }
          }
                                                    
                
          if (collModulesRelatedByOwnerId != null )
          {
              for (int i=0; i<collModulesRelatedByOwnerId.size(); i++)
              {
                  ((Module)collModulesRelatedByOwnerId.get(i)).save(dbCon);
              }
          }
                                                    
                
          if (collModulesRelatedByQaContactId != null )
          {
              for (int i=0; i<collModulesRelatedByQaContactId.size(); i++)
              {
                  ((Module)collModulesRelatedByQaContactId.get(i)).save(dbCon);
              }
          }
                                        
                
          if (collRModuleUsers != null )
          {
              for (int i=0; i<collRModuleUsers.size(); i++)
              {
                  ((RModuleUser)collRModuleUsers.get(i)).save(dbCon);
              }
          }
                                        
                
          if (collAttributeVotes != null )
          {
              for (int i=0; i<collAttributeVotes.size(); i++)
              {
                  ((AttributeVote)collAttributeVotes.get(i)).save(dbCon);
              }
          }
                  alreadyInSave = false;
      }
      }

                                    
    /** 
     * Set the Id using pk values.
     *
     * @param SimpleKey user_id
     */
    public void setPrimaryKey(
     SimpleKey user_id
                ) throws Exception
    {
         setUserId(user_id);
    }
    



    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey() 
    {
        return getUserId();
    }

    /**
     * Makes a copy of this object.  
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public TurbineUser copy() throws Exception
    {
        TurbineUser copyObj = new TurbineUser();
        copyObj.setUserId(user_id);

                                            
                
         List v = copyObj.getIssuesRelatedByCreatedBy();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
                                                        
                
         v = copyObj.getIssuesRelatedByModifiedBy();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
                                            
                
         v = copyObj.getAttributeValues();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
                                                        
                
         v = copyObj.getModulesRelatedByOwnerId();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
                                                        
                
         v = copyObj.getModulesRelatedByQaContactId();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
                                            
                
         v = copyObj.getRModuleUsers();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
                                            
                
         v = copyObj.getAttributeVotes();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
            
            
        copyObj.setUserId(null);
        return copyObj;
    }             
}

