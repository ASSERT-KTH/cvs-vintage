package org.tigris.scarab.baseom.base;


// JDK classes
import java.util.*;
import java.math.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.StringUtils;
import org.apache.turbine.util.ParameterParser;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

import org.tigris.scarab.baseom.*;
import org.tigris.scarab.baseom.peer.*;

/** 
 * This class was autogenerated by Torque on:
 *
 * [Thu Feb 22 18:38:08 PST 2001]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to RModuleUser 
 */
public abstract class BaseRModuleUser extends BaseObject
{
    /** the value for the module_id field */
    private SimpleKey module_id;
    /** the value for the user_id field */
    private SimpleKey user_id;
    /** the value for the deleted field */
    private boolean deleted;


    /**
     * Get the ModuleId
     * @return SimpleKey
     */
     public SimpleKey getModuleId()
     {
          return module_id;
     }

                        
    /**
     * Set the value of ModuleId
     */
     public void setModuleId(SimpleKey v ) throws Exception
     {
                  if ( aModule != null && !aModule.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
       
        
                
          // update associated RModuleUserRole
          if (collRModuleUserRoles != null )
          {
              for (int i=0; i<collRModuleUserRoles.size(); i++)
              {
                  ((RModuleUserRole)collRModuleUserRoles.get(i))
                      .setModuleId(v);
              }
          }
       

         if ( !ObjectUtils.equals(this.module_id, v) )
        {
                       if (this.module_id == null)
            {
                this.module_id = v;
            }
            else
            {
                this.module_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the UserId
     * @return SimpleKey
     */
     public SimpleKey getUserId()
     {
          return user_id;
     }

                        
    /**
     * Set the value of UserId
     */
     public void setUserId(SimpleKey v ) throws Exception
     {
                  if ( aTurbineUser != null && !aTurbineUser.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
       
        
                
          // update associated RModuleUserRole
          if (collRModuleUserRoles != null )
          {
              for (int i=0; i<collRModuleUserRoles.size(); i++)
              {
                  ((RModuleUserRole)collRModuleUserRoles.get(i))
                      .setUserId(v);
              }
          }
       

         if ( !ObjectUtils.equals(this.user_id, v) )
        {
                       if (this.user_id == null)
            {
                this.user_id = v;
            }
            else
            {
                this.user_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the Deleted
     * @return boolean
     */
     public boolean getDeleted()
     {
          return deleted;
     }

        
    /**
     * Set the value of Deleted
     */
     public void setDeleted(boolean v ) 
     {
  
  

         if (this.deleted != v)
        {
                       this.deleted = v;
                      setModified(true);
        }
     }

 
 
   
             
   
   
    /**
     * Declares an association between this object and a Module object
     *
     * @param Module v
     */
    private Module aModule;
    public void setModule(Module v) throws Exception
    {
        aModule = null;
           setModuleId(v.getModuleId());
           aModule = v;
    }

                     
    public Module getModule() throws Exception
    {
        if ( aModule==null && (!ObjectUtils.equals(this.module_id, null)) )
        {
            aModule = ModulePeer.retrieveByPK(this.module_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // Module obj = ModulePeer.retrieveByPK(this.module_id);
            // obj.addRModuleUsers(this);
        }
        return aModule;
    }

 
   
             
   
   
    /**
     * Declares an association between this object and a TurbineUser object
     *
     * @param TurbineUser v
     */
    private TurbineUser aTurbineUser;
    public void setTurbineUser(TurbineUser v) throws Exception
    {
        aTurbineUser = null;
           setUserId(v.getUserId());
           aTurbineUser = v;
    }

                     
    public TurbineUser getTurbineUser() throws Exception
    {
        if ( aTurbineUser==null && (!ObjectUtils.equals(this.user_id, null)) )
        {
            aTurbineUser = TurbineUserPeer.retrieveByPK(this.user_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // TurbineUser obj = TurbineUserPeer.retrieveByPK(this.user_id);
            // obj.addRModuleUsers(this);
        }
        return aTurbineUser;
    }

    
                       
      
    /**
     * Collection to store aggregation of collRModuleUserRoles
     */
    private Vector collRModuleUserRoles;
    /**
     * Temporary storage of collRModuleUserRoles to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollRModuleUserRoles;

    public void initRModuleUserRoles()
    {
        if (collRModuleUserRoles == null)
            collRModuleUserRoles = new Vector();
    }

    /**
     * Method called to associate a RModuleUserRole object to this object
     * through the RModuleUserRole foreign key attribute
     *
     * @param RModuleUserRole l
     */
    public void addRModuleUserRoles(RModuleUserRole l) throws Exception
    {
        /*
        if (collRModuleUserRoles == null)
        {
            if (tempcollRModuleUserRoles == null)
            {
                tempcollRModuleUserRoles = new Vector();
            }
            tempcollRModuleUserRoles.add(l);
        }
        else
        {
            collRModuleUserRoles.add(l);
        }
        */
        getRModuleUserRoles().add(l);
        l.setRModuleUser((RModuleUser)this);
    }

    /**
     * The criteria used to select the current contents of collRModuleUserRoles
     */
    private Criteria lastRModuleUserRolesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getRModuleUserRoles(new Criteria())
     */
    public Vector getRModuleUserRoles() throws Exception
    {
        if (collRModuleUserRoles == null)
        {
            collRModuleUserRoles = getRModuleUserRoles(new Criteria(10));
        }
        return collRModuleUserRoles;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this RModuleUser is new, it will return
     * an empty collection; or if this RModuleUser has previously
     * been saved, it will retrieve related RModuleUserRoles from storage.
     */
    public Vector getRModuleUserRoles(Criteria criteria) throws Exception
    {
        if (collRModuleUserRoles == null)
        {
            if ( isNew() ) 
            {
               collRModuleUserRoles = new Vector();       
            } 
            else
            {
                   criteria.add(RModuleUserRolePeer.MODULE_ID, getModuleId() );               
                   criteria.add(RModuleUserRolePeer.USER_ID, getUserId() );               
                   collRModuleUserRoles = RModuleUserRolePeer.doSelect(criteria);
            }
/*
            if (tempcollRModuleUserRoles != null)
            {
                for (int i=0; i<tempcollRModuleUserRoles.size(); i++)
                {
                    collRModuleUserRoles.add(tempcollRModuleUserRoles.get(i));
                }
                tempcollRModuleUserRoles = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(RModuleUserRolePeer.MODULE_ID, getModuleId() );               
                   criteria.add(RModuleUserRolePeer.USER_ID, getUserId() );               
               if ( !lastRModuleUserRolesCriteria.equals(criteria)  )
            {
                collRModuleUserRoles = RModuleUserRolePeer.doSelect(criteria);  
            }
        }
        lastRModuleUserRolesCriteria = criteria; 

        return collRModuleUserRoles;
    }
   

        
      
         
                 
                                
                
        
        
      



     
    
    private static Vector fieldNames_ = null;

    /**
     * Generate a list of field names.
     */
    public static Vector getFieldNames()
    {
      if (fieldNames_ == null)
      {
        fieldNames_ = new Vector();
            fieldNames_.add("ModuleId");
            fieldNames_.add("UserId");
            fieldNames_.add("Deleted");
          }
      return fieldNames_;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.
     */
    public Object getByName(String name)
    {
            if (name.equals("ModuleId"))
	{
	  	    return getModuleId();
	  	}
            if (name.equals("UserId"))
	{
	  	    return getUserId();
	  	}
            if (name.equals("Deleted"))
	{
	  	    return new Boolean(getDeleted());
	  	}
            return null; 
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     */
    public Object getByPeerName(String name)
    {
            if (name == RModuleUserPeer.MODULE_ID )
	    {
	  	    return getModuleId();
	  	}
            if (name == RModuleUserPeer.USER_ID )
	    {
	  	    return getUserId();
	  	}
            if (name == RModuleUserPeer.DELETED )
	    {
	  	    return new Boolean(getDeleted());
	  	}
            return null; 
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     */
    public Object getByPosition(int pos)
    {
            if ( pos == 0 )
	{
	  	    return getModuleId();
	  	}
            if ( pos == 1 )
	{
	  	    return getUserId();
	  	}
            if ( pos == 2 )
	{
	  	    return new Boolean(getDeleted());
	  	}
                return null; 
    }

     	

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                RModuleUserPeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                RModuleUserPeer.doInsert((RModuleUser)this, dbCon);
            }
            else
            {
                RModuleUserPeer.doUpdate((RModuleUser)this, dbCon);
                setNew(false);
            }
        }

                                                        
                
          if (collRModuleUserRoles != null )
          {
              for (int i=0; i<collRModuleUserRoles.size(); i++)
              {
                  ((RModuleUserRole)collRModuleUserRoles.get(i)).save(dbCon);
              }
          }
                  alreadyInSave = false;
      }
      }

                                                                    
    /** 
     * Set the Id using pk values.
     *
     * @param SimpleKey module_id
     * @param SimpleKey user_id
     */
    public void setPrimaryKey(
     SimpleKey module_id
            , SimpleKey user_id
                ) throws Exception
    {
         setModuleId(module_id);
         setUserId(user_id);
    }
    


    private final SimpleKey[] pks = new SimpleKey[2];
    private final ComboKey comboPK = new ComboKey(pks);
    /** 
     * Set the PrimaryKey with an ObjectKey
     */
    public void setPrimaryKey(ComboKey key) throws Exception
    {
        //if (key.getInternalObject() instanceof SimpleKey[])
        //{
            SimpleKey[] keys = (SimpleKey[])key.getInternalObject();
                    setModuleId(keys[0]);
                        setUserId(keys[1]);
                
    }

    /** 
     * Set the PrimaryKey using a String.
     */
    public void setPrimaryKey(String key) throws Exception
    {
        int prevPos = 0;

                  int colonPos = key.indexOf(':', prevPos);
        setModuleId( new SimpleKey(key.substring(prevPos, colonPos)) );
        prevPos = colonPos + 1;
                     colonPos = key.indexOf(':', prevPos);
        setUserId( new SimpleKey(key.substring(prevPos, colonPos)) );
        prevPos = colonPos + 1;
                 }



    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey() 
    {
            pks[0] = getModuleId();
                    pks[1] = getUserId();
                    return comboPK;
    }

    /**
     * Makes a copy of this object.  
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public RModuleUser copy() throws Exception
    {
        RModuleUser copyObj = new RModuleUser();
        copyObj.setModuleId(module_id);
        copyObj.setUserId(user_id);
        copyObj.setDeleted(deleted);

                                                    
                
         List v = copyObj.getRModuleUserRoles();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
            
            
        copyObj.setModuleId(null);
                
        copyObj.setUserId(null);
            return copyObj;
    }             
}

