package org.tigris.scarab.baseom.base;


// JDK classes
import java.util.*;
import java.math.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.StringUtils;
import org.apache.turbine.util.ParameterParser;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

import org.tigris.scarab.baseom.*;
import org.tigris.scarab.baseom.peer.*;

/** 
 * This class was autogenerated by Torque on:
 *
 * [Thu Feb 22 18:38:08 PST 2001]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to AttributeType 
 */
public abstract class BaseAttributeType extends BaseObject
{
    /** the value for the attribute_type_id field */
    private SimpleKey attribute_type_id;
    /** the value for the attribute_class_id field */
    private SimpleKey attribute_class_id;
    /** the value for the attribute_type_name field */
    private String attribute_type_name;
    /** the value for the java_class_name field */
    private String java_class_name;


    /**
     * Get the AttributeTypeId
     * @return SimpleKey
     */
     public SimpleKey getAttributeTypeId()
     {
          return attribute_type_id;
     }

                            
    /**
     * Set the value of AttributeTypeId
     */
     public void setAttributeTypeId(SimpleKey v ) throws Exception
     {
  
       
        
                
          // update associated Attribute
          if (collAttributes != null )
          {
              for (int i=0; i<collAttributes.size(); i++)
              {
                  ((Attribute)collAttributes.get(i))
                      .setTypeId(v);
              }
          }
       

         if ( !ObjectUtils.equals(this.attribute_type_id, v) )
        {
                       if (this.attribute_type_id == null)
            {
                this.attribute_type_id = v;
            }
            else
            {
                this.attribute_type_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the ClassId
     * @return SimpleKey
     */
     public SimpleKey getClassId()
     {
          return attribute_class_id;
     }

            
    /**
     * Set the value of ClassId
     */
     public void setClassId(SimpleKey v ) throws Exception
     {
                  if ( aAttributeClass != null && !aAttributeClass.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

         if ( !ObjectUtils.equals(this.attribute_class_id, v) )
        {
                       if (this.attribute_class_id == null)
            {
                this.attribute_class_id = v;
            }
            else
            {
                this.attribute_class_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the Name
     * @return String
     */
     public String getName()
     {
          return attribute_type_name;
     }

        
    /**
     * Set the value of Name
     */
     public void setName(String v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.attribute_type_name, v) )
        {
                       this.attribute_type_name = v;
                      setModified(true);
        }
     }
    /**
     * Get the JavaClassName
     * @return String
     */
     public String getJavaClassName()
     {
          return java_class_name;
     }

        
    /**
     * Set the value of JavaClassName
     */
     public void setJavaClassName(String v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.java_class_name, v) )
        {
                       this.java_class_name = v;
                      setModified(true);
        }
     }

 
 
   
             
   
   
    /**
     * Declares an association between this object and a AttributeClass object
     *
     * @param AttributeClass v
     */
    private AttributeClass aAttributeClass;
    public void setAttributeClass(AttributeClass v) throws Exception
    {
        aAttributeClass = null;
           setClassId(v.getAttributeClassId());
           aAttributeClass = v;
    }

                     
    public AttributeClass getAttributeClass() throws Exception
    {
        if ( aAttributeClass==null && (!ObjectUtils.equals(this.attribute_class_id, null)) )
        {
            aAttributeClass = AttributeClassPeer.retrieveByPK(this.attribute_class_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // AttributeClass obj = AttributeClassPeer.retrieveByPK(this.attribute_class_id);
            // obj.addAttributeTypes(this);
        }
        return aAttributeClass;
    }

    
                
      
    /**
     * Collection to store aggregation of collAttributes
     */
    private Vector collAttributes;
    /**
     * Temporary storage of collAttributes to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollAttributes;

    public void initAttributes()
    {
        if (collAttributes == null)
            collAttributes = new Vector();
    }

    /**
     * Method called to associate a Attribute object to this object
     * through the Attribute foreign key attribute
     *
     * @param Attribute l
     */
    public void addAttributes(Attribute l) throws Exception
    {
        /*
        if (collAttributes == null)
        {
            if (tempcollAttributes == null)
            {
                tempcollAttributes = new Vector();
            }
            tempcollAttributes.add(l);
        }
        else
        {
            collAttributes.add(l);
        }
        */
        getAttributes().add(l);
        l.setAttributeType((AttributeType)this);
    }

    /**
     * The criteria used to select the current contents of collAttributes
     */
    private Criteria lastAttributesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getAttributes(new Criteria())
     */
    public Vector getAttributes() throws Exception
    {
        if (collAttributes == null)
        {
            collAttributes = getAttributes(new Criteria(10));
        }
        return collAttributes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this AttributeType is new, it will return
     * an empty collection; or if this AttributeType has previously
     * been saved, it will retrieve related Attributes from storage.
     */
    public Vector getAttributes(Criteria criteria) throws Exception
    {
        if (collAttributes == null)
        {
            if ( isNew() ) 
            {
               collAttributes = new Vector();       
            } 
            else
            {
                   criteria.add(AttributePeer.ATTRIBUTE_TYPE_ID, getAttributeTypeId() );               
                   collAttributes = AttributePeer.doSelect(criteria);
            }
/*
            if (tempcollAttributes != null)
            {
                for (int i=0; i<tempcollAttributes.size(); i++)
                {
                    collAttributes.add(tempcollAttributes.get(i));
                }
                tempcollAttributes = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributePeer.ATTRIBUTE_TYPE_ID, getAttributeTypeId() );               
               if ( !lastAttributesCriteria.equals(criteria)  )
            {
                collAttributes = AttributePeer.doSelect(criteria);  
            }
        }
        lastAttributesCriteria = criteria; 

        return collAttributes;
    }
   

        
      
         
          
                    
                
        
        
      



     
    
    private static Vector fieldNames_ = null;

    /**
     * Generate a list of field names.
     */
    public static Vector getFieldNames()
    {
      if (fieldNames_ == null)
      {
        fieldNames_ = new Vector();
            fieldNames_.add("AttributeTypeId");
            fieldNames_.add("ClassId");
            fieldNames_.add("Name");
            fieldNames_.add("JavaClassName");
          }
      return fieldNames_;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.
     */
    public Object getByName(String name)
    {
            if (name.equals("AttributeTypeId"))
	{
	  	    return getAttributeTypeId();
	  	}
            if (name.equals("ClassId"))
	{
	  	    return getClassId();
	  	}
            if (name.equals("Name"))
	{
	  	    return getName();
	  	}
            if (name.equals("JavaClassName"))
	{
	  	    return getJavaClassName();
	  	}
            return null; 
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     */
    public Object getByPeerName(String name)
    {
            if (name == AttributeTypePeer.ATTRIBUTE_TYPE_ID )
	    {
	  	    return getAttributeTypeId();
	  	}
            if (name == AttributeTypePeer.ATTRIBUTE_CLASS_ID )
	    {
	  	    return getClassId();
	  	}
            if (name == AttributeTypePeer.ATTRIBUTE_TYPE_NAME )
	    {
	  	    return getName();
	  	}
            if (name == AttributeTypePeer.JAVA_CLASS_NAME )
	    {
	  	    return getJavaClassName();
	  	}
            return null; 
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     */
    public Object getByPosition(int pos)
    {
            if ( pos == 0 )
	{
	  	    return getAttributeTypeId();
	  	}
            if ( pos == 1 )
	{
	  	    return getClassId();
	  	}
            if ( pos == 2 )
	{
	  	    return getName();
	  	}
            if ( pos == 3 )
	{
	  	    return getJavaClassName();
	  	}
                return null; 
    }

     	

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                AttributeTypePeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                AttributeTypePeer.doInsert((AttributeType)this, dbCon);
            }
            else
            {
                AttributeTypePeer.doUpdate((AttributeType)this, dbCon);
                setNew(false);
            }
        }

                                    
                
          if (collAttributes != null )
          {
              for (int i=0; i<collAttributes.size(); i++)
              {
                  ((Attribute)collAttributes.get(i)).save(dbCon);
              }
          }
                  alreadyInSave = false;
      }
      }

                                                
    /** 
     * Set the Id using pk values.
     *
     * @param SimpleKey attribute_type_id
     */
    public void setPrimaryKey(
     SimpleKey attribute_type_id
                ) throws Exception
    {
         setAttributeTypeId(attribute_type_id);
    }
    



    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey() 
    {
        return getAttributeTypeId();
    }

    /**
     * Makes a copy of this object.  
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public AttributeType copy() throws Exception
    {
        AttributeType copyObj = new AttributeType();
        copyObj.setAttributeTypeId(attribute_type_id);
        copyObj.setClassId(attribute_class_id);
        copyObj.setName(attribute_type_name);
        copyObj.setJavaClassName(java_class_name);

                                
                
         List v = copyObj.getAttributes();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
            
            
        copyObj.setAttributeTypeId(null);
                    return copyObj;
    }             
}

