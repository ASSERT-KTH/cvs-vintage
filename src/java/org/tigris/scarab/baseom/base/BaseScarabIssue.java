package org.tigris.scarab.baseom.base;


// JDK classes
import java.util.*;
import java.math.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

import org.tigris.scarab.baseom.*;
import org.tigris.scarab.baseom.peer.*;

/** 
 * This class was autogenerated by Torque on:
 *
 * [Thu Feb 15 16:11:32 PST 2001]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to ScarabIssue 
 */
public abstract class BaseScarabIssue extends BaseObject
{
    /** the value for the issue_id field */
    private int issue_id;
    /** the value for the module_id field */
    private int module_id;
    /** the value for the modified_by field */
    private int modified_by;
    /** the value for the created_by field */
    private int created_by;
    /** the value for the modified_date field */
    private Date modified_date;
    /** the value for the created_date field */
    private Date created_date;
    /** the value for the deleted field */
    private boolean deleted;


    /**
     * Get the IssueId
     * @return int
     */
     public int getIssueId()
     {
          return issue_id;
     }

                            
    /**
     * Set the value of IssueId
     */
     public void setIssueId(int v ) throws Exception
     {
  
       
        
                
          // update associated ScarabActivity
          if (collScarabActivitys != null )
          {
              for (int i=0; i<collScarabActivitys.size(); i++)
              {
                  ((ScarabActivity)collScarabActivitys.get(i))
                      .setIssueId(v);
              }
          }
            
        
                
          // update associated ScarabAttachment
          if (collScarabAttachments != null )
          {
              for (int i=0; i<collScarabAttachments.size(); i++)
              {
                  ((ScarabAttachment)collScarabAttachments.get(i))
                      .setIssueId(v);
              }
          }
            
        
                
          // update associated ScarabDepend
          if (collScarabDependsRelatedByObservedId != null )
          {
              for (int i=0; i<collScarabDependsRelatedByObservedId.size(); i++)
              {
                  ((ScarabDepend)collScarabDependsRelatedByObservedId.get(i))
                      .setObservedId(v);
              }
          }
            
        
                
          // update associated ScarabDepend
          if (collScarabDependsRelatedByObserverId != null )
          {
              for (int i=0; i<collScarabDependsRelatedByObserverId.size(); i++)
              {
                  ((ScarabDepend)collScarabDependsRelatedByObserverId.get(i))
                      .setObserverId(v);
              }
          }
            
        
                
          // update associated ScarabIssueAttributeValue
          if (collScarabIssueAttributeValues != null )
          {
              for (int i=0; i<collScarabIssueAttributeValues.size(); i++)
              {
                  ((ScarabIssueAttributeValue)collScarabIssueAttributeValues.get(i))
                      .setIssueId(v);
              }
          }
       

           if (this.issue_id != v)
           {
              this.issue_id = v;
              setModified(true);
          }
     }
    /**
     * Get the ModuleId
     * @return int
     */
     public int getModuleId()
     {
          return module_id;
     }

            
    /**
     * Set the value of ModuleId
     */
     public void setModuleId(int v ) throws Exception
     {
                  if ( aScarabModule != null && !aScarabModule.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

           if (this.module_id != v)
           {
              this.module_id = v;
              setModified(true);
          }
     }
    /**
     * Get the ModifiedBy
     * @return int
     */
     public int getModifiedBy()
     {
          return modified_by;
     }

        
    /**
     * Set the value of ModifiedBy
     */
     public void setModifiedBy(int v ) 
     {
  
  

           if (this.modified_by != v)
           {
              this.modified_by = v;
              setModified(true);
          }
     }
    /**
     * Get the CreatedBy
     * @return int
     */
     public int getCreatedBy()
     {
          return created_by;
     }

        
    /**
     * Set the value of CreatedBy
     */
     public void setCreatedBy(int v ) 
     {
  
  

           if (this.created_by != v)
           {
              this.created_by = v;
              setModified(true);
          }
     }
    /**
     * Get the ModifiedDate
     * @return Date
     */
     public Date getModifiedDate()
     {
          return modified_date;
     }

        
    /**
     * Set the value of ModifiedDate
     */
     public void setModifiedDate(Date v ) 
     {
  
  

           if ( !ObjectUtils.equals(this.modified_date, v) )
           {
              this.modified_date = v;
              setModified(true);
          }
     }
    /**
     * Get the CreatedDate
     * @return Date
     */
     public Date getCreatedDate()
     {
          return created_date;
     }

        
    /**
     * Set the value of CreatedDate
     */
     public void setCreatedDate(Date v ) 
     {
  
  

           if ( !ObjectUtils.equals(this.created_date, v) )
           {
              this.created_date = v;
              setModified(true);
          }
     }
    /**
     * Get the Deleted
     * @return boolean
     */
     public boolean getDeleted()
     {
          return deleted;
     }

        
    /**
     * Set the value of Deleted
     */
     public void setDeleted(boolean v ) 
     {
  
  

           if (this.deleted != v)
           {
              this.deleted = v;
              setModified(true);
          }
     }

 
 
   
             
   
   
    /**
     * Declares an association between this object and a ScarabModule object
     *
     * @param ScarabModule v
     */
    private ScarabModule aScarabModule;
    public void setScarabModule(ScarabModule v) throws Exception
    {
        aScarabModule = null;
           setModuleId(v.getModuleId());
           aScarabModule = v;
    }

                     
    public ScarabModule getScarabModule() throws Exception
    {
        if ( aScarabModule==null && (this.module_id>0) )
        {
            aScarabModule = ScarabModulePeer.retrieveByPK(this.module_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // ScarabModule obj = ScarabModulePeer.retrieveByPK(this.module_id);
            // obj.addScarabIssues(this);
        }
        return aScarabModule;
    }

    
                
      
    /**
     * Collection to store aggregation of collScarabActivitys
     */
    private Vector collScarabActivitys;
    /**
     * Temporary storage of collScarabActivitys to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollScarabActivitys;

    public void initScarabActivitys()
    {
        if (collScarabActivitys == null)
            collScarabActivitys = new Vector();
    }

    /**
     * Method called to associate a ScarabActivity object to this object
     * through the ScarabActivity foreign key attribute
     *
     * @param ScarabActivity l
     */
    public void addScarabActivitys(ScarabActivity l) throws Exception
    {
        /*
        if (collScarabActivitys == null)
        {
            if (tempcollScarabActivitys == null)
            {
                tempcollScarabActivitys = new Vector();
            }
            tempcollScarabActivitys.add(l);
        }
        else
        {
            collScarabActivitys.add(l);
        }
        */
        getScarabActivitys().add(l);
        l.setScarabIssue((ScarabIssue)this);
    }

    /**
     * The criteria used to select the current contents of collScarabActivitys
     */
    private Criteria lastScarabActivitysCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getScarabActivitys(new Criteria())
     */
    public Vector getScarabActivitys() throws Exception
    {
        if (collScarabActivitys == null)
        {
            collScarabActivitys = getScarabActivitys(new Criteria(10));
        }
        return collScarabActivitys;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssue is new, it will return
     * an empty collection; or if this ScarabIssue has previously
     * been saved, it will retrieve related ScarabActivitys from storage.
     */
    public Vector getScarabActivitys(Criteria criteria) throws Exception
    {
        if (collScarabActivitys == null)
        {
            if ( isNew() ) 
            {
               collScarabActivitys = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabActivityPeer.ISSUE_ID, getIssueId() );               
                   collScarabActivitys = ScarabActivityPeer.doSelect(criteria);
            }
/*
            if (tempcollScarabActivitys != null)
            {
                for (int i=0; i<tempcollScarabActivitys.size(); i++)
                {
                    collScarabActivitys.add(tempcollScarabActivitys.get(i));
                }
                tempcollScarabActivitys = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabActivityPeer.ISSUE_ID, getIssueId() );               
               if ( !lastScarabActivitysCriteria.equals(criteria)  )
            {
                collScarabActivitys = ScarabActivityPeer.doSelect(criteria);  
            }
        }
        lastScarabActivitysCriteria = criteria; 

        return collScarabActivitys;
    }
     

        
      
         
          
                    
                
        
        
       
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssue is new, it will return
     * an empty collection; or if this ScarabIssue has previously
     * been saved, it will retrieve related ScarabActivitys from storage.
     */
    public Vector getScarabActivitysJoinScarabAttribute(Criteria criteria) 
        throws Exception
    {
        if (collScarabActivitys == null)
        {
            if ( isNew() ) 
            {
               collScarabActivitys = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabActivityPeer.ISSUE_ID, getIssueId() );               
                   collScarabActivitys = ScarabActivityPeer.doSelectJoinScarabAttribute(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabActivityPeer.ISSUE_ID, getIssueId() );               
               if ( !lastScarabActivitysCriteria.equals(criteria)  )
            {
                collScarabActivitys = ScarabActivityPeer.doSelectJoinScarabAttribute(criteria);
            }
        }
        lastScarabActivitysCriteria = criteria; 

        return collScarabActivitys;
    }
      
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssue is new, it will return
     * an empty collection; or if this ScarabIssue has previously
     * been saved, it will retrieve related ScarabActivitys from storage.
     */
    public Vector getScarabActivitysJoinScarabTransaction(Criteria criteria) 
        throws Exception
    {
        if (collScarabActivitys == null)
        {
            if ( isNew() ) 
            {
               collScarabActivitys = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabActivityPeer.ISSUE_ID, getIssueId() );               
                   collScarabActivitys = ScarabActivityPeer.doSelectJoinScarabTransaction(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabActivityPeer.ISSUE_ID, getIssueId() );               
               if ( !lastScarabActivitysCriteria.equals(criteria)  )
            {
                collScarabActivitys = ScarabActivityPeer.doSelectJoinScarabTransaction(criteria);
            }
        }
        lastScarabActivitysCriteria = criteria; 

        return collScarabActivitys;
    }
     



             
      
    /**
     * Collection to store aggregation of collScarabAttachments
     */
    private Vector collScarabAttachments;
    /**
     * Temporary storage of collScarabAttachments to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollScarabAttachments;

    public void initScarabAttachments()
    {
        if (collScarabAttachments == null)
            collScarabAttachments = new Vector();
    }

    /**
     * Method called to associate a ScarabAttachment object to this object
     * through the ScarabAttachment foreign key attribute
     *
     * @param ScarabAttachment l
     */
    public void addScarabAttachments(ScarabAttachment l) throws Exception
    {
        /*
        if (collScarabAttachments == null)
        {
            if (tempcollScarabAttachments == null)
            {
                tempcollScarabAttachments = new Vector();
            }
            tempcollScarabAttachments.add(l);
        }
        else
        {
            collScarabAttachments.add(l);
        }
        */
        getScarabAttachments().add(l);
        l.setScarabIssue((ScarabIssue)this);
    }

    /**
     * The criteria used to select the current contents of collScarabAttachments
     */
    private Criteria lastScarabAttachmentsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getScarabAttachments(new Criteria())
     */
    public Vector getScarabAttachments() throws Exception
    {
        if (collScarabAttachments == null)
        {
            collScarabAttachments = getScarabAttachments(new Criteria(10));
        }
        return collScarabAttachments;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssue is new, it will return
     * an empty collection; or if this ScarabIssue has previously
     * been saved, it will retrieve related ScarabAttachments from storage.
     */
    public Vector getScarabAttachments(Criteria criteria) throws Exception
    {
        if (collScarabAttachments == null)
        {
            if ( isNew() ) 
            {
               collScarabAttachments = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabAttachmentPeer.ISSUE_ID, getIssueId() );               
                   collScarabAttachments = ScarabAttachmentPeer.doSelect(criteria);
            }
/*
            if (tempcollScarabAttachments != null)
            {
                for (int i=0; i<tempcollScarabAttachments.size(); i++)
                {
                    collScarabAttachments.add(tempcollScarabAttachments.get(i));
                }
                tempcollScarabAttachments = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabAttachmentPeer.ISSUE_ID, getIssueId() );               
               if ( !lastScarabAttachmentsCriteria.equals(criteria)  )
            {
                collScarabAttachments = ScarabAttachmentPeer.doSelect(criteria);  
            }
        }
        lastScarabAttachmentsCriteria = criteria; 

        return collScarabAttachments;
    }
    

        
      
         
          
                    
                
        
        
       
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssue is new, it will return
     * an empty collection; or if this ScarabIssue has previously
     * been saved, it will retrieve related ScarabAttachments from storage.
     */
    public Vector getScarabAttachmentsJoinScarabAttachmentType(Criteria criteria) 
        throws Exception
    {
        if (collScarabAttachments == null)
        {
            if ( isNew() ) 
            {
               collScarabAttachments = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabAttachmentPeer.ISSUE_ID, getIssueId() );               
                   collScarabAttachments = ScarabAttachmentPeer.doSelectJoinScarabAttachmentType(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabAttachmentPeer.ISSUE_ID, getIssueId() );               
               if ( !lastScarabAttachmentsCriteria.equals(criteria)  )
            {
                collScarabAttachments = ScarabAttachmentPeer.doSelectJoinScarabAttachmentType(criteria);
            }
        }
        lastScarabAttachmentsCriteria = criteria; 

        return collScarabAttachments;
    }
     



                 
      
    /**
     * Collection to store aggregation of collScarabDependsRelatedByObservedId
     */
    private Vector collScarabDependsRelatedByObservedId;
    /**
     * Temporary storage of collScarabDependsRelatedByObservedId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollScarabDependsRelatedByObservedId;

    public void initScarabDependsRelatedByObservedId()
    {
        if (collScarabDependsRelatedByObservedId == null)
            collScarabDependsRelatedByObservedId = new Vector();
    }

    /**
     * Method called to associate a ScarabDepend object to this object
     * through the ScarabDepend foreign key attribute
     *
     * @param ScarabDepend l
     */
    public void addScarabDependsRelatedByObservedId(ScarabDepend l) throws Exception
    {
        /*
        if (collScarabDependsRelatedByObservedId == null)
        {
            if (tempcollScarabDependsRelatedByObservedId == null)
            {
                tempcollScarabDependsRelatedByObservedId = new Vector();
            }
            tempcollScarabDependsRelatedByObservedId.add(l);
        }
        else
        {
            collScarabDependsRelatedByObservedId.add(l);
        }
        */
        getScarabDependsRelatedByObservedId().add(l);
        l.setScarabIssueRelatedByObservedId((ScarabIssue)this);
    }

    /**
     * The criteria used to select the current contents of collScarabDependsRelatedByObservedId
     */
    private Criteria lastScarabDependsRelatedByObservedIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getScarabDependsRelatedByObservedId(new Criteria())
     */
    public Vector getScarabDependsRelatedByObservedId() throws Exception
    {
        if (collScarabDependsRelatedByObservedId == null)
        {
            collScarabDependsRelatedByObservedId = getScarabDependsRelatedByObservedId(new Criteria(10));
        }
        return collScarabDependsRelatedByObservedId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssue is new, it will return
     * an empty collection; or if this ScarabIssue has previously
     * been saved, it will retrieve related ScarabDependsRelatedByObservedId from storage.
     */
    public Vector getScarabDependsRelatedByObservedId(Criteria criteria) throws Exception
    {
        if (collScarabDependsRelatedByObservedId == null)
        {
            if ( isNew() ) 
            {
               collScarabDependsRelatedByObservedId = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabDependPeer.OBSERVED_ID, getIssueId() );               
                   collScarabDependsRelatedByObservedId = ScarabDependPeer.doSelect(criteria);
            }
/*
            if (tempcollScarabDependsRelatedByObservedId != null)
            {
                for (int i=0; i<tempcollScarabDependsRelatedByObservedId.size(); i++)
                {
                    collScarabDependsRelatedByObservedId.add(tempcollScarabDependsRelatedByObservedId.get(i));
                }
                tempcollScarabDependsRelatedByObservedId = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabDependPeer.OBSERVED_ID, getIssueId() );               
               if ( !lastScarabDependsRelatedByObservedIdCriteria.equals(criteria)  )
            {
                collScarabDependsRelatedByObservedId = ScarabDependPeer.doSelect(criteria);  
            }
        }
        lastScarabDependsRelatedByObservedIdCriteria = criteria; 

        return collScarabDependsRelatedByObservedId;
    }
     

        
      
         
              
                            
                
        
                        
       
      
         
              
                            
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssue is new, it will return
     * an empty collection; or if this ScarabIssue has previously
     * been saved, it will retrieve related ScarabDependsRelatedByObservedId from storage.
     */
    public Vector getScarabDependsRelatedByObservedIdJoinScarabIssueRelatedByObserverId(Criteria criteria) 
        throws Exception
    {
        if (collScarabDependsRelatedByObservedId == null)
        {
            if ( isNew() ) 
            {
               collScarabDependsRelatedByObservedId = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabDependPeer.OBSERVED_ID, getIssueId() );               
                   collScarabDependsRelatedByObservedId = ScarabDependPeer.doSelectJoinScarabIssueRelatedByObserverId(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabDependPeer.OBSERVED_ID, getIssueId() );               
               if ( !lastScarabDependsRelatedByObservedIdCriteria.equals(criteria)  )
            {
                collScarabDependsRelatedByObservedId = ScarabDependPeer.doSelectJoinScarabIssueRelatedByObserverId(criteria);
            }
        }
        lastScarabDependsRelatedByObservedIdCriteria = criteria; 

        return collScarabDependsRelatedByObservedId;
    }
      
      
      
          
                    
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssue is new, it will return
     * an empty collection; or if this ScarabIssue has previously
     * been saved, it will retrieve related ScarabDependsRelatedByObservedId from storage.
     */
    public Vector getScarabDependsRelatedByObservedIdJoinScarabDependType(Criteria criteria) 
        throws Exception
    {
        if (collScarabDependsRelatedByObservedId == null)
        {
            if ( isNew() ) 
            {
               collScarabDependsRelatedByObservedId = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabDependPeer.OBSERVED_ID, getIssueId() );               
                   collScarabDependsRelatedByObservedId = ScarabDependPeer.doSelectJoinScarabDependType(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabDependPeer.OBSERVED_ID, getIssueId() );               
               if ( !lastScarabDependsRelatedByObservedIdCriteria.equals(criteria)  )
            {
                collScarabDependsRelatedByObservedId = ScarabDependPeer.doSelectJoinScarabDependType(criteria);
            }
        }
        lastScarabDependsRelatedByObservedIdCriteria = criteria; 

        return collScarabDependsRelatedByObservedId;
    }
     



                 
      
    /**
     * Collection to store aggregation of collScarabDependsRelatedByObserverId
     */
    private Vector collScarabDependsRelatedByObserverId;
    /**
     * Temporary storage of collScarabDependsRelatedByObserverId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollScarabDependsRelatedByObserverId;

    public void initScarabDependsRelatedByObserverId()
    {
        if (collScarabDependsRelatedByObserverId == null)
            collScarabDependsRelatedByObserverId = new Vector();
    }

    /**
     * Method called to associate a ScarabDepend object to this object
     * through the ScarabDepend foreign key attribute
     *
     * @param ScarabDepend l
     */
    public void addScarabDependsRelatedByObserverId(ScarabDepend l) throws Exception
    {
        /*
        if (collScarabDependsRelatedByObserverId == null)
        {
            if (tempcollScarabDependsRelatedByObserverId == null)
            {
                tempcollScarabDependsRelatedByObserverId = new Vector();
            }
            tempcollScarabDependsRelatedByObserverId.add(l);
        }
        else
        {
            collScarabDependsRelatedByObserverId.add(l);
        }
        */
        getScarabDependsRelatedByObserverId().add(l);
        l.setScarabIssueRelatedByObserverId((ScarabIssue)this);
    }

    /**
     * The criteria used to select the current contents of collScarabDependsRelatedByObserverId
     */
    private Criteria lastScarabDependsRelatedByObserverIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getScarabDependsRelatedByObserverId(new Criteria())
     */
    public Vector getScarabDependsRelatedByObserverId() throws Exception
    {
        if (collScarabDependsRelatedByObserverId == null)
        {
            collScarabDependsRelatedByObserverId = getScarabDependsRelatedByObserverId(new Criteria(10));
        }
        return collScarabDependsRelatedByObserverId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssue is new, it will return
     * an empty collection; or if this ScarabIssue has previously
     * been saved, it will retrieve related ScarabDependsRelatedByObserverId from storage.
     */
    public Vector getScarabDependsRelatedByObserverId(Criteria criteria) throws Exception
    {
        if (collScarabDependsRelatedByObserverId == null)
        {
            if ( isNew() ) 
            {
               collScarabDependsRelatedByObserverId = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabDependPeer.OBSERVER_ID, getIssueId() );               
                   collScarabDependsRelatedByObserverId = ScarabDependPeer.doSelect(criteria);
            }
/*
            if (tempcollScarabDependsRelatedByObserverId != null)
            {
                for (int i=0; i<tempcollScarabDependsRelatedByObserverId.size(); i++)
                {
                    collScarabDependsRelatedByObserverId.add(tempcollScarabDependsRelatedByObserverId.get(i));
                }
                tempcollScarabDependsRelatedByObserverId = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabDependPeer.OBSERVER_ID, getIssueId() );               
               if ( !lastScarabDependsRelatedByObserverIdCriteria.equals(criteria)  )
            {
                collScarabDependsRelatedByObserverId = ScarabDependPeer.doSelect(criteria);  
            }
        }
        lastScarabDependsRelatedByObserverIdCriteria = criteria; 

        return collScarabDependsRelatedByObserverId;
    }
     

        
      
         
              
                            
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssue is new, it will return
     * an empty collection; or if this ScarabIssue has previously
     * been saved, it will retrieve related ScarabDependsRelatedByObserverId from storage.
     */
    public Vector getScarabDependsRelatedByObserverIdJoinScarabIssueRelatedByObservedId(Criteria criteria) 
        throws Exception
    {
        if (collScarabDependsRelatedByObserverId == null)
        {
            if ( isNew() ) 
            {
               collScarabDependsRelatedByObserverId = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabDependPeer.OBSERVER_ID, getIssueId() );               
                   collScarabDependsRelatedByObserverId = ScarabDependPeer.doSelectJoinScarabIssueRelatedByObservedId(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabDependPeer.OBSERVER_ID, getIssueId() );               
               if ( !lastScarabDependsRelatedByObserverIdCriteria.equals(criteria)  )
            {
                collScarabDependsRelatedByObserverId = ScarabDependPeer.doSelectJoinScarabIssueRelatedByObservedId(criteria);
            }
        }
        lastScarabDependsRelatedByObserverIdCriteria = criteria; 

        return collScarabDependsRelatedByObserverId;
    }
      
      
         
              
                            
                
        
                        
       
      
      
          
                    
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssue is new, it will return
     * an empty collection; or if this ScarabIssue has previously
     * been saved, it will retrieve related ScarabDependsRelatedByObserverId from storage.
     */
    public Vector getScarabDependsRelatedByObserverIdJoinScarabDependType(Criteria criteria) 
        throws Exception
    {
        if (collScarabDependsRelatedByObserverId == null)
        {
            if ( isNew() ) 
            {
               collScarabDependsRelatedByObserverId = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabDependPeer.OBSERVER_ID, getIssueId() );               
                   collScarabDependsRelatedByObserverId = ScarabDependPeer.doSelectJoinScarabDependType(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabDependPeer.OBSERVER_ID, getIssueId() );               
               if ( !lastScarabDependsRelatedByObserverIdCriteria.equals(criteria)  )
            {
                collScarabDependsRelatedByObserverId = ScarabDependPeer.doSelectJoinScarabDependType(criteria);
            }
        }
        lastScarabDependsRelatedByObserverIdCriteria = criteria; 

        return collScarabDependsRelatedByObserverId;
    }
     



             
      
    /**
     * Collection to store aggregation of collScarabIssueAttributeValues
     */
    private Vector collScarabIssueAttributeValues;
    /**
     * Temporary storage of collScarabIssueAttributeValues to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollScarabIssueAttributeValues;

    public void initScarabIssueAttributeValues()
    {
        if (collScarabIssueAttributeValues == null)
            collScarabIssueAttributeValues = new Vector();
    }

    /**
     * Method called to associate a ScarabIssueAttributeValue object to this object
     * through the ScarabIssueAttributeValue foreign key attribute
     *
     * @param ScarabIssueAttributeValue l
     */
    public void addScarabIssueAttributeValues(ScarabIssueAttributeValue l) throws Exception
    {
        /*
        if (collScarabIssueAttributeValues == null)
        {
            if (tempcollScarabIssueAttributeValues == null)
            {
                tempcollScarabIssueAttributeValues = new Vector();
            }
            tempcollScarabIssueAttributeValues.add(l);
        }
        else
        {
            collScarabIssueAttributeValues.add(l);
        }
        */
        getScarabIssueAttributeValues().add(l);
        l.setScarabIssue((ScarabIssue)this);
    }

    /**
     * The criteria used to select the current contents of collScarabIssueAttributeValues
     */
    private Criteria lastScarabIssueAttributeValuesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getScarabIssueAttributeValues(new Criteria())
     */
    public Vector getScarabIssueAttributeValues() throws Exception
    {
        if (collScarabIssueAttributeValues == null)
        {
            collScarabIssueAttributeValues = getScarabIssueAttributeValues(new Criteria(10));
        }
        return collScarabIssueAttributeValues;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssue is new, it will return
     * an empty collection; or if this ScarabIssue has previously
     * been saved, it will retrieve related ScarabIssueAttributeValues from storage.
     */
    public Vector getScarabIssueAttributeValues(Criteria criteria) throws Exception
    {
        if (collScarabIssueAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collScarabIssueAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabIssueAttributeValuePeer.ISSUE_ID, getIssueId() );               
                   collScarabIssueAttributeValues = ScarabIssueAttributeValuePeer.doSelect(criteria);
            }
/*
            if (tempcollScarabIssueAttributeValues != null)
            {
                for (int i=0; i<tempcollScarabIssueAttributeValues.size(); i++)
                {
                    collScarabIssueAttributeValues.add(tempcollScarabIssueAttributeValues.get(i));
                }
                tempcollScarabIssueAttributeValues = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabIssueAttributeValuePeer.ISSUE_ID, getIssueId() );               
               if ( !lastScarabIssueAttributeValuesCriteria.equals(criteria)  )
            {
                collScarabIssueAttributeValues = ScarabIssueAttributeValuePeer.doSelect(criteria);  
            }
        }
        lastScarabIssueAttributeValuesCriteria = criteria; 

        return collScarabIssueAttributeValues;
    }
      

        
      
         
          
                    
                
        
        
       
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssue is new, it will return
     * an empty collection; or if this ScarabIssue has previously
     * been saved, it will retrieve related ScarabIssueAttributeValues from storage.
     */
    public Vector getScarabIssueAttributeValuesJoinScarabAttribute(Criteria criteria) 
        throws Exception
    {
        if (collScarabIssueAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collScarabIssueAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabIssueAttributeValuePeer.ISSUE_ID, getIssueId() );               
                   collScarabIssueAttributeValues = ScarabIssueAttributeValuePeer.doSelectJoinScarabAttribute(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabIssueAttributeValuePeer.ISSUE_ID, getIssueId() );               
               if ( !lastScarabIssueAttributeValuesCriteria.equals(criteria)  )
            {
                collScarabIssueAttributeValues = ScarabIssueAttributeValuePeer.doSelectJoinScarabAttribute(criteria);
            }
        }
        lastScarabIssueAttributeValuesCriteria = criteria; 

        return collScarabIssueAttributeValues;
    }
      
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssue is new, it will return
     * an empty collection; or if this ScarabIssue has previously
     * been saved, it will retrieve related ScarabIssueAttributeValues from storage.
     */
    public Vector getScarabIssueAttributeValuesJoinScarabAttributeOption(Criteria criteria) 
        throws Exception
    {
        if (collScarabIssueAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collScarabIssueAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabIssueAttributeValuePeer.ISSUE_ID, getIssueId() );               
                   collScarabIssueAttributeValues = ScarabIssueAttributeValuePeer.doSelectJoinScarabAttributeOption(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabIssueAttributeValuePeer.ISSUE_ID, getIssueId() );               
               if ( !lastScarabIssueAttributeValuesCriteria.equals(criteria)  )
            {
                collScarabIssueAttributeValues = ScarabIssueAttributeValuePeer.doSelectJoinScarabAttributeOption(criteria);
            }
        }
        lastScarabIssueAttributeValuesCriteria = criteria; 

        return collScarabIssueAttributeValues;
    }
      
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this ScarabIssue is new, it will return
     * an empty collection; or if this ScarabIssue has previously
     * been saved, it will retrieve related ScarabIssueAttributeValues from storage.
     */
    public Vector getScarabIssueAttributeValuesJoinTurbineUser(Criteria criteria) 
        throws Exception
    {
        if (collScarabIssueAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collScarabIssueAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(ScarabIssueAttributeValuePeer.ISSUE_ID, getIssueId() );               
                   collScarabIssueAttributeValues = ScarabIssueAttributeValuePeer.doSelectJoinTurbineUser(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ScarabIssueAttributeValuePeer.ISSUE_ID, getIssueId() );               
               if ( !lastScarabIssueAttributeValuesCriteria.equals(criteria)  )
            {
                collScarabIssueAttributeValues = ScarabIssueAttributeValuePeer.doSelectJoinTurbineUser(criteria);
            }
        }
        lastScarabIssueAttributeValuesCriteria = criteria; 

        return collScarabIssueAttributeValues;
    }
     



     
    
    private static Vector fieldNames_ = null;

    /**
     * Generate a list of field names.
     */
    public static Vector getFieldNames()
    {
      if (fieldNames_ == null)
      {
        fieldNames_ = new Vector();
            fieldNames_.add("IssueId");
            fieldNames_.add("ModuleId");
            fieldNames_.add("ModifiedBy");
            fieldNames_.add("CreatedBy");
            fieldNames_.add("ModifiedDate");
            fieldNames_.add("CreatedDate");
            fieldNames_.add("Deleted");
          }
      return fieldNames_;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.
     */
    public Object getByName(String name)
    {
            if (name.equals("IssueId"))
	{
	  	    return new Integer(getIssueId());
	  	}
            if (name.equals("ModuleId"))
	{
	  	    return new Integer(getModuleId());
	  	}
            if (name.equals("ModifiedBy"))
	{
	  	    return new Integer(getModifiedBy());
	  	}
            if (name.equals("CreatedBy"))
	{
	  	    return new Integer(getCreatedBy());
	  	}
            if (name.equals("ModifiedDate"))
	{
	  	    return getModifiedDate();
	  	}
            if (name.equals("CreatedDate"))
	{
	  	    return getCreatedDate();
	  	}
            if (name.equals("Deleted"))
	{
	  	    return new Boolean(getDeleted());
	  	}
            return null; 
    }
     	

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                ScarabIssuePeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                ScarabIssuePeer.doInsert((ScarabIssue)this, dbCon);
            }
            else
            {
                ScarabIssuePeer.doUpdate((ScarabIssue)this, dbCon);
                setNew(false);
            }
        }

                                    
                
          if (collScarabActivitys != null )
          {
              for (int i=0; i<collScarabActivitys.size(); i++)
              {
                  ((ScarabActivity)collScarabActivitys.get(i)).save(dbCon);
              }
          }
                                        
                
          if (collScarabAttachments != null )
          {
              for (int i=0; i<collScarabAttachments.size(); i++)
              {
                  ((ScarabAttachment)collScarabAttachments.get(i)).save(dbCon);
              }
          }
                                                    
                
          if (collScarabDependsRelatedByObservedId != null )
          {
              for (int i=0; i<collScarabDependsRelatedByObservedId.size(); i++)
              {
                  ((ScarabDepend)collScarabDependsRelatedByObservedId.get(i)).save(dbCon);
              }
          }
                                                    
                
          if (collScarabDependsRelatedByObserverId != null )
          {
              for (int i=0; i<collScarabDependsRelatedByObserverId.size(); i++)
              {
                  ((ScarabDepend)collScarabDependsRelatedByObserverId.get(i)).save(dbCon);
              }
          }
                                        
                
          if (collScarabIssueAttributeValues != null )
          {
              for (int i=0; i<collScarabIssueAttributeValues.size(); i++)
              {
                  ((ScarabIssueAttributeValue)collScarabIssueAttributeValues.get(i)).save(dbCon);
              }
          }
                  alreadyInSave = false;
      }
      }

                                                            
    /** 
     * Set the Id using pk values.
     *
     * @param int issue_id
     */
    public void setPrimaryKey(
                      int issue_id
                                                                                                     ) throws Exception
    {
                     setIssueId(issue_id);
                                                                                        }

    /** 
     * Set the Id using a : separated String of pk values.
     */
    public void setPrimaryKey(Object id) throws Exception
    {
        StringTokenizer st = new StringTokenizer(id.toString(), ":");
                           setIssueId( Integer.parseInt(st.nextToken()) );
                                                                                                }


    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public Object getPrimaryKey() 
    {
        return ""
                      + getIssueId()
                                                                                                     ;
    } 

    /** 
     * returns an id that can be used to specify this object in
     * a query string.
     */
    public String getQueryOID() 
    {
        return "ScarabIssue[" + getPrimaryKey() + "]";
    }

    /**
     * Makes a copy of this object.  
     * It creates a new object filling in the simple attributes.
      * It then fills all the association collections and sets the
     * related objects to isNew=true.
      */
    public ScarabIssue copy() throws Exception
    {
        ScarabIssue copyObj = new ScarabIssue();
         copyObj.setIssueId(issue_id);
         copyObj.setModuleId(module_id);
         copyObj.setModifiedBy(modified_by);
         copyObj.setCreatedBy(created_by);
         copyObj.setModifiedDate(modified_date);
         copyObj.setCreatedDate(created_date);
         copyObj.setDeleted(deleted);
 
                                  
                
         List v = copyObj.getScarabActivitys();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
                                         
                
         v = copyObj.getScarabAttachments();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
                                                     
                
         v = copyObj.getScarabDependsRelatedByObservedId();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
                                                     
                
         v = copyObj.getScarabDependsRelatedByObserverId();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
                                         
                
         v = copyObj.getScarabIssueAttributeValues();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
         
                       
        copyObj.setIssueId(NEW_ID);
                                                     return copyObj;
    }             
}
