package org.tigris.scarab.baseom.base;


// JDK classes
import java.util.*;
import java.math.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.StringUtils;
import org.apache.turbine.util.ParameterParser;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

import org.tigris.scarab.baseom.*;
import org.tigris.scarab.baseom.peer.*;

/** 
 * This class was autogenerated by Torque on:
 *
 * [Thu Feb 22 18:38:08 PST 2001]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to AttributeOption 
 */
public abstract class BaseAttributeOption extends BaseObject
{
    /** the value for the option_id field */
    private SimpleKey option_id;
    /** the value for the attribute_id field */
    private SimpleKey attribute_id;
    /** the value for the display_value field */
    private String display_value;
    /** the value for the numeric_value field */
    private int numeric_value;


    /**
     * Get the OptionId
     * @return SimpleKey
     */
     public SimpleKey getOptionId()
     {
          return option_id;
     }

                            
    /**
     * Set the value of OptionId
     */
     public void setOptionId(SimpleKey v ) throws Exception
     {
  
       
        
                
          // update associated AttributeValue
          if (collAttributeValues != null )
          {
              for (int i=0; i<collAttributeValues.size(); i++)
              {
                  ((AttributeValue)collAttributeValues.get(i))
                      .setOptionId(v);
              }
          }
            
        
                
          // update associated AttributeVote
          if (collAttributeVotes != null )
          {
              for (int i=0; i<collAttributeVotes.size(); i++)
              {
                  ((AttributeVote)collAttributeVotes.get(i))
                      .setOptionId(v);
              }
          }
       

         if ( !ObjectUtils.equals(this.option_id, v) )
        {
                       if (this.option_id == null)
            {
                this.option_id = v;
            }
            else
            {
                this.option_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the AttributeId
     * @return SimpleKey
     */
     public SimpleKey getAttributeId()
     {
          return attribute_id;
     }

            
    /**
     * Set the value of AttributeId
     */
     public void setAttributeId(SimpleKey v ) throws Exception
     {
                  if ( aAttribute != null && !aAttribute.isNew())
        {
            throw new Exception("Can't set a foreign key directly after an "
                + " association is already made based on saved data.");
        }
  
  

         if ( !ObjectUtils.equals(this.attribute_id, v) )
        {
                       if (this.attribute_id == null)
            {
                this.attribute_id = v;
            }
            else
            {
                this.attribute_id.set(v);
            }
                      setModified(true);
        }
     }
    /**
     * Get the DisplayValue
     * @return String
     */
     public String getDisplayValue()
     {
          return display_value;
     }

        
    /**
     * Set the value of DisplayValue
     */
     public void setDisplayValue(String v ) 
     {
  
  

         if ( !ObjectUtils.equals(this.display_value, v) )
        {
                       this.display_value = v;
                      setModified(true);
        }
     }
    /**
     * Get the NumericValue
     * @return int
     */
     public int getNumericValue()
     {
          return numeric_value;
     }

        
    /**
     * Set the value of NumericValue
     */
     public void setNumericValue(int v ) 
     {
  
  

         if (this.numeric_value != v)
        {
                       this.numeric_value = v;
                      setModified(true);
        }
     }

 
 
   
             
   
   
    /**
     * Declares an association between this object and a Attribute object
     *
     * @param Attribute v
     */
    private Attribute aAttribute;
    public void setAttribute(Attribute v) throws Exception
    {
        aAttribute = null;
           setAttributeId(v.getAttributeId());
           aAttribute = v;
    }

                     
    public Attribute getAttribute() throws Exception
    {
        if ( aAttribute==null && (!ObjectUtils.equals(this.attribute_id, null)) )
        {
            aAttribute = AttributePeer.retrieveByPK(this.attribute_id);
            // The following can be used instead of the line above to
            // guarantee the related object contains a reference
            // to this object, but this level of coupling 
            // may be undesirable in many circumstances.
            // As it can lead to a db query with many results that may
            // never be used.  
            // Attribute obj = AttributePeer.retrieveByPK(this.attribute_id);
            // obj.addAttributeOptions(this);
        }
        return aAttribute;
    }

    
                
      
    /**
     * Collection to store aggregation of collAttributeValues
     */
    private Vector collAttributeValues;
    /**
     * Temporary storage of collAttributeValues to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollAttributeValues;

    public void initAttributeValues()
    {
        if (collAttributeValues == null)
            collAttributeValues = new Vector();
    }

    /**
     * Method called to associate a AttributeValue object to this object
     * through the AttributeValue foreign key attribute
     *
     * @param AttributeValue l
     */
    public void addAttributeValues(AttributeValue l) throws Exception
    {
        /*
        if (collAttributeValues == null)
        {
            if (tempcollAttributeValues == null)
            {
                tempcollAttributeValues = new Vector();
            }
            tempcollAttributeValues.add(l);
        }
        else
        {
            collAttributeValues.add(l);
        }
        */
        getAttributeValues().add(l);
        l.setAttributeOption((AttributeOption)this);
    }

    /**
     * The criteria used to select the current contents of collAttributeValues
     */
    private Criteria lastAttributeValuesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getAttributeValues(new Criteria())
     */
    public Vector getAttributeValues() throws Exception
    {
        if (collAttributeValues == null)
        {
            collAttributeValues = getAttributeValues(new Criteria(10));
        }
        return collAttributeValues;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this AttributeOption is new, it will return
     * an empty collection; or if this AttributeOption has previously
     * been saved, it will retrieve related AttributeValues from storage.
     */
    public Vector getAttributeValues(Criteria criteria) throws Exception
    {
        if (collAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeValuePeer.OPTION_ID, getOptionId() );               
                   collAttributeValues = AttributeValuePeer.doSelect(criteria);
            }
/*
            if (tempcollAttributeValues != null)
            {
                for (int i=0; i<tempcollAttributeValues.size(); i++)
                {
                    collAttributeValues.add(tempcollAttributeValues.get(i));
                }
                tempcollAttributeValues = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeValuePeer.OPTION_ID, getOptionId() );               
               if ( !lastAttributeValuesCriteria.equals(criteria)  )
            {
                collAttributeValues = AttributeValuePeer.doSelect(criteria);  
            }
        }
        lastAttributeValuesCriteria = criteria; 

        return collAttributeValues;
    }
      

        
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this AttributeOption is new, it will return
     * an empty collection; or if this AttributeOption has previously
     * been saved, it will retrieve related AttributeValues from storage.
     */
    public Vector getAttributeValuesJoinIssue(Criteria criteria) 
        throws Exception
    {
        if (collAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeValuePeer.OPTION_ID, getOptionId() );               
                   collAttributeValues = AttributeValuePeer.doSelectJoinIssue(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeValuePeer.OPTION_ID, getOptionId() );               
               if ( !lastAttributeValuesCriteria.equals(criteria)  )
            {
                collAttributeValues = AttributeValuePeer.doSelectJoinIssue(criteria);
            }
        }
        lastAttributeValuesCriteria = criteria; 

        return collAttributeValues;
    }
      
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this AttributeOption is new, it will return
     * an empty collection; or if this AttributeOption has previously
     * been saved, it will retrieve related AttributeValues from storage.
     */
    public Vector getAttributeValuesJoinAttribute(Criteria criteria) 
        throws Exception
    {
        if (collAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeValuePeer.OPTION_ID, getOptionId() );               
                   collAttributeValues = AttributeValuePeer.doSelectJoinAttribute(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeValuePeer.OPTION_ID, getOptionId() );               
               if ( !lastAttributeValuesCriteria.equals(criteria)  )
            {
                collAttributeValues = AttributeValuePeer.doSelectJoinAttribute(criteria);
            }
        }
        lastAttributeValuesCriteria = criteria; 

        return collAttributeValues;
    }
      
      
         
          
                    
                
        
        
       
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this AttributeOption is new, it will return
     * an empty collection; or if this AttributeOption has previously
     * been saved, it will retrieve related AttributeValues from storage.
     */
    public Vector getAttributeValuesJoinTurbineUser(Criteria criteria) 
        throws Exception
    {
        if (collAttributeValues == null)
        {
            if ( isNew() ) 
            {
               collAttributeValues = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeValuePeer.OPTION_ID, getOptionId() );               
                   collAttributeValues = AttributeValuePeer.doSelectJoinTurbineUser(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeValuePeer.OPTION_ID, getOptionId() );               
               if ( !lastAttributeValuesCriteria.equals(criteria)  )
            {
                collAttributeValues = AttributeValuePeer.doSelectJoinTurbineUser(criteria);
            }
        }
        lastAttributeValuesCriteria = criteria; 

        return collAttributeValues;
    }
     



             
      
    /**
     * Collection to store aggregation of collAttributeVotes
     */
    private Vector collAttributeVotes;
    /**
     * Temporary storage of collAttributeVotes to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
//    private Vector tempcollAttributeVotes;

    public void initAttributeVotes()
    {
        if (collAttributeVotes == null)
            collAttributeVotes = new Vector();
    }

    /**
     * Method called to associate a AttributeVote object to this object
     * through the AttributeVote foreign key attribute
     *
     * @param AttributeVote l
     */
    public void addAttributeVotes(AttributeVote l) throws Exception
    {
        /*
        if (collAttributeVotes == null)
        {
            if (tempcollAttributeVotes == null)
            {
                tempcollAttributeVotes = new Vector();
            }
            tempcollAttributeVotes.add(l);
        }
        else
        {
            collAttributeVotes.add(l);
        }
        */
        getAttributeVotes().add(l);
        l.setAttributeOption((AttributeOption)this);
    }

    /**
     * The criteria used to select the current contents of collAttributeVotes
     */
    private Criteria lastAttributeVotesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of 
     * getAttributeVotes(new Criteria())
     */
    public Vector getAttributeVotes() throws Exception
    {
        if (collAttributeVotes == null)
        {
            collAttributeVotes = getAttributeVotes(new Criteria(10));
        }
        return collAttributeVotes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this AttributeOption is new, it will return
     * an empty collection; or if this AttributeOption has previously
     * been saved, it will retrieve related AttributeVotes from storage.
     */
    public Vector getAttributeVotes(Criteria criteria) throws Exception
    {
        if (collAttributeVotes == null)
        {
            if ( isNew() ) 
            {
               collAttributeVotes = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeVotePeer.OPTION_ID, getOptionId() );               
                   collAttributeVotes = AttributeVotePeer.doSelect(criteria);
            }
/*
            if (tempcollAttributeVotes != null)
            {
                for (int i=0; i<tempcollAttributeVotes.size(); i++)
                {
                    collAttributeVotes.add(tempcollAttributeVotes.get(i));
                }
                tempcollAttributeVotes = null;
            }
*/
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeVotePeer.OPTION_ID, getOptionId() );               
               if ( !lastAttributeVotesCriteria.equals(criteria)  )
            {
                collAttributeVotes = AttributeVotePeer.doSelect(criteria);  
            }
        }
        lastAttributeVotesCriteria = criteria; 

        return collAttributeVotes;
    }
     

        
      
         
          
                    
                
        
        
       
      
      
                 
                                
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this AttributeOption is new, it will return
     * an empty collection; or if this AttributeOption has previously
     * been saved, it will retrieve related AttributeVotes from storage.
     */
    public Vector getAttributeVotesJoinAttributeValue(Criteria criteria) 
        throws Exception
    {
        if (collAttributeVotes == null)
        {
            if ( isNew() ) 
            {
               collAttributeVotes = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeVotePeer.OPTION_ID, getOptionId() );               
                   collAttributeVotes = AttributeVotePeer.doSelectJoinAttributeValue(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeVotePeer.OPTION_ID, getOptionId() );               
               if ( !lastAttributeVotesCriteria.equals(criteria)  )
            {
                collAttributeVotes = AttributeVotePeer.doSelectJoinAttributeValue(criteria);
            }
        }
        lastAttributeVotesCriteria = criteria; 

        return collAttributeVotes;
    }
      
      
      
          
                    
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection. 
     * Otherwise if this AttributeOption is new, it will return
     * an empty collection; or if this AttributeOption has previously
     * been saved, it will retrieve related AttributeVotes from storage.
     */
    public Vector getAttributeVotesJoinTurbineUser(Criteria criteria) 
        throws Exception
    {
        if (collAttributeVotes == null)
        {
            if ( isNew() ) 
            {
               collAttributeVotes = new Vector();       
            } 
            else
            {
                   criteria.add(AttributeVotePeer.OPTION_ID, getOptionId() );               
                   collAttributeVotes = AttributeVotePeer.doSelectJoinTurbineUser(criteria);
            }
            
            
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(AttributeVotePeer.OPTION_ID, getOptionId() );               
               if ( !lastAttributeVotesCriteria.equals(criteria)  )
            {
                collAttributeVotes = AttributeVotePeer.doSelectJoinTurbineUser(criteria);
            }
        }
        lastAttributeVotesCriteria = criteria; 

        return collAttributeVotes;
    }
     



     
    
    private static Vector fieldNames_ = null;

    /**
     * Generate a list of field names.
     */
    public static Vector getFieldNames()
    {
      if (fieldNames_ == null)
      {
        fieldNames_ = new Vector();
            fieldNames_.add("OptionId");
            fieldNames_.add("AttributeId");
            fieldNames_.add("DisplayValue");
            fieldNames_.add("NumericValue");
          }
      return fieldNames_;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.
     */
    public Object getByName(String name)
    {
            if (name.equals("OptionId"))
	{
	  	    return getOptionId();
	  	}
            if (name.equals("AttributeId"))
	{
	  	    return getAttributeId();
	  	}
            if (name.equals("DisplayValue"))
	{
	  	    return getDisplayValue();
	  	}
            if (name.equals("NumericValue"))
	{
	  	    return new Integer(getNumericValue());
	  	}
            return null; 
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     */
    public Object getByPeerName(String name)
    {
            if (name == AttributeOptionPeer.OPTION_ID )
	    {
	  	    return getOptionId();
	  	}
            if (name == AttributeOptionPeer.ATTRIBUTE_ID )
	    {
	  	    return getAttributeId();
	  	}
            if (name == AttributeOptionPeer.DISPLAY_VALUE )
	    {
	  	    return getDisplayValue();
	  	}
            if (name == AttributeOptionPeer.NUMERIC_VALUE )
	    {
	  	    return new Integer(getNumericValue());
	  	}
            return null; 
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     */
    public Object getByPosition(int pos)
    {
            if ( pos == 0 )
	{
	  	    return getOptionId();
	  	}
            if ( pos == 1 )
	{
	  	    return getAttributeId();
	  	}
            if ( pos == 2 )
	{
	  	    return getDisplayValue();
	  	}
            if ( pos == 3 )
	{
	  	    return new Integer(getNumericValue());
	  	}
                return null; 
    }

     	

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     */
    public void save() throws Exception
    {
         DBConnection dbCon = null;
        try
        {
            dbCon = BasePeer.beginTransaction(
                AttributeOptionPeer.getMapBuilder()
                .getDatabaseMap().getName());
            save(dbCon);
        }
        catch(Exception e)
        {
            BasePeer.rollBackTransaction(dbCon);
            throw e;
        }
        BasePeer.commitTransaction(dbCon);

     }

      // flag to prevent endless save loop, if this object is referenced
    // by another object which falls in this transaction.
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     */
    public void save(DBConnection dbCon) throws Exception
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;
          if (isModified())
        {
            if (isNew())
            {
                AttributeOptionPeer.doInsert((AttributeOption)this, dbCon);
            }
            else
            {
                AttributeOptionPeer.doUpdate((AttributeOption)this, dbCon);
                setNew(false);
            }
        }

                                    
                
          if (collAttributeValues != null )
          {
              for (int i=0; i<collAttributeValues.size(); i++)
              {
                  ((AttributeValue)collAttributeValues.get(i)).save(dbCon);
              }
          }
                                        
                
          if (collAttributeVotes != null )
          {
              for (int i=0; i<collAttributeVotes.size(); i++)
              {
                  ((AttributeVote)collAttributeVotes.get(i)).save(dbCon);
              }
          }
                  alreadyInSave = false;
      }
      }

                                                
    /** 
     * Set the Id using pk values.
     *
     * @param SimpleKey option_id
     */
    public void setPrimaryKey(
     SimpleKey option_id
                ) throws Exception
    {
         setOptionId(option_id);
    }
    



    /** 
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey() 
    {
        return getOptionId();
    }

    /**
     * Makes a copy of this object.  
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public AttributeOption copy() throws Exception
    {
        AttributeOption copyObj = new AttributeOption();
        copyObj.setOptionId(option_id);
        copyObj.setAttributeId(attribute_id);
        copyObj.setDisplayValue(display_value);
        copyObj.setNumericValue(numeric_value);

                                
                
         List v = copyObj.getAttributeValues();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
                                            
                
         v = copyObj.getAttributeVotes();
         for (int i=0; i<v.size(); i++)
         {
             ((BaseObject)v.get(i)).setNew(true);
         }
            
            
        copyObj.setOptionId(null);
                    return copyObj;
    }             
}

