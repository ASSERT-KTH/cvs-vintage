

package org.tigris.scarab.om;

import java.io.Serializable;
import java.util.List;
import java.util.LinkedList;

import org.apache.torque.TorqueException;
import org.apache.torque.om.Persistent;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.manager.CacheListener;
import org.apache.torque.util.Criteria;
import org.tigris.scarab.util.Log;

/** 
 * This class manages Issue objects.  
 * The skeleton for this class was autogenerated by Torque  * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 */
public class IssueManager
    extends BaseIssueManager
    implements CacheListener
{
    private static final String ISSUE = 
        "Issue";
    protected static final String GET_ISSUE_BY_ID = 
        "getIssueById";

    /**
     * Creates a new <code>IssueManager</code> instance.
     *
     * @exception TorqueException if an error occurs
     */
    public IssueManager()
        throws TorqueException
    {
        super();
        setRegion(getClassName().replace('.', '_'));
    }

    public static Issue getIssueById(String id)
    {
        Issue.FederatedId fid = new Issue.FederatedId(id);
        return getIssueById(fid);
    }

    public static Issue getIssueById(Issue.FederatedId fid)
    {
        return getManager().getIssueByIdImpl(fid);
    }

    public static Issue getIssueByIdImpl(Issue.FederatedId fid)
    {
        Issue result = null;
        Object obj = getMethodResult().get(ISSUE, GET_ISSUE_BY_ID, fid); 
        if ( obj != null ) 
        {        
            try 
            {
                Issue cachedById = (Issue)obj;
                Issue cachedByPk = getInstance(cachedById.getIssueId());
                // we need to compare this to the cached by pk, issue, in case
                // the issue was moved.
                if (cachedById.getFederatedId().equals(cachedByPk.getFederatedId())) 
                {
                    result = cachedByPk;
                }
                else 
                {
                    getMethodResult().remove(ISSUE, GET_ISSUE_BY_ID, fid);
                }
            }
            catch (TorqueException e)
            {
                Log.get().error("", e);
            }
        }

        if ( result == null ) 
        {        
            Criteria crit = new Criteria(5)
                .add(IssuePeer.ID_PREFIX, fid.getPrefix())
                .add(IssuePeer.ID_COUNT, fid.getCount());
            crit.setIgnoreCase(true);
            
            if (  fid.getDomain() != null ) 
            {
                crit.add(IssuePeer.ID_DOMAIN, fid.getDomain());    
            }
            
            try
            {
                result = (Issue)IssuePeer.doSelect(crit).get(0);
                IssueManager.putInstance(result);
                getMethodResult().put(result, ISSUE, GET_ISSUE_BY_ID, fid);
            }
            catch (Exception e) 
            {
                Log.get().error("", e);
                // return null
            }
        }

        return result;
    }

    /**
     * Notify other managers with relevant CacheEvents.
     */
    protected void registerAsListener()
    {
        AttributeValueManager.addCacheListener(this);
        AttachmentManager.addCacheListener(this);
        DependManager.addCacheListener(this);
        ActivityManager.addCacheListener(this);
        AttributeManager.addCacheListener(this);
    }


    // -------------------------------------------------------------------
    // CacheListener implementation

    public void addedObject(Persistent om)
    {
        if (om instanceof AttributeValue) 
        {
            AttributeValue castom = (AttributeValue)om;
            ObjectKey key = castom.getIssueId();
            Serializable obj = (Serializable)cacheGet(key);
            if (obj != null) 
            {
                getMethodResult().remove(obj, Issue.GET_MODULE_ATTRVALUES_MAP);
                getMethodResult().remove(obj, Issue.GET_USER_ATTRIBUTEVALUES);
            }
        }
        else if (om instanceof Attachment) 
        {
            Attachment castom = (Attachment)om;
            ObjectKey key = castom.getIssueId();
            Serializable obj = (Serializable)cacheGet(key);
            if (obj != null) 
            {
                getMethodResult().remove(obj, Issue.GET_URLS);
                getMethodResult().removeAll(obj, Issue.GET_COMMENTS);
                getMethodResult().removeAll(obj, 
                    Issue.GET_EXISTING_ATTACHMENTS);
            }
        }
        else if (om instanceof Depend) 
        {
            Depend castom = (Depend)om;
            ObjectKey key = castom.getObserverId();
            Serializable obj = (Serializable)cacheGet(key);
            if (obj != null) 
            {
                getMethodResult().remove(obj, Issue.GET_PARENTS);
            }
            key = castom.getObservedId();
            obj = (Serializable)cacheGet(key);
            if (obj != null) 
            {
                getMethodResult().remove(obj, Issue.GET_CHILDREN);
            }
        }
        else if (om instanceof Activity) 
        {
            Activity castom = (Activity)om;
            ObjectKey key = castom.getIssueId();
            Serializable obj = (Serializable)cacheGet(key);
            if (obj != null) 
            {
                getMethodResult().removeAll(obj, Issue.GET_ACTIVITY);
            }
        }
        else if (om instanceof Attribute) 
        {
            getMethodResult().clear();
        }
    }

    public void refreshedObject(Persistent om)
    {
        addedObject(om);            
    }

    /** fields which interest us with respect to cache events */
    public List getInterestedFields()
    {
        List interestedCacheFields = new LinkedList();
        interestedCacheFields.add(AttributeValuePeer.ISSUE_ID);
        interestedCacheFields.add(AttachmentPeer.ISSUE_ID);
        interestedCacheFields.add(DependPeer.OBSERVER_ID);
        interestedCacheFields.add(DependPeer.OBSERVED_ID);
        interestedCacheFields.add(AttributePeer.ATTRIBUTE_ID);
        return interestedCacheFields;
    }
}





