package org.tigris.scarab.om;

// JDK classes
import java.util.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.StringUtils;
import org.apache.turbine.util.ParameterParser;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

/** 
  * The skeleton for this class was autogenerated by Torque on:
  *
  * [Wed Feb 28 16:36:26 PST 2001]
  *
  * You should add additional methods to this class to meet the
  * application requirements.  This class will only be generated as
  * long as it does not already exist in the output directory.

  */
public class AttributeOption 
    extends BaseAttributeOption
    implements Persistent
{

    private static final Comparator comparator = new Comparator()
        {
            public int compare(Object obj1, Object obj2)
            {
                int result = 1;
                AttributeOption opt1 = (AttributeOption)obj1; 
                AttributeOption opt2 = (AttributeOption)obj2;
                if (opt1.getNumericValue() < opt2.getNumericValue()) 
                {
                    result = -1;
                }
                else if (opt1.getNumericValue() == opt2.getNumericValue()) 
                {
                    result = opt1.getName()
                        .compareTo(opt2.getName()); 
                }
                return result;
            }            
        };

    /**
     * Compares numeric value and in cases where the numeric value
     * is the same it compares the diplay values.
     */
    public static Comparator getComparator()
    {
        return comparator;
    }

    // need a local reference
    private Attribute aAttribute;                 
    public Attribute getAttribute() throws Exception
    {
        if ( aAttribute==null && (getAttributeId() != null) )
        {
            aAttribute = Attribute.getInstance(getAttributeId());
            
            // make sure the parent attribute is in synch.
            super.setAttribute(aAttribute);            
        }
        return aAttribute;
    }

    public void setAttribute(Attribute v) throws Exception
    {
        aAttribute = v;
        super.setAttribute(v);
    }

}



