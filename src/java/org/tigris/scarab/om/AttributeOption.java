package org.tigris.scarab.om;

// JDK classes
import java.util.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.StringUtils;
import org.apache.turbine.util.ParameterParser;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

/** 
  * The skeleton for this class was autogenerated by Torque on:
  *
  * [Wed Feb 28 16:36:26 PST 2001]
  *
  * You should add additional methods to this class to meet the
  * application requirements.  This class will only be generated as
  * long as it does not already exist in the output directory.

  */
public class AttributeOption 
    extends BaseAttributeOption
    implements Persistent
{
    private static HashMap parentChildMap;
    private static HashMap childParentMap;

    static
    {
        try
        {            
            buildParentChildMaps();
        }
        catch (Exception e)
        {
            Log.error("Unable to setup option relationships", e);
        }
    }

    private static final Comparator comparator = new Comparator()
        {
            public int compare(Object obj1, Object obj2)
            {
                int result = 1;
                AttributeOption opt1 = (AttributeOption)obj1; 
                AttributeOption opt2 = (AttributeOption)obj2;
                if (opt1.getNumericValue() < opt2.getNumericValue()) 
                {
                    result = -1;
                }
                else if (opt1.getNumericValue() == opt2.getNumericValue()) 
                {
                    result = opt1.getName()
                        .compareTo(opt2.getName()); 
                }
                return result;
            }            
        };

    /**
     * Compares numeric value and in cases where the numeric value
     * is the same it compares the diplay values.
     */
    public static Comparator getComparator()
    {
        return comparator;
    }

    // need a local reference
    private Attribute aAttribute;                 
    public Attribute getAttribute() throws Exception
    {
        if ( aAttribute==null && (getAttributeId() != null) )
        {
            aAttribute = Attribute.getInstance(getAttributeId());
            
            // make sure the parent attribute is in synch.
            super.setAttribute(aAttribute);            
        }
        return aAttribute;
    }

    public void setAttribute(Attribute v) throws Exception
    {
        aAttribute = v;
        super.setAttribute(v);
    }

    // public AttributeOption

    /**
     * Is this an ancestor of the option 
     */
    public boolean isParentOf(AttributeOption option)
    {
        boolean result = false;
        ObjectKey[] children = (ObjectKey[])
            parentChildMap.get(getPrimaryKey());
        if (children != null) 
        {
            for ( int i=children.length-1; i>=0; i-- ) 
            {
                if (children[i].equals(option.getPrimaryKey()))
                {
                    result = true;
                    break;
                }
            }
        }
        return result;
    }
    /**
     * Is this an decendent of the option 
     */
    public boolean isChildOf(AttributeOption option)
    {
        boolean result = false;
        ObjectKey[] children = (ObjectKey[])
            parentChildMap.get(option.getPrimaryKey());
        if (children != null) 
        {
            for ( int i=children.length-1; i>=0; i-- ) 
            {
                if (children[i].equals(getPrimaryKey()))
                {
                    result = true;
                    break;
                }
            }
        }
        return result;
    }

    public boolean hasChildren()
    {
        return parentChildMap.containsKey(getPrimaryKey()); 
    }
        
    public static void buildParentChildMaps()
        throws Exception
    {
        HashMap parentChildMap = new HashMap();
        HashMap childParentMap = new HashMap();

        Criteria crit = new Criteria()
            .add(ROptionOptionPeer.RELATIONSHIP_ID, 
                 OptionRelationship.PARENT_CHILD);

        List relations = ROptionOptionPeer.doSelect(crit);

        for ( int i=relations.size()-1; i>=0; i-- ) 
        {
            ROptionOption relation = (ROptionOption)relations.get(i);
            
            ArrayList children = null; 
            if ( parentChildMap.containsKey(relation.getOption1Id())) 
            {
                children = (ArrayList) 
                    parentChildMap.get(relation.getOption1Id());
            }
            else 
            {
                children = new ArrayList();
            }
            children.add(relation.getOption2Id());

            ArrayList parents = null; 
            if ( childParentMap.containsKey(relation.getOption2Id())) 
            {
                parents = (ArrayList) 
                    childParentMap.get(relation.getOption2Id());
            }
            else 
            {
                parents = new ArrayList();
            }
            parents.add(relation.getOption1Id());
        }

        // clean up, switch to arrays
        Iterator keys = parentChildMap.keySet().iterator();
        while ( keys.hasNext() ) 
        {
            Object key = keys.next();
            ArrayList children = (ArrayList)parentChildMap.get(key);
            Object[] childArray = 
                children.toArray(new ObjectKey[children.size()]);
            parentChildMap.put(key, childArray);
        }
        keys = childParentMap.keySet().iterator();
        while ( keys.hasNext() ) 
        {
            Object key = keys.next();
            ArrayList parents = (ArrayList)childParentMap.get(key);
            Object[] parentArray = 
                parents.toArray(new ObjectKey[parents.size()]);
            childParentMap.put(key, parentArray);
        }
        
        AttributeOption.parentChildMap = parentChildMap;
        AttributeOption.childParentMap = childParentMap;
    }
}

