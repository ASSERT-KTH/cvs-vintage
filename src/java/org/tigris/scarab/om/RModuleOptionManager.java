

package org.tigris.scarab.om;

import java.util.List;
import java.util.HashMap;

import org.apache.torque.TorqueException;
import org.apache.torque.om.Persistent;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.NumberKey;

/** 
 * This class manages RModuleOption objects.  
 * The skeleton for this class was autogenerated by Torque  * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 */
public class RModuleOptionManager
    extends BaseRModuleOptionManager
{
    /**
     * Creates a new <code>RModuleOptionManager</code> instance.
     *
     * @exception TorqueException if an error occurs
     */
    public RModuleOptionManager()
        throws TorqueException
    {
        super();
        validFields = new HashMap();
        validFields.put(RModuleOptionPeer.MODULE_ID, null);
    }

    protected Persistent putInstanceImpl(Persistent om)
        throws TorqueException
    {
        Persistent oldOm = super.putInstanceImpl(om);
        List listeners = (List)listenersMap.get(RModuleOptionPeer.MODULE_ID);
        notifyListeners(listeners, oldOm, om);
        return oldOm;
    }

    public static final RModuleOption getInstance(Integer moduleId,  
        Integer issueTypeId, Integer optionId)
        throws TorqueException
    {
        SimpleKey[] keys = {
            new NumberKey(moduleId.toString()), 
            new NumberKey(issueTypeId.toString()), 
            new NumberKey(optionId.toString())
        };
        return getInstance(new ComboKey(keys));
    }

    public static final RModuleOption getInstance(Module module, 
        IssueType issueType, AttributeOption option)
        throws TorqueException
    {
        SimpleKey[] keys = {
            SimpleKey.keyFor(module.getModuleId()),
            SimpleKey.keyFor(issueType.getIssueTypeId()),
            SimpleKey.keyFor(option.getOptionId())
        };
        return getInstance(new ComboKey(keys));
    }
}
