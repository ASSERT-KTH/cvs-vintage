package org.tigris.scarab.om;

// JDK classes
import java.util.*;
import java.sql.Connection;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.services.resources.TurbineResources;
import org.apache.turbine.util.StringUtils;
import org.apache.turbine.util.RunData;
import org.apache.turbine.util.ParameterParser;
import org.apache.turbine.util.Log;
import org.apache.turbine.services.db.TurbineDB;
import org.apache.turbine.util.db.pool.DBConnection;
import org.apache.turbine.util.db.map.DatabaseMap;

import org.tigris.scarab.util.ScarabConstants;

/** 
  * The skeleton for this class was autogenerated by Torque on:
  *
  * [Wed Feb 28 16:36:26 PST 2001]
  *
  * You should add additional methods to this class to meet the
  * application requirements.  This class will only be generated as
  * long as it does not already exist in the output directory.

  */
public class Issue 
    extends BaseIssue
    implements Persistent
{

    /**
     * AttributeValues that are relevant to the issue's current module.
     * Empty AttributeValues that are relevant for the module, but have 
     * not been set for the issue are included.
     */
    public HashMap getModuleAttributeValuesMap() throws Exception
    {
        Criteria crit = new Criteria(2)
            .add(RModuleAttributePeer.DELETED, false);        
        Attribute[] attributes = getModule().getAttributes(crit);
        HashMap siaValuesMap = getAttributeValuesMap();

        HashMap map = new HashMap( (int)(1.25*attributes.length + 1) );

        for ( int i=0; i<attributes.length; i++ ) 
        {
            String key = attributes[i].getName().toUpperCase();

            if ( siaValuesMap.containsKey(key) ) 
            {
                map.put( key, siaValuesMap.get(key) );
            }
            else 
            {
                AttributeValue aval = AttributeValue
                    .getNewInstance(attributes[i], this);
                addAttributeValues(aval);
                map.put( key, aval );
            }
        }
        return map;
    }


    /**
     * AttributeValues that are set for this Issue
     */
    public HashMap getAttributeValuesMap() throws Exception
    {
        Criteria crit = new Criteria(2)
            .add(AttributeValuePeer.DELETED, false);        
        List siaValues = getAttributeValues(crit);
        HashMap map = new HashMap( (int)(1.25*siaValues.size() + 1) );
        for ( int i=0; i<siaValues.size(); i++ ) 
        {
            AttributeValue att = (AttributeValue) siaValues.get(i);
            String name = att.getAttribute().getName();
            map.put(name.toUpperCase(), att);
        }

        return map;
    }

    /**
     * AttributeValues that are set for this issue and
     * Empty AttributeValues that are relevant for the module, but have 
     * not been set for the issue are included.
     */
    public HashMap getAllAttributeValuesMap() throws Exception
    {
        Map moduleAtts = getModuleAttributeValuesMap();
        Map issueAtts = getAttributeValuesMap();
        HashMap allValuesMap = new HashMap( (int)(1.25*(moduleAtts.size() + 
                                            issueAtts.size())+1) );

        allValuesMap.putAll(moduleAtts);
        allValuesMap.putAll(issueAtts);
        return allValuesMap;
    }


    public boolean containsMinimumAttributeValues()
        throws Exception
    {
        Criteria crit = new Criteria(3)
            .add(RModuleAttributePeer.DELETED, false)        
            .add(RModuleAttributePeer.REQUIRED, true);        
        Attribute[] attributes = getModule().getAttributes(crit);
        //        Vector moduleAttributes = 
        //    getModule().getRModuleAttributes(crit);
        
        boolean result = true;
        Iterator i = getModuleAttributeValuesMap()
            .values().iterator();
        while (i.hasNext()) 
        {
            AttributeValue aval = (AttributeValue)i.next();
            if ( aval.getOptionId() == null && aval.getValue() == null ) 
            {
                for ( int j=attributes.length-1; j>=0; j-- ) 
                {
                    if ( aval.getAttribute().getPrimaryKey().equals(
                         attributes[j].getPrimaryKey() )) 
                    {
System.out.println(aval.getAttribute().getName() + " was not set. "
                   + aval.toString() );
                        result = false;
                        break;
                    }                    
                }

                break;
            }
        }

        return result;
    }       

    public void save()
        throws Exception
    {
        // remove unset AttributeValues before saving
        Criteria crit = new Criteria(2)
            .add(AttributeValuePeer.DELETED, false);        
        List attValues = getAttributeValues(crit);
        for ( int i=0; i<attValues.size(); i++ ) 
        {
            AttributeValue attVal = (AttributeValue) attValues.get(i);
            if ( attVal.getOptionId() == null && attVal.getValue() == null ) 
            {
                attValues.remove(i);
            }
        }

        // set the issue id
        if ( isNew() ) 
        {
            String prefix = getModule().getCode();

            /* thinking of keeping this in separate column
            String instanceCode = TurbineResources
                .getString(ScarabConstants.INSTANCE_NAME);
            if ( instanceCode != null && instanceCode.length() > 0 ) 
            {
                prefix = instanceCode + "-" + prefix;
            }
            */

            DatabaseMap dbMap = IssuePeer.getTableMap().getDatabaseMap();
            DBConnection dbCon = null;
            int numId = -1; 
            try
            {
                dbCon = TurbineDB.getConnection( dbMap.getName() );
                Connection con = dbCon.getConnection();
                numId = dbMap.getIDBroker().getIdAsInt(con, prefix);
            }
            finally
            {
                TurbineDB.releaseConnection(dbCon);
            }

            setIdPrefix(prefix);
            setIdCount(numId);
            
        }
        

        super.save();
    }       


    /**
        calls the doPopulate() method with validation false
    */
    public Issue doPopulate(RunData data)
        throws Exception
    {
        return doPopulate(data, false);
    }

    /**
        populates project based on the existing project data from POST
    */
    public Issue doPopulate(RunData data, boolean validate)
        throws Exception
    {
        String prefix = ""; //getQueryKey().toLowerCase();

        if ( isNew() ) 
        {
            String project_id = 
                data.getParameters().getString(prefix + "id"); 
            if (validate)
            {
                if (project_id == null)
                    throw new Exception ( "Missing project_id!" );
            }
            setPrimaryKey(new NumberKey(project_id));
            setCreatedBy( (NumberKey)
                          ((ScarabUser)data.getUser()).getPrimaryKey() );
            setCreatedDate( new Date() );
        }

        if (validate)
        {
        }

        return this;
    }

}



