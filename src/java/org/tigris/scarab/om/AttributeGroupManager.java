

package org.tigris.scarab.om;

import java.util.List;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;
import java.io.Serializable;

import org.apache.torque.om.ObjectKey;
import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.om.Persistent;
import org.apache.torque.manager.CacheListener;

/** 
 * This class manages AttributeGroup objects.  
 * The skeleton for this class was autogenerated by Torque  * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 */
public class AttributeGroupManager
    extends BaseAttributeGroupManager
    implements CacheListener
{
    /**
     * Creates a new <code>AttributeGroupManager</code> instance.
     *
     * @exception TorqueException if an error occurs
     */
    public AttributeGroupManager()
        throws TorqueException
    {
        super();
        setRegion(getClassName().replace('.', '_'));
        validFields = new HashMap();
        validFields.put(AttributeGroupPeer.MODULE_ID, null);
    }

    protected Persistent putInstanceImpl(Persistent om)
        throws TorqueException
    {
        Persistent oldOm = super.putInstanceImpl(om);
        List listeners = (List)listenersMap.get(AttributeGroupPeer.MODULE_ID);
        notifyListeners(listeners, oldOm, om);
        return oldOm;
    }

    protected AttributeGroup getInstanceImpl()
    {
        return new AttributeGroup();
    }

    /**
     * Notify other managers with relevant CacheEvents.
     */
    protected void registerAsListener()
    {
        RAttributeAttributeGroupManager.addCacheListener(this);
    }

    // -------------------------------------------------------------------
    // CacheListener implementation

    public void addedObject(Persistent om)
    {
        if (om instanceof RAttributeAttributeGroup)
        {
            RAttributeAttributeGroup castom = (RAttributeAttributeGroup)om;
            ObjectKey key = castom.getGroupId();
            Serializable obj = (Serializable)cacheGet(key);
            if (obj != null) 
            {
                getMethodResult().remove(obj, 
                    AttributeGroup.GET_ATTRIBUTES);
            }
        }
    }

    public void refreshedObject(Persistent om)
    {
        addedObject(om);
    }

    /** fields which interest us with respect to cache events */
    public List getInterestedFields()
    {
        List interestedCacheFields = new LinkedList();
        interestedCacheFields.add(RAttributeAttributeGroupPeer.GROUP_ID);
        return interestedCacheFields;
    }
}




