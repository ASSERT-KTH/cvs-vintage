/*
 * @(#)TagSupport.java	1.11 99/10/14
 * 
 * Copyright (c) 1999 Sun Microsystems, Inc. All Rights Reserved.
 * 
 * This software is the confidential and proprietary information of Sun
 * Microsystems, Inc. ("Confidential Information").  You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Sun.
 * 
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
 * SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR ANY DAMAGES
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
 * THIS SOFTWARE OR ITS DERIVATIVES.
 * 
 * CopyrightVersion 1.0
 */
 
package javax.servlet.jsp.tagext;

import javax.servlet.jsp.*;
import javax.servlet.jsp.tagext.*;

import javax.servlet.*;

import java.io.Writer;
import java.io.Serializable;

import java.util.Hashtable;
import java.util.Enumeration;

/**
 * Actions in a Tag Library are defined through subclasses of Tag.
 */

public class TagSupport implements Tag, Serializable {

    /**
     * Find the instance of a given class type that is closest to a given
     * instance.
     * This class is used for coordination among cooperating tags.
     *
     * @param the subclass of Tag or interface to be matched
     * @return the nearest ancestor that implements the interface
     * or is an instance of the class specified
     */

    public static final Tag findAncestorWithClass(Tag from, Class klass) {
	boolean isInterface = false;

	if (from == null ||
	    klass == null ||
	    (!Tag.class.isAssignableFrom(klass) &&
	     !(isInterface = klass.isInterface()))) {
	    return null;
	}

	for (;;) {
	    Tag tag = from.getParent();

	    if (tag == null) {
		return null;
	    }

	    if ((isInterface && klass.isInstance(tag)) ||
	        klass.equals(tag.getClass()))
		return tag;
	    else
		from = tag;
	}
    }

    /**
     * Default constructor, all subclasses are required to only define
     * a public constructor with the same signature, and to call the
     * superclass constructor.
     *
     * This constructor is called by the code generated by the JSP
     * translator.
     *
     * @param libraryPrefix The namespace prefix used for this library.
     * For example "jsp:".
     * @param tagName The name of the element or yag, for example "useBean"
     */

    public TagSupport() { }

    /**
     * doStartTag(), doEndTag() are most basic.
     * setBodyOut(), doBeforeBody(), and doAfterBody() deal with body
     * 
     * In many cases not all of them are redefined.
     */
  
    // Actions for basic start/end processing.

    /**
     * Process the start tag for this instance.
     *
     * The doStartTag() method assumes that all setter methods have been
     * invoked before.
     *
     * When this method is invoked, the body has not yet been invoked.
     *
     * @returns EVAL_BODY if the tag wants to process body, SKIP_BODY if it
     * does ont want to process it.
     */
 
    public int doStartTag() throws JspException {
        return SKIP_BODY;
    }

    /**
     * Process the end tag. This method will be called on all Tag objects.
     *
     * All instance state associated with this instance must be reset.
     */

    public int doEndTag() throws JspException {
	return EVAL_PAGE;
    }

    /**
     * release() called after doEndTag() to reset state
     */

    public void release() {
	parent          = null;
    }

    /**
     * Methods to access state
     */

    /**
     * Set the nesting tag of this tag.
     */

    public void setParent(Tag t) {
	parent = t;
    }

    /**
     * The Tag instance enclosing this tag instance.
     *
     * @return the parent tag instance or null
     */

    public Tag getParent() {
	return parent;
    }

    /**
     * Set the id attribute
     */

    public void setTagId(String id) {
	this.id = id;
    }

    /**
     * The value of the id attribute of this tag; or null.
     *
     * @return the value of the id attribute, or null
     */
    
    public String getTagId() {
	return id;
    }

    /**
     * set the page context
     */

    public void setPageContext(PageContext pageContext) {
	this.pageContext = pageContext;
    }

    /**
     * Set a value
     */

    public void setValue(String k, Object o) {
	if (values == null) {
	    values = new Hashtable();
	}
	values.put(k, o);
    }

    /**
     * Get a value
     */

    public Object getValue(String k) {
	if (values == null) {
	    return null;
	} else {
	    return values.get(k);
	}
    }

    /**
     * Remove a value
     */

    public void removeValue(String k) {
	if (values != null) {
	    values.remove(k);
	}
    }

    /**
     * Enumerate the values
     */

    public Enumeration getValues() {
	if (values == null) {
	    return null;
	}
	return values.keys();
    }

    // private fields

    private   Tag         parent;
    private   Hashtable   values;
    protected String	  id;

    // protected fields

    protected PageContext pageContext;
}

