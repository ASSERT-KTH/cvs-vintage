/*
 * JBoss, the OpenSource J2EE webOS
 *
 * Distributable under LGPL license.
 * See terms of license at gnu.org.
 */
package org.jboss.aspect.proxy;

import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionFactory;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.jboss.aspect.AspectClassLoader;
import org.jboss.aspect.AspectComposition;
import org.jboss.proxy.compiler.InvocationHandler;
import org.jboss.proxy.compiler.ProxyImplementationFactory;

/**
 * Used to add a default constructor to the Proxy classes generated by 
 * the ProxyCompiler.  A default constructor in the Proxy class is need
 * if you want use the AspectClassLoader and then be able to instanciate 
 * instances of the Proxy class easily.
 * 
 * @author <a href="mailto:hchirino@jboss.org">Hiram Chirino</a>
 */
public class AspectProxyImplementationFactory extends ProxyImplementationFactory implements Constants
{ 
	
	/**
	 * @see org.jboss.proxy.compiler.ProxyImplementationFactory#createConstructor()
	 */
	public Method[] createConstructors() {
		/*
		InstructionList il = getIl();
		*/
		String proxyClassName = getProxyClassName();
		String superClassName = getSuperClassName();

		InstructionFactory _factory = getIFactory();
		ConstantPoolGen _cp = getConstPool();
		
	    InstructionList il = new InstructionList();
	    MethodGen method = new MethodGen(ACC_PUBLIC, Type.VOID, Type.NO_ARGS, new String[] {  }, "<init>", proxyClassName, il, _cp);


	////////////////////////////////////////////////////////////////
	//
	// Start of Generated Code Section.  Use ProxyTemplate to generate
	// the following code.  superCassName and proxyClassName will
	// need to be adjusted.
	//
	////////////////////////////////////////////////////////////////

    InstructionHandle ih_0 = il.append(_factory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createInvoke(superClassName, "<init>", Type.VOID, Type.NO_ARGS, Constants.INVOKESPECIAL));
    InstructionHandle ih_4 = il.append(_factory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createInvoke("java.lang.Object", "getClass", new ObjectType("java.lang.Class"), Type.NO_ARGS, Constants.INVOKEVIRTUAL));
    il.append(_factory.createInvoke("java.lang.Class", "getClassLoader", new ObjectType("java.lang.ClassLoader"), Type.NO_ARGS, Constants.INVOKEVIRTUAL));
    il.append(_factory.createStore(Type.OBJECT, 1));
    InstructionHandle ih_12;
    BranchInstruction goto_12 = _factory.createBranchInstruction(Constants.GOTO, null);
    ih_12 = il.append(goto_12);
    InstructionHandle ih_15 = il.append(_factory.createLoad(Type.OBJECT, 1));
    il.append(new INSTANCEOF(_cp.addClass(new ObjectType("org.jboss.aspect.AspectClassLoader"))));
        BranchInstruction ifeq_19 = _factory.createBranchInstruction(Constants.IFEQ, null);
    il.append(ifeq_19);
    InstructionHandle ih_22 = il.append(_factory.createLoad(Type.OBJECT, 1));
    il.append(_factory.createCheckCast(new ObjectType("org.jboss.aspect.AspectClassLoader")));
    il.append(_factory.createStore(Type.OBJECT, 2));
    InstructionHandle ih_27 = il.append(_factory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createInvoke("java.lang.Object", "getClass", new ObjectType("java.lang.Class"), Type.NO_ARGS, Constants.INVOKEVIRTUAL));
    il.append(_factory.createInvoke("org.jboss.aspect.AspectClassLoader", "getAspectComposition", new ObjectType("org.jboss.aspect.AspectComposition"), new Type[] { new ObjectType("java.lang.Class") }, Constants.INVOKEVIRTUAL));
    il.append(_factory.createStore(Type.OBJECT, 3));
    InstructionHandle ih_36 = il.append(_factory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createNew("org.jboss.aspect.proxy.AspectInvocationHandler"));
    il.append(InstructionConstants.DUP);
    il.append(_factory.createLoad(Type.OBJECT, 3));
    il.append(_factory.createLoad(Type.OBJECT, 3));
    il.append(_factory.createFieldAccess("org.jboss.aspect.AspectComposition", "baseClass", new ObjectType("java.lang.Class"), Constants.GETFIELD));
    il.append(_factory.createInvoke("org.jboss.aspect.proxy.AspectInvocationHandler", "<init>", Type.VOID, new Type[] { new ObjectType("org.jboss.aspect.AspectComposition"), Type.OBJECT }, Constants.INVOKESPECIAL));
    il.append(_factory.createFieldAccess(proxyClassName, "invocationHandler", new ObjectType("org.jboss.proxy.compiler.InvocationHandler"), Constants.PUTFIELD));
    InstructionHandle ih_52 = il.append(_factory.createReturn(Type.VOID));
    InstructionHandle ih_53 = il.append(_factory.createLoad(Type.OBJECT, 1));
    il.append(_factory.createInvoke("java.lang.ClassLoader", "getParent", new ObjectType("java.lang.ClassLoader"), Type.NO_ARGS, Constants.INVOKEVIRTUAL));
    il.append(_factory.createStore(Type.OBJECT, 1));
    InstructionHandle ih_58 = il.append(_factory.createLoad(Type.OBJECT, 1));
        BranchInstruction ifnonnull_59 = _factory.createBranchInstruction(Constants.IFNONNULL, ih_15);
    il.append(ifnonnull_59);
    InstructionHandle ih_62 = il.append(_factory.createNew("java.lang.RuntimeException"));
    il.append(InstructionConstants.DUP);
    il.append(new PUSH(_cp, "ClassLoader structure invalid: Could not find a parent classloader of type AspectClassLoader"));
    il.append(_factory.createInvoke("java.lang.RuntimeException", "<init>", Type.VOID, new Type[] { Type.STRING }, Constants.INVOKESPECIAL));
    InstructionHandle ih_71 = il.append(InstructionConstants.ATHROW);
    goto_12.setTarget(ih_58);
    ifeq_19.setTarget(ih_53);
    method.setMaxStack();
    method.setMaxLocals();

	////////////////////////////////////////////////////////////////
	//
	// End of Generated Code Section.
	//
	////////////////////////////////////////////////////////////////

	    Method myConstructor = method.getMethod();
	    il.dispose();

		Method baseSet[] = super.createConstructors();
		return new Method[] { baseSet[0], myConstructor};

	}

}
