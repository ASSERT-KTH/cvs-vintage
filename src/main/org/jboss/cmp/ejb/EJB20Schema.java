/*************************************** *                                     * *  JBoss: The OpenSource J2EE WebOS   * *                                     * *  Distributable under LGPL license.  * *  See terms of license at gnu.org.   * *                                     * ***************************************/package org.jboss.cmp.ejb;import java.util.HashMap;import java.util.HashSet;import java.util.Map;import java.util.Set;import org.jboss.persistence.schema.AbstractComplexType;import org.jboss.persistence.schema.AbstractSchema;import org.jboss.persistence.schema.AbstractType;import org.jboss.persistence.schema.DuplicateNameException;/** * An implementation of an AbstractSchema for EJB based systems. * This has three (yes, three) namespaces: * <ul><li>EJB Names (from <ejb-name> elements)</li> * <li>Abstract Schema Names (from <abstract-schema-name> elements)</li> * <li>Java Class Names (from types and field mappings)</li></ul> * The abstract schema implementation is constructed from the Abstract Schema * Names, cmp-field and cmr-field names, and the Java classes that implement * them. */public class EJB20Schema implements AbstractSchema{   private final Map classMap;   private Set ejbNames = new HashSet();   private final Map entitiesByEJBName = new HashMap();   private final Map entitiesBySchemaName = new HashMap();   private final Map relationsByName = new HashMap();   /**    * Initialize the builtin and default class definitions    * Primitive types are used for the builtins.    */   private static final HashMap builtins;   private static final HashMap baseClassMap;   static {      builtins = new HashMap();      baseClassMap = new HashMap();      initBuiltinClassType(new JavaType(void.class, AbstractType.Family.UNKNOWN));      initBuiltinClassType(new JavaType(Object.class, AbstractType.Family.OBJECT));      initBuiltinClassType(new JavaType(boolean.class, AbstractType.Family.BOOLEAN));      initBuiltinClassType(new JavaType(String.class, AbstractType.Family.STRING));      initBuiltinClassType(new JavaType(int.class, AbstractType.Family.INTEGER));      initBuiltinClassType(new JavaType(double.class, AbstractType.Family.DOUBLE));      initBuiltinClassType(new JavaType(java.util.Date.class, AbstractType.Family.DATETIME));      initBuiltinClassType(new JavaType(java.math.BigDecimal.class, AbstractType.Family.DECIMAL));      initBuiltinClassType(new JavaType(byte[].class, AbstractType.Family.BINARY));      initClassType(new JavaType(Boolean.class, AbstractType.Family.BOOLEAN));      initClassType(new JavaType(Byte.class, AbstractType.Family.INTEGER));      initClassType(new JavaType(byte.class, AbstractType.Family.INTEGER));      initClassType(new JavaType(Short.class, AbstractType.Family.INTEGER));      initClassType(new JavaType(short.class, AbstractType.Family.INTEGER));      initClassType(new JavaType(Integer.class, AbstractType.Family.INTEGER));      initClassType(new JavaType(long.class, AbstractType.Family.INTEGER));      initClassType(new JavaType(Long.class, AbstractType.Family.INTEGER));      initClassType(new JavaType(float.class, AbstractType.Family.DOUBLE));      initClassType(new JavaType(Float.class, AbstractType.Family.DOUBLE));      initClassType(new JavaType(Double.class, AbstractType.Family.DOUBLE));      initClassType(new JavaType(java.sql.Date.class, AbstractType.Family.DATETIME));      initClassType(new JavaType(java.sql.Time.class, AbstractType.Family.DATETIME));      initClassType(new JavaType(java.sql.Timestamp.class, AbstractType.Family.DATETIME));      initClassType(new JavaType(java.math.BigInteger.class, AbstractType.Family.DECIMAL));   }   private static void initBuiltinClassType(JavaType type)   {      builtins.put(type.getFamily(), type);      initClassType(type);   }   private static void initClassType(JavaType type)   {      baseClassMap.put(type.getJavaClass(), type);   }   public EJB20Schema()   {      classMap = (Map) baseClassMap.clone();   }   // Implementation of AbstractSchema   public AbstractComplexType getClassByName(String name)   {      return getEntityBySchemaName(name);   }   public boolean isClassNameInUse(String name)   {      return ejbNames.contains(name) || entitiesBySchemaName.keySet().contains(name);   }   public AbstractType getBuiltinType(AbstractType.Family family)   {      return (AbstractType) builtins.get(family);   }   public AbstractType getClassByJavaClass(Class clazz) {      return (AbstractType) classMap.get(clazz);   }   /**    * Add a name to the list of EJBs. This allows ejb-names that are not part    * of the schema to be reserved (preventing their use as aliases). Typically    * these would be the ejb-names of Session beans.    * @param name the ejb-name to reserve    * @throws DuplicateNameException if the name is already reserved    */   public void reserveEJBName(String name) throws DuplicateNameException   {      if (ejbNames.add(name) == false)      {         throw new DuplicateNameException("EJB already defined with name " + name);      }   }   /**    * Add a BMP Entity bean to the schema. This allows their use as targets    * for a ejb-relation association.    * @param name the ejb-name of the BMP Entity bean    * @param pkClass the primary-key class    * @return a BMPEntity representing this entity in the schema    * @throws DuplicateNameException if a bean with the given name already exists    */   public BMPEntity addBMPEntity(String name, JavaType pkClass) throws DuplicateNameException   {      reserveEJBName(name);      BMPEntity entity = new BMPEntity(name, pkClass);      entitiesByEJBName.put(name, entity);      return entity;   }   /**    * Add a CMP Entity bean to the schema.    * @param name the ejb-name of the entity bean    * @param schemaName the abstract-schema-name of the entity bean    * @param pkClass the primary-key class    * @return a CMPEntity represting this entity in the schema    * @throws DuplicateNameException if a bean with the given name already exists    */   public CMPEntity addCMPEntity(String name, String schemaName, JavaType pkClass) throws DuplicateNameException   {      reserveEJBName(name);      if (entitiesBySchemaName.containsKey(schemaName))      {         throw new DuplicateNameException("EJB already defined with abstract schema name " + name);      }      CMPEntity entity = new CMPEntity(name, schemaName, pkClass);      entitiesByEJBName.put(name, entity);      entitiesBySchemaName.put(schemaName, entity);      return entity;   }   /**    * Add a relation between two entity beans    * @param name the name of this relation; may be null    * @param left the left hand entity    * @param leftIsMany whether the left has one or many multiplicity    * @param leftName the name of the left hand end    * @param right the right hand entity    * @param rightIsMany whether the right has one or many multiplicity    * @param rightName the name of the right hand end    * @return a EJBRelation representing this association    */   public EJBRelation addEJBRelation(String name, Entity left, boolean leftIsMany, String leftName, Entity right, boolean rightIsMany, String rightName)   {      CMRField leftEnd = new CMRField(leftName, leftIsMany, left);      CMRField rightEnd = new CMRField(rightName, rightIsMany, right);      EJBRelation rel = new EJBRelation(name, leftEnd, rightEnd);      if (leftEnd.isNavigable())      {         ((CMPEntity) left).addCMRField(leftEnd);      }      if (rightEnd.isNavigable())      {         ((CMPEntity) right).addCMRField(rightEnd);      }      relationsByName.put(rel.getName(), rel);      return rel;   }   /**    * Return the Entity with the given ejb-name    * @param name the ejb-name of the Entity    * @return the Entity or null if not found    */   public Entity getEntityByName(String name)   {      return (Entity) entitiesByEJBName.get(name);   }   /**    * Return the Entity with the given abstract-schema-name    * @param schemaName the abstract-schema-name of the Entity    * @return the Entity or null if not found    */   public CMPEntity getEntityBySchemaName(String schemaName)   {      return (CMPEntity) entitiesBySchemaName.get(schemaName);   }   /**    * Return the EJBRelation with the given name    * @param name the name of the ejb-relation    * @return the EJBRelation or null if not found (names are optional)    */   public EJBRelation getRelationByName(String name)   {      return (EJBRelation) relationsByName.get(name);   }}