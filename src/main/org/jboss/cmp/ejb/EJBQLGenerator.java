/*************************************** *                                     * *  JBoss: The OpenSource J2EE WebOS   * *                                     * *  Distributable under LGPL license.  * *  See terms of license at gnu.org.   * *                                     * ***************************************/package org.jboss.cmp.ejb;import java.util.Iterator;import org.jboss.persistence.query.CollectionRelation;import org.jboss.persistence.query.Comparison;import org.jboss.persistence.query.ConditionExpression;import org.jboss.persistence.query.CrossJoin;import org.jboss.persistence.query.Exists;import org.jboss.persistence.query.InnerJoin;import org.jboss.persistence.query.IsNull;import org.jboss.persistence.query.JoinCondition;import org.jboss.persistence.query.Literal;import org.jboss.persistence.query.Parameter;import org.jboss.persistence.query.Path;import org.jboss.persistence.query.Projection;import org.jboss.persistence.query.Query;import org.jboss.persistence.query.QueryNode;import org.jboss.persistence.query.QueryVisitor;import org.jboss.persistence.query.RangeRelation;import org.jboss.persistence.query.SubQuery;import org.jboss.persistence.query.Update;import org.jboss.persistence.query.Insert;import org.jboss.persistence.query.Delete;import org.jboss.persistence.query.Assignment;import org.jboss.persistence.query.IsEmpty;import org.jboss.persistence.query.LeftJoin;/** * Transformer that produces EJB-QL text of a query against a EJB schema. */public class EJBQLGenerator implements QueryVisitor{   /**    * Generate the EJB-QL text for the supplied query.    * @param query the query to generate into EJB-QL    * @return EJB-QL text of the query    */   public String generate(Query query)   {      StringBuffer buf = new StringBuffer(1000);      query.accept(this, buf);      return buf.toString();   }   public Object visit(Insert insert, Object param)   {      throw new UnsupportedOperationException("EJB-QL does not support INSERT");   }   public Object visit(Update update, Object param)   {      throw new UnsupportedOperationException("EJB-QL does not support UPDATE");   }   public Object visit(Delete delete, Object param)   {      throw new UnsupportedOperationException("EJB-QL does not support DELETE");   }   public Object visit(Query query, Object param)   {      StringBuffer buf = (StringBuffer) param;      buf.append("SELECT");      query.getProjection().accept(this, buf);      buf.append(" FROM");      query.getRelation().accept(this, buf);      return buf;   }   public Object visit(SubQuery subquery, Object param)   {      throw new UnsupportedOperationException();   }   public Object visit(Projection projection, Object param)   {      StringBuffer buf = (StringBuffer) param;      if (projection.isDistinct())      {         buf.append(" DISTINCT");      }      for (Iterator i = projection.getChildren().iterator(); i.hasNext();)      {         QueryNode node = (QueryNode) i.next();         node.accept(this, buf);         if (i.hasNext())         {            buf.append(",");         }      }      return buf;   }   public Object visit(Path path, Object param)   {      StringBuffer buf = (StringBuffer) param;      if (path.isCollection())      {         buf.append(" OBJECT(").append(path.getRoot().getAlias()).append(")");      }      else      {         buf.append(" ").append(path);      }      return buf;   }   public Object visit(RangeRelation relation, Object param)   {      StringBuffer buf = (StringBuffer) param;      CMPEntity type = (CMPEntity) relation.getType();      buf.append(" ").append(type.getSchemaName());      buf.append(" ").append(relation.getAlias());      return buf;   }   public Object visit(CollectionRelation relation, Object param)   {      StringBuffer buf = (StringBuffer) param;      buf.append(" IN(").append(relation.getPath());      buf.append(") ").append(relation.getAlias());      return buf;   }   public Object visit(CrossJoin join, Object param)   {      StringBuffer buf = (StringBuffer) param;      join.getLeft().accept(this, buf);      buf.append(",");      join.getRight().accept(this, buf);      return buf;   }   public Object visit(InnerJoin join, Object param)   {      throw new UnsupportedOperationException("EJB-QL does not support inner joins");   }   public Object visit(LeftJoin join, Object param)   {      throw new UnsupportedOperationException("EJB-QL does not support left joins");   }   public Object visit(Comparison comparison, Object param)   {      throw new UnsupportedOperationException();   }   public Object visit(JoinCondition joinCondition, Object param)   {      throw new UnsupportedOperationException();   }   public Object visit(ConditionExpression expression, Object param)   {      throw new UnsupportedOperationException();   }   public Object visit(IsNull expression, Object param)   {      throw new UnsupportedOperationException();   }   public Object visit(IsEmpty expression, Object param)   {      throw new UnsupportedOperationException();   }   public Object visit(Exists expression, Object param)   {      throw new UnsupportedOperationException();   }   public Object visit(Literal join, Object param)   {      throw new UnsupportedOperationException();   }   public Object visit(Parameter queryParam, Object param)   {      throw new UnsupportedOperationException();   }   public Object visit(Assignment assignment, Object param)   {      throw new UnsupportedOperationException();   }}