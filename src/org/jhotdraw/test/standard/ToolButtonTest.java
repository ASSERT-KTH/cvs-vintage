package CH.ifa.draw.test.standard;

import junit.framework.TestCase;
// JUnitDoclet begin import
import CH.ifa.draw.standard.ToolButton;
import CH.ifa.draw.standard.DuplicateCommand;
import CH.ifa.draw.standard.SelectionTool;
import CH.ifa.draw.test.JHDTestCase;
import CH.ifa.draw.application.DrawApplication;
import CH.ifa.draw.framework.Tool;
// JUnitDoclet end import

/*
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/


// JUnitDoclet begin javadoc_class
/**
* TestCase ToolButtonTest is generated by
* JUnitDoclet to hold the tests for ToolButton.
* @see CH.ifa.draw.standard.ToolButton
*/
// JUnitDoclet end javadoc_class
public class ToolButtonTest
// JUnitDoclet begin extends_implements
extends JHDTestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  CH.ifa.draw.standard.ToolButton toolbutton = null;
  // JUnitDoclet end class
  
  /**
  * Constructor ToolButtonTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
  public ToolButtonTest(String name) {
    // JUnitDoclet begin method ToolButtonTest
    super(name);
    // JUnitDoclet end method ToolButtonTest
  }
  
  /**
  * Factory method for instances of the class to be tested.
  */
  public CH.ifa.draw.standard.ToolButton createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
	Tool tool = new SelectionTool(getDrawingEditor());
    return new CH.ifa.draw.standard.ToolButton((DrawApplication)getDrawingEditor(), DrawApplication.IMAGES+"SEL", "Selection Tool", tool);
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    toolbutton = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    toolbutton = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method tool()
  /**
  * Method testTool is testing tool
  * @see CH.ifa.draw.standard.ToolButton#tool()
  */
  // JUnitDoclet end javadoc_method tool()
  public void testTool() throws Exception {
    // JUnitDoclet begin method tool
    // JUnitDoclet end method tool
  }
  
  // JUnitDoclet begin javadoc_method name()
  /**
  * Method testName is testing name
  * @see CH.ifa.draw.standard.ToolButton#name()
  */
  // JUnitDoclet end javadoc_method name()
  public void testName() throws Exception {
    // JUnitDoclet begin method name
    // JUnitDoclet end method name
  }
  
  // JUnitDoclet begin javadoc_method attributeValue()
  /**
  * Method testAttributeValue is testing attributeValue
  * @see CH.ifa.draw.standard.ToolButton#attributeValue()
  */
  // JUnitDoclet end javadoc_method attributeValue()
  public void testAttributeValue() throws Exception {
    // JUnitDoclet begin method attributeValue
    // JUnitDoclet end method attributeValue
  }
  
  // JUnitDoclet begin javadoc_method getMinimumSize()
  /**
  * Method testGetMinimumSize is testing getMinimumSize
  * @see CH.ifa.draw.standard.ToolButton#getMinimumSize()
  */
  // JUnitDoclet end javadoc_method getMinimumSize()
  public void testGetMinimumSize() throws Exception {
    // JUnitDoclet begin method getMinimumSize
    // JUnitDoclet end method getMinimumSize
  }
  
  // JUnitDoclet begin javadoc_method getPreferredSize()
  /**
  * Method testGetPreferredSize is testing getPreferredSize
  * @see CH.ifa.draw.standard.ToolButton#getPreferredSize()
  */
  // JUnitDoclet end javadoc_method getPreferredSize()
  public void testGetPreferredSize() throws Exception {
    // JUnitDoclet begin method getPreferredSize
    // JUnitDoclet end method getPreferredSize
  }
  
  // JUnitDoclet begin javadoc_method getMaximumSize()
  /**
  * Method testGetMaximumSize is testing getMaximumSize
  * @see CH.ifa.draw.standard.ToolButton#getMaximumSize()
  */
  // JUnitDoclet end javadoc_method getMaximumSize()
  public void testGetMaximumSize() throws Exception {
    // JUnitDoclet begin method getMaximumSize
    // JUnitDoclet end method getMaximumSize
  }
  
  // JUnitDoclet begin javadoc_method paintSelected()
  /**
  * Method testPaintSelected is testing paintSelected
  * @see CH.ifa.draw.standard.ToolButton#paintSelected(java.awt.Graphics)
  */
  // JUnitDoclet end javadoc_method paintSelected()
  public void testPaintSelected() throws Exception {
    // JUnitDoclet begin method paintSelected
    // JUnitDoclet end method paintSelected
  }
  
  // JUnitDoclet begin javadoc_method paint()
  /**
  * Method testPaint is testing paint
  * @see CH.ifa.draw.standard.ToolButton#paint(java.awt.Graphics)
  */
  // JUnitDoclet end javadoc_method paint()
  public void testPaint() throws Exception {
    // JUnitDoclet begin method paint
    // JUnitDoclet end method paint
  }
  
  // JUnitDoclet begin javadoc_method toolUsable()
  /**
  * Method testToolUsable is testing toolUsable
  * @see CH.ifa.draw.standard.ToolButton#toolUsable(java.util.EventObject)
  */
  // JUnitDoclet end javadoc_method toolUsable()
  public void testToolUsable() throws Exception {
    // JUnitDoclet begin method toolUsable
    // JUnitDoclet end method toolUsable
  }
  
  // JUnitDoclet begin javadoc_method toolUnusable()
  /**
  * Method testToolUnusable is testing toolUnusable
  * @see CH.ifa.draw.standard.ToolButton#toolUnusable(java.util.EventObject)
  */
  // JUnitDoclet end javadoc_method toolUnusable()
  public void testToolUnusable() throws Exception {
    // JUnitDoclet begin method toolUnusable
    // JUnitDoclet end method toolUnusable
  }
  
  // JUnitDoclet begin javadoc_method toolActivated()
  /**
  * Method testToolActivated is testing toolActivated
  * @see CH.ifa.draw.standard.ToolButton#toolActivated(java.util.EventObject)
  */
  // JUnitDoclet end javadoc_method toolActivated()
  public void testToolActivated() throws Exception {
    // JUnitDoclet begin method toolActivated
    // JUnitDoclet end method toolActivated
  }
  
  // JUnitDoclet begin javadoc_method toolDeactivated()
  /**
  * Method testToolDeactivated is testing toolDeactivated
  * @see CH.ifa.draw.standard.ToolButton#toolDeactivated(java.util.EventObject)
  */
  // JUnitDoclet end javadoc_method toolDeactivated()
  public void testToolDeactivated() throws Exception {
    // JUnitDoclet begin method toolDeactivated
    // JUnitDoclet end method toolDeactivated
  }
  
  // JUnitDoclet begin javadoc_method toolEnabled()
  /**
  * Method testToolEnabled is testing toolEnabled
  * @see CH.ifa.draw.standard.ToolButton#toolEnabled(java.util.EventObject)
  */
  // JUnitDoclet end javadoc_method toolEnabled()
  public void testToolEnabled() throws Exception {
    // JUnitDoclet begin method toolEnabled
    // JUnitDoclet end method toolEnabled
  }
  
  // JUnitDoclet begin javadoc_method toolDisabled()
  /**
  * Method testToolDisabled is testing toolDisabled
  * @see CH.ifa.draw.standard.ToolButton#toolDisabled(java.util.EventObject)
  */
  // JUnitDoclet end javadoc_method toolDisabled()
  public void testToolDisabled() throws Exception {
    // JUnitDoclet begin method toolDisabled
    // JUnitDoclet end method toolDisabled
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(ToolButtonTest.class);
    // JUnitDoclet end method testcase.main
  }
}
