package CH.ifa.draw.test.standard;

import junit.framework.TestCase;
// JUnitDoclet begin import
import CH.ifa.draw.standard.BoxHandleKit;
// JUnitDoclet end import

/*
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/


// JUnitDoclet begin javadoc_class
/**
* TestCase BoxHandleKitTest is generated by
* JUnitDoclet to hold the tests for BoxHandleKit.
* @see CH.ifa.draw.standard.BoxHandleKit
*/
// JUnitDoclet end javadoc_class
public class BoxHandleKitTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  CH.ifa.draw.standard.BoxHandleKit boxhandlekit = null;
  // JUnitDoclet end class
  
  /**
  * Constructor BoxHandleKitTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
  public BoxHandleKitTest(String name) {
    // JUnitDoclet begin method BoxHandleKitTest
    super(name);
    // JUnitDoclet end method BoxHandleKitTest
  }
  
  /**
  * Factory method for instances of the class to be tested.
  */
  public CH.ifa.draw.standard.BoxHandleKit createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new CH.ifa.draw.standard.BoxHandleKit();
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    boxhandlekit = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    boxhandlekit = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method addCornerHandles()
  /**
  * Method testAddCornerHandles is testing addCornerHandles
  * @see CH.ifa.draw.standard.BoxHandleKit#addCornerHandles(CH.ifa.draw.framework.Figure, java.util.List)
  */
  // JUnitDoclet end javadoc_method addCornerHandles()
  public void testAddCornerHandles() throws Exception {
    // JUnitDoclet begin method addCornerHandles
    // JUnitDoclet end method addCornerHandles
  }
  
  // JUnitDoclet begin javadoc_method addHandles()
  /**
  * Method testAddHandles is testing addHandles
  * @see CH.ifa.draw.standard.BoxHandleKit#addHandles(CH.ifa.draw.framework.Figure, java.util.List)
  */
  // JUnitDoclet end javadoc_method addHandles()
  public void testAddHandles() throws Exception {
    // JUnitDoclet begin method addHandles
    // JUnitDoclet end method addHandles
  }
  
  // JUnitDoclet begin javadoc_method south()
  /**
  * Method testSouth is testing south
  * @see CH.ifa.draw.standard.BoxHandleKit#south(CH.ifa.draw.framework.Figure)
  */
  // JUnitDoclet end javadoc_method south()
  public void testSouth() throws Exception {
    // JUnitDoclet begin method south
    // JUnitDoclet end method south
  }
  
  // JUnitDoclet begin javadoc_method southEast()
  /**
  * Method testSouthEast is testing southEast
  * @see CH.ifa.draw.standard.BoxHandleKit#southEast(CH.ifa.draw.framework.Figure)
  */
  // JUnitDoclet end javadoc_method southEast()
  public void testSouthEast() throws Exception {
    // JUnitDoclet begin method southEast
    // JUnitDoclet end method southEast
  }
  
  // JUnitDoclet begin javadoc_method southWest()
  /**
  * Method testSouthWest is testing southWest
  * @see CH.ifa.draw.standard.BoxHandleKit#southWest(CH.ifa.draw.framework.Figure)
  */
  // JUnitDoclet end javadoc_method southWest()
  public void testSouthWest() throws Exception {
    // JUnitDoclet begin method southWest
    // JUnitDoclet end method southWest
  }
  
  // JUnitDoclet begin javadoc_method north()
  /**
  * Method testNorth is testing north
  * @see CH.ifa.draw.standard.BoxHandleKit#north(CH.ifa.draw.framework.Figure)
  */
  // JUnitDoclet end javadoc_method north()
  public void testNorth() throws Exception {
    // JUnitDoclet begin method north
    // JUnitDoclet end method north
  }
  
  // JUnitDoclet begin javadoc_method northEast()
  /**
  * Method testNorthEast is testing northEast
  * @see CH.ifa.draw.standard.BoxHandleKit#northEast(CH.ifa.draw.framework.Figure)
  */
  // JUnitDoclet end javadoc_method northEast()
  public void testNorthEast() throws Exception {
    // JUnitDoclet begin method northEast
    // JUnitDoclet end method northEast
  }
  
  // JUnitDoclet begin javadoc_method northWest()
  /**
  * Method testNorthWest is testing northWest
  * @see CH.ifa.draw.standard.BoxHandleKit#northWest(CH.ifa.draw.framework.Figure)
  */
  // JUnitDoclet end javadoc_method northWest()
  public void testNorthWest() throws Exception {
    // JUnitDoclet begin method northWest
    // JUnitDoclet end method northWest
  }
  
  // JUnitDoclet begin javadoc_method east()
  /**
  * Method testEast is testing east
  * @see CH.ifa.draw.standard.BoxHandleKit#east(CH.ifa.draw.framework.Figure)
  */
  // JUnitDoclet end javadoc_method east()
  public void testEast() throws Exception {
    // JUnitDoclet begin method east
    // JUnitDoclet end method east
  }
  
  // JUnitDoclet begin javadoc_method west()
  /**
  * Method testWest is testing west
  * @see CH.ifa.draw.standard.BoxHandleKit#west(CH.ifa.draw.framework.Figure)
  */
  // JUnitDoclet end javadoc_method west()
  public void testWest() throws Exception {
    // JUnitDoclet begin method west
    // JUnitDoclet end method west
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(BoxHandleKitTest.class);
    // JUnitDoclet end method testcase.main
  }
}
