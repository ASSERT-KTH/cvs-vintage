package CH.ifa.draw.test.contrib;

import junit.framework.TestCase;
// JUnitDoclet begin import
import CH.ifa.draw.contrib.TriangleFigure;
// JUnitDoclet end import

/*
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/


// JUnitDoclet begin javadoc_class
/**
* TestCase TriangleFigureTest is generated by
* JUnitDoclet to hold the tests for TriangleFigure.
* @see CH.ifa.draw.contrib.TriangleFigure
*/
// JUnitDoclet end javadoc_class
public class TriangleFigureTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  CH.ifa.draw.contrib.TriangleFigure trianglefigure = null;
  // JUnitDoclet end class
  
  /**
  * Constructor TriangleFigureTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
  public TriangleFigureTest(String name) {
    // JUnitDoclet begin method TriangleFigureTest
    super(name);
    // JUnitDoclet end method TriangleFigureTest
  }
  
  /**
  * Factory method for instances of the class to be tested.
  */
  public CH.ifa.draw.contrib.TriangleFigure createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new CH.ifa.draw.contrib.TriangleFigure();
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    trianglefigure = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    trianglefigure = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method handles()
  /**
  * Method testHandles is testing handles
  * @see CH.ifa.draw.contrib.TriangleFigure#handles()
  */
  // JUnitDoclet end javadoc_method handles()
  public void testHandles() throws Exception {
    // JUnitDoclet begin method handles
    // JUnitDoclet end method handles
  }
  
  // JUnitDoclet begin javadoc_method rotate()
  /**
  * Method testRotate is testing rotate
  * @see CH.ifa.draw.contrib.TriangleFigure#rotate(double)
  */
  // JUnitDoclet end javadoc_method rotate()
  public void testRotate() throws Exception {
    // JUnitDoclet begin method rotate
    // JUnitDoclet end method rotate
  }
  
  // JUnitDoclet begin javadoc_method getPolygon()
  /**
  * Method testGetPolygon is testing getPolygon
  * @see CH.ifa.draw.contrib.TriangleFigure#getPolygon()
  */
  // JUnitDoclet end javadoc_method getPolygon()
  public void testGetPolygon() throws Exception {
    // JUnitDoclet begin method getPolygon
    // JUnitDoclet end method getPolygon
  }
  
  // JUnitDoclet begin javadoc_method draw()
  /**
  * Method testDraw is testing draw
  * @see CH.ifa.draw.contrib.TriangleFigure#draw(java.awt.Graphics)
  */
  // JUnitDoclet end javadoc_method draw()
  public void testDraw() throws Exception {
    // JUnitDoclet begin method draw
    // JUnitDoclet end method draw
  }
  
  // JUnitDoclet begin javadoc_method connectionInsets()
  /**
  * Method testConnectionInsets is testing connectionInsets
  * @see CH.ifa.draw.contrib.TriangleFigure#connectionInsets()
  */
  // JUnitDoclet end javadoc_method connectionInsets()
  public void testConnectionInsets() throws Exception {
    // JUnitDoclet begin method connectionInsets
    // JUnitDoclet end method connectionInsets
  }
  
  // JUnitDoclet begin javadoc_method containsPoint()
  /**
  * Method testContainsPoint is testing containsPoint
  * @see CH.ifa.draw.contrib.TriangleFigure#containsPoint(int, int)
  */
  // JUnitDoclet end javadoc_method containsPoint()
  public void testContainsPoint() throws Exception {
    // JUnitDoclet begin method containsPoint
    // JUnitDoclet end method containsPoint
  }
  
  // JUnitDoclet begin javadoc_method center()
  /**
  * Method testCenter is testing center
  * @see CH.ifa.draw.contrib.TriangleFigure#center()
  */
  // JUnitDoclet end javadoc_method center()
  public void testCenter() throws Exception {
    // JUnitDoclet begin method center
    // JUnitDoclet end method center
  }
  
  // JUnitDoclet begin javadoc_method chop()
  /**
  * Method testChop is testing chop
  * @see CH.ifa.draw.contrib.TriangleFigure#chop(java.awt.Point)
  */
  // JUnitDoclet end javadoc_method chop()
  public void testChop() throws Exception {
    // JUnitDoclet begin method chop
    // JUnitDoclet end method chop
  }
  
  // JUnitDoclet begin javadoc_method clone()
  /**
  * Method testClone is testing clone
  * @see CH.ifa.draw.contrib.TriangleFigure#clone()
  */
  // JUnitDoclet end javadoc_method clone()
  public void testClone() throws Exception {
    // JUnitDoclet begin method clone
    // JUnitDoclet end method clone
  }
  
  // JUnitDoclet begin javadoc_method getRotationAngle()
  /**
  * Method testGetRotationAngle is testing getRotationAngle
  * @see CH.ifa.draw.contrib.TriangleFigure#getRotationAngle()
  */
  // JUnitDoclet end javadoc_method getRotationAngle()
  public void testGetRotationAngle() throws Exception {
    // JUnitDoclet begin method getRotationAngle
    // JUnitDoclet end method getRotationAngle
  }
  
  // JUnitDoclet begin javadoc_method write()
  /**
  * Method testWrite is testing write
  * @see CH.ifa.draw.contrib.TriangleFigure#write(CH.ifa.draw.util.StorableOutput)
  */
  // JUnitDoclet end javadoc_method write()
  public void testWrite() throws Exception {
    // JUnitDoclet begin method write
    // JUnitDoclet end method write
  }
  
  // JUnitDoclet begin javadoc_method read()
  /**
  * Method testRead is testing read
  * @see CH.ifa.draw.contrib.TriangleFigure#read(CH.ifa.draw.util.StorableInput)
  */
  // JUnitDoclet end javadoc_method read()
  public void testRead() throws Exception {
    // JUnitDoclet begin method read
    // JUnitDoclet end method read
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(TriangleFigureTest.class);
    // JUnitDoclet end method testcase.main
  }
}
