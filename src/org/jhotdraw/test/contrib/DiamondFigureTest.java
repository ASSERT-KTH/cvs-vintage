package CH.ifa.draw.test.contrib;

import junit.framework.TestCase;
// JUnitDoclet begin import
import CH.ifa.draw.contrib.DiamondFigure;
// JUnitDoclet end import

/*
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/


// JUnitDoclet begin javadoc_class
/**
* TestCase DiamondFigureTest is generated by
* JUnitDoclet to hold the tests for DiamondFigure.
* @see CH.ifa.draw.contrib.DiamondFigure
*/
// JUnitDoclet end javadoc_class
public class DiamondFigureTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  CH.ifa.draw.contrib.DiamondFigure diamondfigure = null;
  // JUnitDoclet end class
  
  /**
  * Constructor DiamondFigureTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
  public DiamondFigureTest(String name) {
    // JUnitDoclet begin method DiamondFigureTest
    super(name);
    // JUnitDoclet end method DiamondFigureTest
  }
  
  /**
  * Factory method for instances of the class to be tested.
  */
  public CH.ifa.draw.contrib.DiamondFigure createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new CH.ifa.draw.contrib.DiamondFigure();
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    diamondfigure = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    diamondfigure = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method draw()
  /**
  * Method testDraw is testing draw
  * @see CH.ifa.draw.contrib.DiamondFigure#draw(java.awt.Graphics)
  */
  // JUnitDoclet end javadoc_method draw()
  public void testDraw() throws Exception {
    // JUnitDoclet begin method draw
    // JUnitDoclet end method draw
  }
  
  // JUnitDoclet begin javadoc_method connectionInsets()
  /**
  * Method testConnectionInsets is testing connectionInsets
  * @see CH.ifa.draw.contrib.DiamondFigure#connectionInsets()
  */
  // JUnitDoclet end javadoc_method connectionInsets()
  public void testConnectionInsets() throws Exception {
    // JUnitDoclet begin method connectionInsets
    // JUnitDoclet end method connectionInsets
  }
  
  // JUnitDoclet begin javadoc_method containsPoint()
  /**
  * Method testContainsPoint is testing containsPoint
  * @see CH.ifa.draw.contrib.DiamondFigure#containsPoint(int, int)
  */
  // JUnitDoclet end javadoc_method containsPoint()
  public void testContainsPoint() throws Exception {
    // JUnitDoclet begin method containsPoint
    // JUnitDoclet end method containsPoint
  }
  
  // JUnitDoclet begin javadoc_method chop()
  /**
  * Method testChop is testing chop
  * @see CH.ifa.draw.contrib.DiamondFigure#chop(java.awt.Point)
  */
  // JUnitDoclet end javadoc_method chop()
  public void testChop() throws Exception {
    // JUnitDoclet begin method chop
    // JUnitDoclet end method chop
  }
  
  // JUnitDoclet begin javadoc_method connectorAt()
  /**
  * Method testConnectorAt is testing connectorAt
  * @see CH.ifa.draw.contrib.DiamondFigure#connectorAt(int, int)
  */
  // JUnitDoclet end javadoc_method connectorAt()
  public void testConnectorAt() throws Exception {
    // JUnitDoclet begin method connectorAt
    // JUnitDoclet end method connectorAt
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(DiamondFigureTest.class);
    // JUnitDoclet end method testcase.main
  }
}
