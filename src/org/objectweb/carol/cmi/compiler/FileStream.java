/*
 * Copyright (C) 2002-2003, Simon Nieuviarts
 */
/***
 * Jonathan: an Open Distributed Processing Environment 
 * Copyright (C) 1999 France Telecom R&D
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 * Release: 2.0
 *
 * Contact: jonathan@objectweb.org
 *
 * Author: Kathleen Milsted
 *
 * with contributions from:
 *   Francois Horn
 * 
 */

package org.objectweb.carol.cmi.compiler;

import java.io.File;
import java.io.FileWriter;

/**
 * This is a utility class for files generated by the stub compiler.
 */
public class FileStream {
    File file;
    FileWriter fw;

    FileStream(String dirName, String fileName) {
        try {
            File dir = new File(dirName);
            dir.mkdirs();
        } catch (Exception e) {
            throw new Error(
                "unable to create directory " + dirName + "\n" + e.toString());
        }
        try {
            file = new File(dirName, fileName);
            fw = new FileWriter(file);
        } catch (Exception e) {
            throw new Error(
                "unable to create file " + fileName + "\n" + e.toString());
        }
    }

    void write(String str) {
        try {
            fw.write(str);
        } catch (Exception e) {
            throw new Error(
                "error writing to file "
                    + file.getName()
                    + "\n"
                    + e.toString());
        }
    }

    void close() {
        try {
            if (fw != null) {
                fw.flush();
                fw.close();
            }
            fw = null;
        } catch (Exception e) {
            throw new Error(
                "unable to close file " + file.getName() + "\n" + e.toString());
        }
    }

}
