/* Generated by Together */

package org.apache.jasper34.servlet;

import javax.servlet.http.HttpServlet;
import org.apache.jasper34.toolkit.JasperToolkit;

public class JspServlet extends HttpServlet {

    private static final boolean debug = true;
    
	/**
        name of property or init-param to set to tell JSP compiler which
        classpath to use when compiling/running JSP pages.
        <pre><code>
        * org.apache.jasper.jsp_classpath = ....
        </code></pre>
        If this is not set, will default to use value set
        for the property "org.apache.tomcat.jsp_classpath".
        If neither is set, will fallback to default class loader's
        classpath.
	*/
    public static final String JSP_CLASSPATH_PROPERTY =
    "org.apache.jasper.jsp_classpath";

	/**
        classpath used to compile and run JSP servlets.
	*/
    public static String JSP_CLASSPATH;


    private static final String TOMCAT_CLASSPATH_PROPERTY =
    org.apache.jasper.Constants.SERVLET_CLASSPATH;

    static {
        String s = null;
        s = JasperToolkit.getProperty(JSP_CLASSPATH_PROPERTY);
        if(s == null || s.equals("")) {
            s = getProperty(TOMCAT_CLASSPATH_PROPERTY);
        }
        if(s != null && s.length() > 0 &&
        s.trim().startsWith(getProperty("path.separator"))) {
            s = s.trim().substring(1);
        }
        JSP_CLASSPATH = s;
    }

    /**
     * Property for specifying the base class of the generated servlets.
     *<pre>
     * org.apache.jasper.jsp_servlet_base = <classname>
	 *</pre>
	 * This sets the default base class extended by servlets generated
	 * by the Jsp compiler.  This can be overridden on each page
	 * by using the '<%@page extends = ....%>' tag.
	 * The default value is "org.apache.jasper.runtime.HttpJspBase".
     */
    public static final String JSP_SERVLET_BASE_PROPERTY =
    "org.apache.jasper.jsp_servlet_base";

    /**
     * The default base class of the generated servlets.
     */
    public static final String JSP_SERVLET_BASE;


    static {
        String temp = null;
        temp = getProperty(JSP_SERVLET_BASE_PROPERTY);
        if(temp == null || temp.equals("")) {
            temp = "org.apache.jasper.runtime.HttpJspBase";
        }
        JSP_SERVLET_BASE = temp;
    }

    /**
        name of init-param to set for the JspServlet to
        indicate the size of the JSP page handler cache.
        This number should correlate with the number of
        JSP files hosted by the server.  Example:
        <pre>
        * &ltinit-param&gt
        *  &ltparam-name&gtcache_size&lt/param-name&gt
        *  &ltparam-value&gt128&lt/param-value&gt
        * &lt/init-param&gt
        </pre>
        If not set, the default is to use the value set for
        <code>org.apache.jasper34.utils.CacheDefaults.JSP_CACHE_SIZE</code>
    */
    public static final String JSP_CACHE_SIZE_PARAM = "cache_size";

	/**
	 * ProtectionDomain attribute for JSPs.  This is tomcat specific.
	 * Other servlets engines can choose to have this attribute if they
	 * want to have this JSP engine running on them.
	 */
    public static final String JSP_PROTECTION_DOMAIN =
        "org.apache.tomcat.protection_domain";

    private ProtectionDomain protectionDomain = null;

    private JspServletToolkit toolkit = null;
    private Cache jsps = null;


    public void init(ServletConfig cfg) {
        super.init(cfg);
    }

    /**
        @return the toolkit used by JspServlet for access to services
    */
    public JspServletToolkit getToolkit() {
        if(toolkit == null) {
            toolkit = (JspServletToolkit)JasperToolkit.createToolkit(
            "JspServlet", getServletConfig()));
        }
        return toolkit;
    }

    /**
        @return the Cache object used by the JspServlet
    */
    public Cache getCache(){
        if(jsps == null){
            int cache_size = CacheDefaults.JSP_CACHE_SIZE;
            String sz = cfg.getParameter(JSP_CACHE_SIZE_PARAM);
            if(sz!=null){
                try{
                    cache_size = Integer.parseInt(sz);
                }catch(NumberFormatException e){
                    cache_size = CacheDefaults.JSP_CACHE_SIZE;
                }
            }
            jsps = getToolkit().createCache(cache_size, cache_size/4);
        }
        return jsps;
    }
    
	/**
		service the request for a JSP file
	*/
    public void service(HttpServletRequest request,
    HttpServletResponse response)
    throws ServletException, IOException {
		try {
            String includeUri 
                = (String) request.getAttribute(JspConstants.INC_SERVLET_PATH);

            String jspUri;

            if (includeUri == null)
				jspUri = request.getServletPath();
            else
                jspUri = includeUri;

            //boolean precompile = preCompileJSP(request);

			log("service(): JspServlet --> "+jspUri,INFO);
            if (debug) {
				log("",DEBUG);
                log("service(): \t       ServletPath: "+request.getServletPath(),DEBUG);
                log("service(): \t          PathInfo: "+request.getPathInfo(),DEBUG);
				log("service(): \t   INC_REQUEST_URI: "+request.getAttribute(JspConstants.INC_REQUEST_URI),DEBUG);
				log("service(): \t  INC_SERVLET_PATH: "+request.getAttribute(JspConstants.INC_SERVLET_PATH),DEBUG);
	            log("service(): \t        includeUri: "+includeUri,DEBUG);
                log("service(): \t            jspUri: "+jspUri,DEBUG);
                log("service(): \t       contextPath: "+request.getContextPath(),DEBUG);
				log("service(): \t          RealPath: "
                                   +getServletConfig().getServletContext().getRealPath(jspUri),DEBUG);
                log("service(): \t        RequestURI: "+request.getRequestURI(),DEBUG);
                log("service(): \t       QueryString: "+request.getQueryString(),DEBUG);
                log("service(): \t    Request Params: ",DEBUG);
                Enumeration e = request.getParameterNames();
                while (e.hasMoreElements()) {
                    String name = (String) e.nextElement();
                    log("service(): \t\t "+name+" = "+request.getParameter(name),DEBUG);
                }
                log("service(): \tRequest Attributes: ",DEBUG);
                e = request.getAttributeNames();
                while (e.hasMoreElements()) {
                    String name = (String) e.nextElement();
                    log("service(): \t\t "+name+" = "+request.getAttribute(name),DEBUG);
                }
                log("service(): \tResp isCommitted(): "+response.isCommitted(),DEBUG);
				//log("How I got here : "+com.g1440.naf.util.NFRuntimeException.getStackTrace(new Throwable()),DEBUG);
            }
		
			JspServletPageHandler jph = (JspServletPageHandler) getCache().get(jspUri);
			if (jph == null) {
			    jph = (JspServletPageHandler)getToolkit().createJspPageHandler(jspUri);
			    getCache().put(jspUri, jph);
			    jph.setParent(this);
			}
		
			jph.service(request, response);
	    
		} catch (RuntimeException e) {
		    throw e;
		} catch (ServletException e) {
		    throw e;
		} catch (Exception e) {
		    throw new ServletException(e);
		} catch (Throwable t) {
		    unknownJSPException(response, t);
		}
    }

    protected void log(String msg, int priority){
        System.err.println(msg);
    }
}

