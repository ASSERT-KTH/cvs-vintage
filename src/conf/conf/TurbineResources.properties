# -------------------------------------------------------------------
# $Id: TurbineResources.properties,v 1.14 2004/11/14 21:06:56 dep4b Exp $
#
# This is the configuration file for Turbine.
#
# Note that strings containing "," (comma) characters must backslash 
# escape the comma (i.e. '\,')
#
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# 
#  S Y S T E M  P R O P E R T I E S
#
# -------------------------------------------------------------------

# Your mail server for outgoing email.
#
# Default: null

system.mail.host=localhost

# SMTP-From header for your outgoing messages
#
# All failed delivery messages will be returned to this address.
# If unset, these messages will be sent to the address in the 
# From header (standard behaviour)
#
# Default: null

system.mail.smtp.from=



# -------------------------------------------------------------------
#
#  M O D E
#
# -------------------------------------------------------------------
# If this turbine app will always be invoked from another application
# mode can be set to integrated which will cause Turbine to pass any
# errors up to the application that invoked Turbine.  Under standalone
# operation, Turbine swallows the error after sending an error page
# as the response.  If this Turbine application operates both as a 
# normal webapp and can be invoked from another application, set the 
# mode to standalone and see the Turbine servlet's javadoc for method
# to set the mode on a request basis.
#
# Possible values: standalone, integrated
# Default: standalone
# -------------------------------------------------------------------

turbine.mode = standalone

# -------------------------------------------------------------------
#
#  R E S O L V E R
#
# -------------------------------------------------------------------
# This determines what resolver to use to find modules and templates.
# The DefaultResolver uses the ModuleLoader's algorithm (see below) to
# find modules
#
# Default: org.apache.turbine.pipeline.DefaultResolver
# -------------------------------------------------------------------

resolver.default = org.apache.turbine.pipeline.DefaultResolver

# -------------------------------------------------------------------
#
#  R E S O L V E R  C A C H I N G
#
# This determines if caching is on for modules and templates. It replaces
# the <module.cache> property.
#
# Default: false
# -------------------------------------------------------------------
resolver.cache.template = false
resolver.cache.module   = false

# -------------------------------------------------------------------
# 
#  M O D U L E  P A C K A G E S
#
# -------------------------------------------------------------------
# This is the "classpath" for Turbine.  In order to locate your own
# modules, you should add them to this path.  For example, if you have
# com.company.actions, com.company.screens, com.company.navigations,
# then this setting would be "com.company,org.apache.turbine.modules".
# This path is searched in order.  For example, Turbine comes with a
# screen module named "Login".  If you wanted to have your own screen
# module named "Login", then you would specify the path to your
# modules before the others.
#
# Default: org.apache.turbine.modules
# -------------------------------------------------------------------

module.packages=org.tigris.scarab

# These are the default modules to emulate the Turbine
# 2.1 page/layout/nav/screen system.

module.default.actions = actions.TemplateAction
module.default.layouts = Module
module.default.navigations = Module
module.default.screens = Module

# You can define any module type you wish here and
# they will be added to Turbine's module processing
# system. You must provide a default module!
#
# module.default.woogy = Boogie
# module.default.floogy = Moogie

# Turbine's default Pipeline implementation uses a (pluggable)
# descriptor to define which Valves it consists of.
pipeline.default.descriptor = WEB-INF/conf/scarab-pipeline.xml
pipeline.default.targetModuleType = screens

template.default = /Default
template.default.extension = vm

# -------------------------------------------------------------------
# 
#  F R A M E W O R K  S E T T I N G S
#
# -------------------------------------------------------------------
# The are settings that control the behaviour of the framework,
# such as determining whether a template system is in use, what
# the default templates and screens are and session handling settings.
# -------------------------------------------------------------------

# This is the template that is shown on an incorrect login attempt. 
# Setting this property will override any value of screen.login specfied
# below.
#
# Default: Login

template.login=Login.vm

# Used to set the template homepage if you are using a template
# layout.
#
# Default: /index.wm

template.homepage=Login.vm

# This is the template that is used by the respective Template based 
# ErrorScreen for displaying the error. If you are not using a Template based 
# ErrorScreen, then this is ignored.
#
# Default: /Error.wm

template.error=Error.vm

# The class that handles an error during request processing.  The default
# behavior is to render the template given by template.error property
exceptionHandler.default=org.apache.turbine.exception.DefaultExceptionHandler

# This is the default action to log a user in.
# Default: LoginUser

action.login=Login

# This is the default action to log a user out.

action.logout=Logout

# This is the default action to validate whether or not a session is
# valid.  For example, if you want to make sure if a user has already
# logged in or not.
#
# Default: SessionValidator

action.sessionvalidator=ScarabSessionValidator

# This is the timeout in seconds for sessions. If left commented out, the
# servlet container's default timeout will be left as is.

session.timeout = 1800

# This is the default action that builds up the AccessControlList for
# the individual users session.

action.accesscontroller=AccessController

# Set the default Doctype.  The default Doctype can be set by using
# the single strings: Html40Strict, Html40Transitional, or
# Html40Frameset.  Additionally the default can be supplied as two
# strings separated by a comma giving the DTD and URI.
#
# Default: ignored if not set to some value.

default.doctype=Html40Transitional

# -------------------------------------------------------------------
# 
#  M E S S A G E S
#
# -------------------------------------------------------------------
# Note that strings containing "," (comma) characters must backslash 
# escape the comma (i.e. '\,')

# The message that can be displayed before a user logs in.

login.message=Thank you for your visit. Please log into the system.

# The message that can be displayed when no screen is defined.

login.message.noscreen=There has been an error. Your session is valid but the screen variable is not defined.

# The message that can be displayed when a user enters an incorrect
# password or username.

login.error=Sorry your username or password is incorrect!

# The message that can be displayed when a user logs out.

logout.message=Thank you for using the system. Please come back soon.

# -------------------------------------------------------------------
# 
#  S E C U R E  S O C K E T S  L A Y E R
#
# -------------------------------------------------------------------
# Whether the web server is able to use SSL.  Links in Turbine can
# check this property to determine if SSL can be used.
#
# Default: true
# -------------------------------------------------------------------

use.ssl=true


# -------------------------------------------------------------------
# 
#  S E R V I C E S
#
# -------------------------------------------------------------------
# Classes for Turbine Services should be defined here.
# Format: services.[name].classname=[implementing class]
#
# To specify properties of a service use the following syntax:
# service.[name].[property]=[value]
#
# The order that these services is listed is important! The
# order that is stated here is the order in which the services
# will be initialized. Keep this is mind if you have services
# that depend on other services during initialization.
# -------------------------------------------------------------------
services.YaafiComponentService.classname=org.apache.turbine.services.yaaficomponent.TurbineYaafiComponentService
services.SecurityService.classname=org.tigris.scarab.services.security.ScarabDBSecurityService
services.TemplateService.classname=org.apache.fulcrum.template.TurbineTemplateService

services.RunDataService.classname=org.apache.turbine.services.rundata.TurbineRunDataService
services.PullService.classname=org.apache.turbine.services.pull.TurbinePullService
services.IntakeService.classname=org.apache.fulcrum.intake.TurbineIntakeService

# Turn on the appropriate template service.
services.VelocityService.classname=org.apache.fulcrum.velocity.TurbineVelocityService
services.EmailService.classname=org.tigris.scarab.services.email.VelocityEmailService

# -------------------------------------------------------------------
#
#  R U N   D A T A   S E R V I C E
#
# -------------------------------------------------------------------
# Default implementations of base interfaces for request processing.
# Additional configurations can be defined by using other keys
# in the place of the <default> key.  
# -------------------------------------------------------------------

services.RunDataService.default.run.data=org.apache.turbine.services.rundata.DefaultTurbineRunData
services.RunDataService.default.parameter.parser=org.apache.fulcrum.parser.DefaultParameterParser
services.RunDataService.default.cookie.parser=org.apache.fulcrum.parser.DefaultCookieParser


# -------------------------------------------------------------------
# 
#  P U L L  S E R V I C E
#
# -------------------------------------------------------------------
# These are the properties for the Pull Service, the service
# that works in conjuction with the Turbine Pull Model API.
# -------------------------------------------------------------------

# This determines whether the non-request tools are refreshed 
# on each request (request tools aren't ever, because they're
# instantiated for the request only anyway).
services.PullService.toolsPerRequestRefresh=true

# These are tools that are placed in the context by the service
# These tools will be made available to all your
# templates. You list the tools in the following way:
#
# services.PullService.tool.<scope>.<id> = <classname>
#
# <scope>      is the tool scope: global, request, session
#              or persistent (see below for more details)
# <id>         is the name of the tool in the context
#
# You can configure the tools in this way:
# services.PullService.tool.<id>.<parameter> = <value>
#
# So if you find "global", "request", "session" or "persistent" as second
# part, it is a configuration to put a tool into the toolbox, else it is a
# tool specific configuration.
#
# For example:
#
# services.PullService.tool.global.ui = org.apache.turbine.tool.UIManager
# services.PullService.tool.global.mm = org.apache.turbine.tool.MessageManager
# services.PullService.tool.request.link = org.apache.turbine.tool.TemplateLink
# services.PullService.tool.request.page = org.apache.turbine.util.template.TemplatePageAttributes
#
# Then:
#
# tool.ui.skin = default
# 
# configures the value of "skin" for the "ui" tool.
#
# Tools are accessible in all templates by the <id> given
# to the tool. So for the above listings the UIManager would
# be available as $ui, the MessageManager as $mm, the TemplateLink
# as $link and the TemplatePageAttributes as $page.
#
# You should avoid using tool names called "global", "request",
# "session" or "persistent" because of clashes with the possible Scopes.
#
# Scopes:
#
#   global:     tool is instantiated once and that instance is available
#               to all templates for all requests. Tool must be threadsafe.
#
#   request:    tool is instantiated once for each request (although the
#               PoolService is used to recycle instances). Tool need not
#               be threadsafe.
#
#   session:    tool is instantiated once for each user session, and is
#               stored in the user's temporary hashtable. Tool should be 
#               threadsafe.
#
#   persistent: tool is instantitated once for each use session, and
#               is stored in the user's permanent hashtable. This means
#               for a logged in user the tool will be persisted in the
#               user's objectdata. Tool should be threadsafe and 
#               Serializable.
#
# Defaults: none

services.PullService.tool.request.link=org.tigris.scarab.util.ScarabLink
services.PullService.tool.request.page=org.apache.turbine.tool.TemplatePageAttributes
services.PullService.tool.request.content=org.apache.turbine.tool.ContentURI

# These are intake tools.
services.PullService.tool.request.intake=org.apache.turbine.tool.IntakeTool

#services.PullService.tool.global.ui=org.apache.turbine.tool.UIManager

services.PullService.earlyInit = true

# The UI Manager will allow you to skin your Turbine
# application using simple properties files that are
# located in the WEBAPP/resources/ui/skins/ directory
# hierarchy.

#This is a remain thorn in our side. How to provide properties
#for pull tools elegantly. This is not good.
#tool.ui.skin=default

# -------------------------------------------------------------------
# 
#  T E M P L A T E  S E R V I C E
#
# -------------------------------------------------------------------

# There is no configuration anymore, just an abstract front
# end to underlying template engines like velocity, webmacro,
# and JSP.

# -------------------------------------------------------------------
# 
#  V E L O C I T Y  S E R V I C E
#  NOTE: changes to this service must be reflected in the service below!
# -------------------------------------------------------------------

# The location of Velocity configuration file, relative to webapp root
# These properties will override the default properties set by Velocity.
# You should specify the path to the templates directories as well as 
# the path to the log file and they should also be relative to webapp root

services.VelocityService.template.extension=vm
services.VelocityService.default.page.template = /Default.vm
services.VelocityService.default.layout.template = /Default.vm

services.VelocityService.runtime.log.logsystem.log4j.category=org.apache.velocity
services.VelocityService.runtime.log=/logs/fulcrum-needs-this-property-not-used

services.VelocityService.velocimacro.library = macros/GlobalMacros.vm,\
                                               macros/ViewIssueMacro.vm,\
                                               macros/AdvancedQueryMacro.vm,\
                                               macros/MITListMacro.vm,\
                                               macros/ReportMacro.vm,\
                                               macros/SavedQueriesMacro.vm,\
                                               macros/XMLImportIssuesResultsMacro.vm,\
                                               macros/XMLExportIssuesMacro.vm,\
                                               macros/XMLExportSettingsMacro.vm

services.VelocityService.resource.loader = file
services.VelocityService.file.resource.loader.description = Velocity File Resource Loader
services.VelocityService.file.resource.loader.class = org.apache.velocity.runtime.resource.loader.FileResourceLoader
services.VelocityService.file.resource.loader.path = /WEB-INF/templates
services.VelocityService.file.resource.loader.cache = false
services.VelocityService.file.resource.loader.modificationCheckInterval = 10

services.VelocityService.velocimacro.permissions.allow.inline.to.replace.global=true
services.VelocityService.velocimacro.library.autoreload=true

services.VelocityService.eventCartridge.classes = org.tigris.scarab.util.ReferenceInsertionFilter

services.VelocityService.earlyInit = true

# -------------------------------------------------------------------
# 
#  V E L O C I T Y  E M A I L  S E R V I C E
#  NOTE: changes to this service must be reflected in the service above!
# -------------------------------------------------------------------

# The location of Velocity configuration file, relative to webapp root
# These properties will override the default properties set by Velocity.
# You should specify the path to the templates directories as well as 
# the path to the log file and they should also be relative to webapp root

# WARNING: Defining a second TurbineTemplateService sub-class with a
# duplicate value for its template.extension property somehow
# overwrites the definition of the first service!  Do _not_ define
# EmailService.template.extension=vm!
services.EmailService.default.page.template = /Default.vm
services.EmailService.default.layout.template = /Default.vm

services.EmailService.runtime.log.logsystem.log4j.category=org.apache.velocity
services.EmailService.runtime.log=/logs/fulcrum-needs-this-property-not-used

services.EmailService.velocimacro.library = macros/GlobalMacros.vm

services.EmailService.resource.loader = file
services.EmailService.file.resource.loader.description = Velocity File Resource Loader
services.EmailService.file.resource.loader.class = org.apache.velocity.runtime.resource.loader.FileResourceLoader
services.EmailService.file.resource.loader.path = /WEB-INF/templates
services.EmailService.file.resource.loader.cache = false
services.EmailService.file.resource.loader.modificationCheckInterval = 10

services.EmailService.velocimacro.permissions.allow.inline.to.replace.global=true
#services.EmailService.velocimacro.library.autoreload=true

services.EmailService.earlyInit = true


# -------------------------------------------------------------------
# 
#  S E C U R I T Y  S E R V I C E
#
# -------------------------------------------------------------------

#
# This is the class that implements the User interface.
# You want to override this setting only if you want your User 
# implementation to provide application specific addtional 
# functionality.
#
# Default: org.apache.fulcrum.security.impl.db.entity.TurbineUser
#

services.SecurityService.user.class=org.tigris.scarab.om.ScarabUserImpl

#
# This setting is DBSecurityService specific - this class is consulted for the names
# of the columns in the users' tables for the purpose of creating join queries. 
# If you use your own User implementation in conjunction with DBSecurityService,
# it's peer class must implement org.apache.turbine.om.security.peer.UserPeer interface,
# and you need to specify the name of the peer class here.
#
# Defalut: org.apache.turbine.om.security.peer.TurbineUserPeer
#
services.SecurityService.userPeer.class=org.tigris.scarab.om.ScarabUserImplPeer

#
# This is the class that implements UserManager interface.
# Override this setting if you want your User information stored
# on a different medium (LADP directory is a good example).
# Default implementation uses Peers and a relational database .
#

services.SecurityService.user.manager=org.apache.fulcrum.security.impl.db.DBUserManager

#
# This is used by the SecurityService to make the password checking
# secure. When enabled, passwords are transformed by a one-way
# function into a sequence of bytes that is base64 encoded.
# It is impossible to guess the plain-text form of the password
# from the representation. When user logs in, the entered password
# is transformed the same way and then compared with stored value.
#
# Default: false
#

services.SecurityService.secure.passwords=true

#
# This property lets you choose what digest algorithm will be used
# for encrypting passwords. Check documentation of your JRE for
# available algorithms.
#
# Default: SHA
#

services.SecurityService.secure.passwords.algorithm=SHA

# -------------------------------------------------------------------
# 
#  X M L R P C  S E R V I C E
#
# -------------------------------------------------------------------
# This property specifies which class should be used to parse
# xml for XmlRpc functionality.
#
# Default: org.apache.xerces.parsers.SAXParser

##services.XmlRpcService.parser=org.apache.xerces.parsers.SAXParser

# This property specifies which port the server part of the XmlRpc
# should listen, if it is active.
#
# Default: 12345

##services.XmlRpcService.port=12345

# If any classes are specified here, the Service will create an 
# instance of them here and start up a listener on the specified 
# port.
#
# Note that the handlers demonstrated are not very useful.  You
# will have to invent your own services.  They do however
# illustrate that any class with a default constructor can be
# added here
#
# The handler parameter without further extension determines
# the default handler for the service
#
# Default: no classes are specified by default

##services.XmlRpcService.handler.$default=java.util.Hashtable
##services.XmlRpcService.handler.stringhandler=java.lang.String

# The following properties allow the transfer of data between
# separate Turbine applications running on different servers.
# This allows B2B type behavior such as sending database
# updates in the form of XML or whatever type of data
# that needs to be shared between Turbine applications
# running on separate servers.

#services.XmlRpcService.handler.file = org.apache.fulcrum.xmlrpc.util.FileHandler
##services.XmlRpcService.paranoid = false
##services.XmlRpcService.acceptClient = 127.0.0.1
##services.XmlRpcService.denyClient = *

# Do we want a secure server

##services.XmlRpcService.secure.server = false

# Secure server options

##services.XmlRpcService.secure.server.option.java.protocol.handler.pkgs = \
##    com.sun.net.ssl.internal.www.protocol

##services.XmlRpcService.secure.server.option.security.provider = \
##    com.sun.net.ssl.internal.ssl.Provider

##services.XmlRpcService.secure.server.option.security.protocol = TLS

# You probably want to keep your key stores and trust stores
# clear out of your webapp.

##services.XmlRpcService.secure.server.option.javax.net.ssl.keyStore = /tmp/keystore
##services.XmlRpcService.secure.server.option.javax.net.ssl.keyStoreType = jks
##services.XmlRpcService.secure.server.option.javax.net.ssl.keyStorePassword = password 
##services.XmlRpcService.secure.server.option.javax.net.ssl.trustStore = /tmp/truststore
##services.XmlRpcService.secure.server.option.javax.net.ssl.trustStoreType = jks
##services.XmlRpcService.secure.server.option.javax.net.ssl.trustStorePassword = password 

##services.XmlRpcService.secure.server.option.sun.ssl.keymanager.type = SunX509
##services.XmlRpcService.secure.server.option.sun.ssl.trust.manager.type = SunX509

# These values should be set to 'all' for debugging purposes.

##services.XmlRpcService.secure.server.option.javax.net.debug = none
##services.XmlRpcService.secure.server.option.java.security.debug = none

##services.XmlRpcService.earlyInit = true

# -------------------------------------------------------------------
# 
#  I N T A K E   S E R V I C E
#
# -------------------------------------------------------------------

# The location of the xml file specifying valid inputs
#
# Example: org.foo.bar.MyClassLoader, org.ack.joe.YourClassLoader
#
services.IntakeService.xml.path=WEB-INF/conf/intake.xml
services.IntakeService.serialize.path=WEB-INF/conf/intake-xml.ser


#--------------------------------------------------------------------
#
# P A R A M E T E R  P A R S E R
#
#--------------------------------------------------------------------
#
# This variable controls the case folding applied to URL variable
# names.
#
# Allowed values: none, lower, upper
# Default: lower
#

url.case.folding=lower

# -------------------------------------------------------------------
# 
#  Y A A F I  C O M P O N E N T   S E R V I C E
#
# -------------------------------------------------------------------
#
# Tell Fulcrum that we need to load this service early!
services.YaafiComponentService.earlyInit = true
services.YaafiComponentService.componentConfiguration=WEB-INF/conf/componentConfiguration.xml
services.YaafiComponentService.componentRoles=WEB-INF/conf/componentRoles.xml
services.YaafiComponentService.parameters=WEB-INF/conf/componentParameters.properties

# Who else needs early loading?
services.YaafiComponentService.lookup=org.apache.fulcrum.upload.UploadService
services.YaafiComponentService.lookup=org.apache.fulcrum.mimetype.MimeTypeService

