<?xml version="1.0" encoding="ISO-8859-1"?>
<Server>

    <!-- You can add a "home" attribute to represent the "base" for 
         all relative paths. If none is set, the TOMCAT_HOME property
         will be used, and if not set "." will be used.
         webapps/, work/ and log/ will be relative to this ( unless 
         set explicitely to absolute paths ).
      -->
    <ContextManager debug="0" workDir="work" >

      <!-- ==================== Global modules ==================== -->
        <LoaderInterceptor11  useApplicationLoader="true" />

        <TrustedLoader />

        <LogSetter name="tc_log" timestamps="true"
		   verbosityLevel="INFORMATION"  />

        <LogEvents enabled="false" />
        
        <!-- Backward compat: read the Context declarations from server.xml-->
        <ContextXmlReader config="conf/server.xml" />

        <!-- Separated Context -->
        <ContextXmlReader config="conf/apps.xml" />

        <AutoDeploy source="modules" target="modules" 
		    redeploy="true" />

        <AutoWebApp dir="modules" host="DEFAULT" trusted="true"/>

        <AutoDeploy source="webapps" target="webapps" />

        <AutoWebApp dir="webapps" host="DEFAULT" />

        <PolicyLoader securityManagerClass="java.lang.SecurityManager"
		      policyFile="conf/tomcat.policy" />

        <SimpleMapper1 debug="0" />

        <SessionExpirer checkInterval="60" />
        <!-- For development you can use randomClass="java.util.Random" -->
        <SessionIdGenerator randomClass="java.security.SecureRandom" 
                            randomFile="/dev/urandom" />


        <!-- ========== context processing modules ========== -->

        <!-- This will be the "default" profile 
             ( all except the "global" modules can be set per context )
          -->
        <LogSetter name="servlet_log" 
		   timestamps="true"
		   verbosityLevel = "INFORMATION"
		   path="logs/servlet-${yyyyMMdd}.log" 
		   />

        <LogSetter  name="JASPER_LOG"
		   timestamps="true" 
		   path="logs/jasper-${yyyyMMdd}.log" 
		   verbosityLevel = "INFORMATION"  />

        <WebXmlReader validate="true" />

        <ErrorHandler showDebugInfo="true" />

        <WorkDirSetup cleanWorkDir="false" />

        <Jdk12Interceptor /> 

        <!-- Non-standard invoker, for backward compat. ( /servlet/* ) -->
        <InvokerInterceptor /> 

        <!-- you can add javaCompiler="jikes" -->
        <JspInterceptor keepGenerated="true"
			largeFile="false"
			sendErrToClient="true"
			useJspServlet="false"
			/>
        
        <StaticInterceptor  debug="0" listings="true" />
        
        <ReloadInterceptor fullReload="true" />

        <SimpleSessionStore maxActiveSessions="-1" />

        <AccessInterceptor />

        <CredentialsInterceptor />

        <SimpleRealm  filename="conf/users/global-users.xml" />

       <!-- UnComment the following and comment out the
            above to get a JDBC realm.
            Other options for driverName: 
              driverName="oracle.jdbc.driver.OracleDriver"
              connectionURL="jdbc:oracle:thin:@ntserver:1521:ORCL"
              connectionName="scott"
              connectionPassword="tiger"

              driverName="org.gjt.mm.mysql.Driver"
              connectionURL="jdbc:mysql://localhost/authority"
              connectionName="test"
              connectionPassword="test"

            "connectionName" and "connectionPassword" are optional.
        -->
        <!--
        <JDBCRealm
            debug="99" 
	    driverName="sun.jdbc.odbc.JdbcOdbcDriver" 
	    connectionURL="jdbc:odbc:TOMCAT" 
	    userTable="users" 
            userNameCol="user_name" 
            userCredCol="user_pass" 
	    userRoleTable="user_roles" 
            roleNameCol="role_name" />
        -->

        <LoadOnStartupInterceptor />

        <Servlet22Interceptor />


        <!-- Tag pooling support.
             To enable the reuse of tag handlers as described in
             the JSP spec, uncomment the following.  If your pages
             use a lot of custom tags, you should see a nice performance
             gain.
             
             Note that placing the interceptor here will enable
             Tag pooling for all of the web applicatitions loaded -
             this may be a bad thing if all tags are not coded to
             handle reuse. To enable pooling only for specific web
             applications i.e. Contexts, place the interceptor inside of 
             the Context's definition.
             
             To view information about tag usage uncomment the tag
             LogSetter. Set verbosityLevel to DEBUG to see everytime
             a tag is obtained and released.
        -->
        <!--
        <LogSetter  name="tag_pool_log" timestamps="true" 
            path="logs/tagpool-${yyyyMMdd}.log" 
            verbosityLevel="INFORMATION" />

        <TagPoolManagerInterceptor debug="0"/>
        -->

        <!-- Request processing -->

        <DecodeInterceptor debug="0" /> 

        <SessionId cookiesFirst="true" noCookies="false" /> 

        <!-- Uncoment for the automatic apache config generator 
        <ApacheConfig forwardAll="true" useJkMount="true"
		      noRoot="false" />
          -->

         <!-- Uncoment for apache-style logs 
              Attributes: logFile, flush, format
        <AccessLogInterceptor/>
          -->
      <!-- ==================== Connectors ==================== -->

        <!--
             JNI connector, make sure that you update the native_lib
             Parameter to point to your jni_connect.dll.
         -->
         
        <RequestInterceptor 
         className="org.apache.tomcat.modules.server.JNIConnectionHandler"
         nativeLibrary="D:\tomcat\bin\i386\jni_connect.dll" />

      <!-- 
           Context definitions can be placed here ( not recommended ) or 
           in separate files. The ContextXmlReader will read all context
           definitions ( you can customize the "base" filename ). 
 
           The default is conf/apps-[name].xml.
 
           See conf/apps-examples.xml and conf/apps-admin.xml  
       -->

    </ContextManager>
</Server>
