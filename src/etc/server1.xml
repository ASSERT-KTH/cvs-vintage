<?xml version="1.0" encoding="ISO-8859-1"?>
<Server>

    <!-- You can add a "home" attribute to represent the "base" for 
         all relative paths. If none is set, the TOMCAT_HOME property
         will be used, and if not set "." will be used.
         webapps/, work/ and log/ will be relative to this ( unless 
         set explicitely to absolute paths ).
         You can also specify a "randomClass" attribute, which determines 
         a subclass of java.util.Random will be used for generating session IDs.
         By default this is "java.security.SecureRandom". 
         Specifying "java.util.Random" will speed up Tomcat startup, 
         but it will cause sessions to be less secure.
      -->
    <ContextManager debug="0" workDir="work" >

      <!-- ==================== Global modules ==================== -->

        <LogSetter name="tc_log" timestamps="false"
		   verbosityLevel="INFORMATION"  />

        <LogEvents enabled="false" />
        
        <ContextXmlReader config="conf/server.xml" />

        <AutoDeploy source="webapps" target="webapps" />

        <AutoWebApp dir="webapps" host="DEFAULT" />

        <PolicyLoader securityManagerClass="java.lang.SecurityManager"
		      policyFile="conf/tomcat.policy" />

        <SessionId cookiesFirst="true" noCookies="false" /> 

        <SimpleMapper1 debug="0" />


        <!-- ========== context processing modules ========== -->
        <!-- This will be the "default" profile 
             ( all except the "global" modules can be set per context )
          -->
        <LogSetter name="servlet_log" 
		   timestamps="true"
		   verbosityLevel = "INFORMATION"
		   path="logs/servlet-${yyyyMMdd}.log" />

        <LogSetter  name="JASPER_LOG"
		   timestamps="true" 
		   path="logs/jasper-${yyyyMMdd}.log" 
		   verbosityLevel = "INFORMATION"  />

        <LoaderInterceptor11  useApplicationLoader="true" />

        <WebXmlReader validate="true" />

        <ErrorHandler showDebugInfo="true" />

        <WorkDirSetup cleanWorkDir="false" />

        <Jdk12Interceptor /> 

        <!-- Non-standard invoker, for backward compat. ( /servlet/* ) -->
        <InvokerInterceptor /> 

        <!-- you can add javaCompiler="jikes" -->
        <JspInterceptor keepGenerated="true"
			largeFile="false"
			sendErrToClient="true"
			useJspServlet="false"
			/>
        
        <StaticInterceptor  debug="0" listings="true" />
        
        <ReloadInterceptor fullReload="true" />

        <SimpleSessionStore checkInterval="60" 
			    maxActiveSessions="-1" />

        <AccessInterceptor />

        <CredentialsInterceptor />

        <SimpleRealm  filename="conf/users/global-users.xml" />

       <!-- UnComment the following and comment out the
            above to get a JDBC realm.
            Other options for driverName: 
              driverName="oracle.jdbc.driver.OracleDriver"
              connectionURL="jdbc:oracle:thin:@ntserver:1521:ORCL"
              connectionName="scott"
              connectionPassword="tiger"

              driverName="org.gjt.mm.mysql.Driver"
              connectionURL="jdbc:mysql://localhost/authority"
              connectionName="test"
              connectionPassword="test"

            "connectionName" and "connectionPassword" are optional.
        -->
        <!--
        <JDBCRealm
            debug="99" 
	    driverName="sun.jdbc.odbc.JdbcOdbcDriver" 
	    connectionURL="jdbc:odbc:TOMCAT" 
	    userTable="users" 
            userNameCol="user_name" 
            userCredCol="user_pass" 
	    userRoleTable="user_roles" 
            roleNameCol="role_name" />
        -->

        <LoadOnStartupInterceptor />

        <Servlet22Interceptor />

      <!-- ==================== Connectors ==================== -->

       <!-- new http adapter. Attributes:
               secure - use SSL ( https )
               keystore, keypass - certs for SSL
               port -->
        <Http10Interceptor port="8080" 
			   secure="false"
			   maxThreads="100"
			   maxSpareThreads="50"
			   minSpareThreads="10" />

        <!--
            Uncomment this for SSL support. 
            You _need_ to set up a server certificate if you want this
            to work, and you need JSSE.
            1. Add JSSE jars to CLASSPATH 
            2. Edit java.home/jre/lib/security/java.security
               Add:
               security.provider.2=com.sun.net.ssl.internal.ssl.Provider
            3. Do: keytool -genkey -alias tomcat -keyalg RSA
               RSA is essential to work with Netscape and IIS.
               Use "changeit" as password. ( or add keypass attribute )
               You don't need to sign the certificate.
 
            You can set parameter keystore and keypass if you want 
            to change the default ( user.home/.keystore with changeit )
         -->
        <!--
        <RequestInterceptor 
         className="org.apache.tomcat.modules.server.Http10Interceptor"
         port="8443" 
         secure="true" />
        -->
        <!--
             JNI connector, make sure that you update the native_lib
             Parameter to point to your jni_connect.dll.
         -->
        <!-- 
        <RequestInterceptor 
         className="org.apache.tomcat.modules.server.JNIConnectionHandler"
         nativeLibrary="D:\tomcat\bin\i386\jni_connect.dll" />
         -->

        <!-- Apache AJP12 support. This is also used to shut down tomcat.
          -->
        <RequestInterceptor 
         className="org.apache.tomcat.modules.server.Ajp12Interceptor"
         port="8007" />

        <!-- Apache AJP13 support (mod_jk)
          -->
        <RequestInterceptor 
         className="org.apache.tomcat.modules.server.Ajp13Interceptor"
         port="8009" />

        <!-- ==================== Special webapps ==================== -->
        <!-- You don't need this if you place your app in webapps/
             and use defaults. 
             For security you'll also need to edit tomcat.policy

             Defaults are: debug=0, reloadable=true, trusted=false
             (trusted allows you to access tomcat internal objects 
              with FacadeManager )
 
             If security manager is enabled, you'll have read perms.
             in the webapps dir and read/write in the workdir.
         -->

         <Context path="/examples" 
            docBase="webapps/examples" 
            debug="0" 
	    reloadable="true" > 
              <SimpleRealm filename="conf/users/example-users.xml" />
              <LogSetter name="example_tc.log" path="logs/examples.log" />
              <LogSetter name="example_servlet_log" 
                         path="logs/servlet_examples.log" 
			 servletLogger="true"/>
        </Context>

        <!-- Admin context will use tomcat.core to add/remove/get info about
             the webapplications and tomcat internals. 
             By default it is not trusted - i.e. it is not allowed access to 
             tomcat internals, only informations that are available to all 
             servlets are visible.

             If you change this to true, make sure you set a password.
          -->
        <Context path="/admin" 
                 docBase="webapps/admin" 
                 debug="0" 
                 reloadable="true" 
                 trusted="true" > 
            <SimpleRealm filename="conf/users/admin-users.xml" />
        </Context>

        <!-- Virtual host example - 
             In "127.0.0.1" virtual host we'll reverse "/" and 
             "/examples"
             (XXX need a better example )
             (use  "http://127.0.0.1/examples" )
        <Host name="127.0.0.1" >
           <Context path="" 
                    docBase="webapps/examples" />
           <Context path="/examples" 
                    docBase="webapps/ROOT" />
        </Host>
         -->

    </ContextManager>
</Server>
