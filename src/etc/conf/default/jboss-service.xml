<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE server>
<!-- $Id: jboss-service.xml,v 1.75 2003/02/07 01:04:29 d_jencks Exp $ -->

<!-- ===================================================================== -->
<!--                                                                       -->
<!--  JBoss Server Configuration                                           -->
<!--                                                                       -->
<!-- ===================================================================== -->

<server>


  <mbean code="org.jboss.aop.AspectManagerService"
	 name="jboss.aop:service=AspectManager">
  </mbean>
 
  <mbean code="org.jboss.aop.AspectDeployer" name="jboss.aop:service=AspectDeployer">
  </mbean>

  <!-- Load all jars from the JBOSS_DIST/server/<config>/lib directory. This
    can be restricted to specific jars by specifying them in the archives
    attribute.
   -->
  <classpath codebase="lib" archives="*"/>

  <!-- Preload all custom editors for VMs that don't use the thread
       context class loader when searching for PropertyEditors. Uncomment
       to allow JDK 1.3.0 VMs that do not use the thread context class loader
       to see the JBoss custom PropertyEditors.
  <mbean code="org.jboss.varia.property.PropertyEditorManagerService"
    name="jboss:type=Service,name=BootstrapEditors">
    <attribute name="BootstrapEditors">
      java.math.BigDecimal=org.jboss.util.propertyeditor.BigDecimalEditor
      java.lang.Boolean=org.jboss.util.propertyeditor.BooleanEditor
      java.lang.Class=org.jboss.util.propertyeditor.ClassEditor
      java.util.Date=org.jboss.util.propertyeditor.DateEditor
      java.io.File=org.jboss.util.propertyeditor.FileEditor
      java.net.InetAddress=org.jboss.util.propertyeditor.InetAddressEditor
      java.lang.Integer=org.jboss.util.propertyeditor.IntegerEditor
      javax.management.ObjectName=org.jboss.util.propertyeditor.ObjectNameEditor
      java.util.Properties=org.jboss.util.propertyeditor.PropertiesEditor
      [Ljava.lang.String;=org.jboss.util.propertyeditor.StringArrayEditor
      java.net.URL=org.jboss.util.propertyeditor.URLEditor
    </attribute>
  </mbean>
  -->

  <!-- ==================================================================== -->
  <!-- Log4j Initialization                                                 -->
  <!-- ==================================================================== -->

  <mbean code="org.jboss.logging.Log4jService"
	 name="jboss.system:type=Log4jService,service=Logging">
    <attribute name="ConfigurationURL">resource:log4j.xml</attribute>
  </mbean>
 
  <!-- ==================================================================== -->
  <!-- JBoss RMI Classloader - only install when available                  -->
  <!-- ==================================================================== -->
  <mbean code="org.jboss.util.property.jmx.SystemPropertyClassValue"
    name="jboss.rmi:type=RMIClassLoader">
    <attribute name="Property">java.rmi.server.RMIClassLoaderSpi</attribute>
    <attribute name="ClassName">org.jboss.system.JBossRMIClassLoader</attribute>
  </mbean>

  <!-- ==================================================================== -->
  <!-- Service Binding                                                      -->
  <!-- ==================================================================== -->

  <!-- Automatically activated when generatting the clustering environment -->
  <!-- @TESTSUITE_CLUSTER_CONFIG@ -->

  <!-- 
     | Binding service manager for port/host mapping. This is a sample
     | config that demonstrates a JBoss instances with a server name 'jboss1'
     | loading its bindings from an XML file using the ServicesStoreFactory
     | implementation returned by the XMLServicesStoreFactory.
     |
     | ServerName: The unique name assigned to a JBoss server instance for
     | lookup purposes. This allows a single ServicesStore to handle mulitiple
     | JBoss servers.
     |
     | StoreURL: The URL string passed to org.jboss.services.binding.ServicesStore
     | during initialization that specifies how to connect to the bindings store.
     | StoreFactory: The org.jboss.services.binding.ServicesStoreFactory interface
     | implementation to create to obtain the ServicesStore instance.

  <mbean code="org.jboss.services.binding.ServiceBindingManager"
    name="jboss.system:service=ServiceBindingManager">
    <attribute name="ServerName">jboss1</attribute>
    <attribute name="StoreURL">file:/etc/jboss-bindings.xml</attribute>
    <attribute name="StoreFactoryClassName">
      org.jboss.services.binding.XMLServicesStoreFactory
    </attribute>
  </mbean>

  -->


  <!-- ==================================================================== -->
  <!-- Class Loading                                                        -->
  <!-- ==================================================================== -->

  <mbean code="org.jboss.web.WebService"
	 name="jboss:service=WebService">
    <attribute name="Port">8083</attribute>
    <!-- Should resources and non-EJB classes be downloadable -->
    <attribute name="DownloadServerClasses">true</attribute>
  </mbean>


  <!-- ==================================================================== -->
  <!-- JSR-77 Single JBoss Server Management Domain                         -->
  <!-- ==================================================================== -->

  <mbean code="org.jboss.management.j2ee.LocalJBossServerDomain"
	 name="jboss.management.local:j2eeType=J2EEDomain,name=Manager">
  </mbean>


  <!-- ==================================================================== -->
  <!-- JNDI                                                                 -->
  <!-- ==================================================================== -->

  <mbean code="org.jboss.naming.NamingService"
	 name="jboss:service=Naming">
    <!-- The listening port for the bootstrap JNP service. Set this to -1
      to run the NamingService without the JNP invoker listening port.
    -->
    <attribute name="Port">1099</attribute>
  </mbean>

  <mbean code="org.jboss.naming.JNDIView" name="jboss:service=JNDIView">
  </mbean>

  <!-- ==================================================================== -->
  <!-- J2EE Timer Service Source                                            -->
  <!-- ==================================================================== -->

   <!--
    | ATTENTION: Do only replace or adjust this MBean when you have a suitable
    |            Timer Source in place extending AbstractTimerSource. The
    |            Schedule Manager is necessary for the SchedulerTimerSource.
    -->
   <mbean code="org.jboss.varia.scheduler.ScheduleManager"
          name="jboss:service=EJBTimerManager">
      <attribute name="StartAtStartup">true</attribute>
   </mbean>
   <mbean code="org.jboss.ejb.timer.SchedulerTimerSource"
          name="jboss:service=EJBTimerService">
      <attribute name="ScheduleManagerName">jboss:service=EJBTimerManager</attribute>
      <depends>jboss:service=EJBTimerManager</depends>
   </mbean>

  <!-- ==================================================================== -->
  <!-- Security                                                             -->
  <!-- ==================================================================== -->

  <mbean code="org.jboss.security.plugins.SecurityConfig"
	 name="jboss.security:service=SecurityConfig">
    <attribute name="LoginConfig">jboss.security:service=XMLLoginConfig</attribute>
  </mbean>
  <mbean code="org.jboss.security.auth.login.XMLLoginConfig"
	 name="jboss.security:service=XMLLoginConfig">
    <attribute name="ConfigResource">login-config.xml</attribute>
  </mbean>

  <!-- JAAS security manager and realm mapping -->
  <mbean code="org.jboss.security.plugins.JaasSecurityManagerService"
	 name="jboss.security:service=JaasSecurityManager">
    <attribute name="SecurityManagerClassName">
      org.jboss.security.plugins.JaasSecurityManager
    </attribute>
  </mbean>


  <!-- ==================================================================== -->
  <!-- The deployers...                                                     -->
  <!-- ==================================================================== -->

  <!-- EJB deployer, remove to disable EJB behavior-->
  <mbean code="org.jboss.ejb.EJBDeployer" name="jboss.ejb:service=EJBDeployer">
    <attribute name="VerifyDeployments">true</attribute>
    <attribute name="ValidateDTDs">false</attribute>
    <attribute name="MetricsEnabled">false</attribute>
    <attribute name="VerifierVerbose">true</attribute>

    <!--
        StrictVerifier: Setting this to 'true' will cause all deployments
        to fail when the Verifier detected a problem with the contained
        Beans.
    -->
    <attribute name="StrictVerifier">true</attribute>

    <depends>jboss.tm:service=TransactionManagerService</depends>
    <depends>jboss:service=WebService</depends>
  </mbean>
  
  <!-- EAR deployer, remove if you are not using Web layers -->
  <mbean code="org.jboss.deployment.EARDeployer" name="jboss.j2ee:service=EARDeployer">
  </mbean>
  

  <!-- ==================================================================== -->
  <!-- Monitoring and Management                                            -->
  <!-- ==================================================================== -->

  <!-- Uncomment to enable JMX monitoring of the bean cache
  <mbean code="org.jboss.monitor.BeanCacheMonitor" 
         name="jboss.monitor:name=BeanCacheMonitor"/>
  -->

  <!-- Uncomment to enable JMX monitoring of the entity bean locking
  <mbean code="org.jboss.monitor.EntityLockMonitor" 
         name="jboss.monitor:name=EntityLockMonitor"/>
  -->

  <!-- ==================================================================== -->
  <!-- Invokers to the JMX node                                             -->
  <!-- ==================================================================== -->

  <!-- RMI/JRMP invoker -->
  <mbean code="org.jboss.invocation.jrmp.server.JRMPInvoker" 
         name="jboss:service=invoker,type=jrmp">
    <!--
    <attribute name="RMIObjectPort">4444</attribute>
    <attribute name="RMIClientSocketFactory">custom</attribute>
    <attribute name="RMIServerSocketFactory">custom</attribute>
    <attribute name="RMIServerSocketAddr">custom</attribute>
    <attribute name="SecurityDomain">ssl-domain-name</attribute>
    -->

    <depends>jboss.tm:service=TransactionManagerService</depends>
  </mbean>
  
  <mbean code="org.jboss.invocation.pooled.server.PooledInvoker"
         name="jboss:service=invoker,type=pooled">
    <depends>jboss.tm:service=TransactionManagerService</depends>
  </mbean>

  <mbean code="org.jboss.invocation.local.LocalInvoker" 
         name="jboss:service=invoker,type=local">

    <depends>jboss.tm:service=TransactionManagerService</depends>
  </mbean>

  <!-- Trunk invoker -->
  <mbean code="org.jboss.resource.work.BaseWorkManager" 
         name="jboss:service=WorkManager,type=TrunkInvoker">
    <depends optional-attribute-name="TransactionManager">jboss.tm:service=TransactionManagerService</depends>
    <attribute name="MinThreads">0</attribute>
    <attribute name="MaxThreads">50</attribute>
    <attribute name="KeepAliveTime">10000</attribute>
  </mbean>

  <mbean code="org.jboss.invocation.trunk.server.TrunkInvoker" 
         name="jboss:service=invoker,type=trunk">
    <attribute name="EnableTcpNoDelay">true</attribute>
    <attribute name="ServerBindPort">4445</attribute>
    <depends optional-attribute-name="WorkManager">jboss:service=WorkManager,type=TrunkInvoker</depends>
    <depends optional-attribute-name="TransactionManagerService">jboss.tm:service=TransactionManagerService</depends>
    <!--
    <attribute name="ServerBindAddress">192.168.1.1</attribute>
    <attribute name="ClientConnectAddress">192.168.1.1</attribute>
    <attribute name="ClientConnectPort">4445</attribute>
    -->
  </mbean>

  <!-- ==================================================================== -->
  <!-- User Transaction services.  Should be in another module              -->
  <!-- ==================================================================== -->

  <!--
     | UserTransaction support.
   - ->
  <mbean code="org.jboss.tm.usertx.server.ClientUserTransactionService"
	 name="jboss.tm:service=ClientUserTransaction">
    <depends optional-attribute-name="TransactionManagerService">jboss.tm:service=TransactionManagerService</depends>
    <depends optional-attribute-name="CachedConnectionManager">jboss.jca:service=CachedConnectionManager</depends>
  </mbean-->
  <mbean code="org.jboss.invocation.XATerminatorContainer"
	 name="jboss.invoker:service=XATerminatorContainer">
    <depends optional-attribute-name="TransactionManagerService">jboss.tm:service=TransactionManagerService</depends>
  </mbean>


  <!-- ==================================================================== -->
  <!-- Deployment Scanning                                                  -->
  <!-- ==================================================================== -->

  <!-- Uncomment to enable caching of deployment units
  <mbean code="org.jboss.deployment.cache.FileDeploymentStore"
	 name="jboss.deployment:type=DeploymentStore,flavor=File">
    <attribute name="DirectoryName">data/deployment-cache</attribute>
  </mbean>

  <mbean code="org.jboss.deployment.cache.DeploymentCache"
	 name="jboss.deployment:type=DeploymentCache">
    <depends optional-attribute-name="Deployer">jboss.system:service=MainDeployer</depends>
    <depends optional-attribute-name="Store">jboss.deployment:type=DeploymentStore,flavor=File</depends>
  </mbean>
  -->

  <!-- An mbean for hot deployment/undeployment of archives.
  -->
  <mbean code="org.jboss.deployment.scanner.URLDeploymentScanner"
	 name="jboss.deployment:type=DeploymentScanner,flavor=URL">

    <!-- Uncomment (and comment/remove version below) to enable usage of the
      DeploymentCache
    <depends optional-attribute-name="Deployer">jboss.deployment:type=DeploymentCache</depends>
    -->
    <depends optional-attribute-name="Deployer">jboss.system:service=MainDeployer</depends>

    <!-- The URLComparator can be used to specify a deployment ordering
         for deployments found in a scanned directory.  The class specified
         must be an implementation of java.util.Comparator, it must be able
         to compare two URL objects, and it must have a no-arg constructor.
         Two deployment comparators are shipped with JBoss:
           - org.jboss.deployment.DeploymentSorter 
             Sorts by file extension, as follows:
               "sar", "service.xml", "rar", "jar", "war", "wsr", "ear", "zip", 
               "*"
           - org.jboss.deployment.scanner.PrefixDeploymentSorter
             If the name portion of the url begins with 1 or more digits, those 
             digits are converted to an int (ignoring leading zeroes), and 
             files are deployed in that order.  Files that do not start with 
             any digits will be deployed first, and they will be sorted by
             extension as above with DeploymentSorter.
    -->
    <attribute name="URLComparator">org.jboss.deployment.DeploymentSorter</attribute>
    <!--
    <attribute name="URLComparator">org.jboss.deployment.scanner.PrefixDeploymentSorter</attribute>
    -->

    <!-- The Filter specifies a java.io.FileFilter for scanned
         directories.  Any file not accepted by this filter will not be
         deployed.  The org.jboss.deployment.scanner.DeploymentFilter 
         rejects the following patterns:
             "#*", "%*", ",*", ".*", "_$*", "*#", "*$", "*%", "*.BAK", 
             "*.old", "*.orig", "*.rej", "*.bak", "*,v", "*~", ".make.state", 
             ".nse_depinfo", "CVS", "CVS.admin", "RCS", "RCSLOG", "SCCS", 
             "TAGS", "core", "tags"
    -->
    <attribute name="Filter">org.jboss.deployment.scanner.DeploymentFilter</attribute>

    <attribute name="ScanPeriod">5000</attribute>

    <!-- URLs are comma separated and resolve relative to the server home URL
       unless the given path is absolute. If the URL ends in "/" it is
       considered a collection and scanned, otherwise it is simply deployed;
       this follows RFC2518 convention and allows discrimination between
       collections and directories that are simply unpacked archives.

       URLs may be local (file:) or remote (http:). Scanning is supported
       for remote URLs but unpacked deployment units are not.

       Example URLs:
          deploy/
               scans ${jboss.server.url}/deploy/, which is local or remote
               depending on the URL used to boot the server
          ${jboss.server.home}/deploy/
               scans ${jboss.server.home)/deploy, which is always local
          file:/var/opt/myapp.ear
               deploy myapp.ear from a local location
          file:/var/opt/apps/
               scans the specified directory
          http://www.test.com/netboot/myapp.ear
               deploys myapp.ear from a remote location
          http://www.test.com/netboot/apps/
               scans the specified WebDAV location
     -->
    <attribute name="URLs">
       deploy/
    </attribute>
  </mbean>

  <!--  An alternate hot deployer mbean. Use URLDirectoryScanner if you need to
    specify which urls are directories to scan, and which are urls to be
    deployed directly. URLDeploymentScanner assumes that all directories are to
    be scanned, which can cause problems if directory referred to in the
    deploy attribute is an exploded archive.

  <mbean code="org.jboss.deployment.scanner.URLDirectoryScanner"
       name="jboss.deployment:type=DeploymentScanner,flavor=URL">

    <depends optional-attribute-name="Deployer">jboss.system:service=MainDeployer</depends>
    <attribute name="URLComparator">org.jboss.deployment.DeploymentSorter</attribute>
    <attribute name="Filter">org.jboss.deployment.scanner.DeploymentFilter</attribute>
    <attribute name="ScanPeriod">5000</attribute>
    /* Each entry specifies either a dir (directory to be scanned),
      or url (url to be deployed). Like the URLs for the DeploymentScanner
      above, a file: protocol will be assumed if not specified otherwise.
    */
    <attribute name="URLs">
        <urls>
            <dir name="./deploy" />
            <url name="./deploy/examples/myapp.ear" />
            <dir name="./deploy/examples" />
            <url name="http://www.test.com/samples/myapp.ear" />
        </urls>
    </attribute>
  </mbean>
  -->

</server>
