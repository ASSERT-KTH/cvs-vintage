<?xml version="1.0" encoding="ISO-8859-1"?>

<Server>
    <!-- Debug low-level events in XmlMapper startup -->
    <xmlmapper:debug level="0" />

    <!-- This is quite flexible; we can either have a log file per
         module in Tomcat (example: ContextManager) or we can have
         one for Servlets and one for Jasper, or we can just have
	 one tomcat.log for both Servlet and Jasper.

	 If you omit "path" there, then stderr should be used.

	 verbosityLevel values can be: 
	    FATAL
	    ERROR
	    WARNING 
            INFORMATION
            DEBUG
         -->

    <Logger name="tc_log" 
            customOutput="yes" />
     <!-- add this back if you don't want messages on screen 
         path="logs/tomcat.log" -->

    <Logger name="servlet_log" 
            path="logs/servlet.log"
            customOutput="yes" />

    <Logger name="JASPER_LOG" 
	    path="logs/jasper.log"
            verbosityLevel = "INFORMATION" />

    <!-- Add "home" attribute if you want tomcat to be based on a different directory
         "home" is used to create work and to read webapps, but not for libs or CLASSPATH.
         Note that TOMCAT_HOME is where tomcat is installed, while ContextManager home is the
         base directory for contexts, webapps/ and work/
      -->
    <ContextManager debug="0" workDir="work" >
        <!-- ContextInterceptor className="org.apache.tomcat.context.LogEvents" / -->
        <ContextInterceptor className="org.apache.tomcat.context.AutoSetup" />
        <ContextInterceptor className="org.apache.tomcat.context.PolicyInterceptor" />
        <ContextInterceptor className="org.apache.tomcat.context.LoaderInterceptor" />
        <ContextInterceptor className="org.apache.tomcat.context.DefaultCMSetter" />
        <ContextInterceptor className="org.apache.tomcat.context.WorkDirInterceptor" />
        <ContextInterceptor className="org.apache.tomcat.context.WebXmlReader" />
        <ContextInterceptor className="org.apache.tomcat.context.LoadOnStartupInterceptor" />
        <!-- Request processing -->
        <!-- Session interceptor will extract the session id from cookies and 
             deal with URL rewriting. It has to be first to support rewriting ( otherwise
             the mapper will have to know about sessions 
          -->
        <RequestInterceptor className="org.apache.tomcat.request.SessionInterceptor" />

        <!-- Find the container ( context and prefix/extension map ) for a request.
             For "integrated" mode it can be avoided, assuming we get all the info from
             the server.
          -->
        <RequestInterceptor className="org.apache.tomcat.request.SimpleMapper1" debug="0" />

        <!-- Plug a session manager. This should be per-context ( easy to do, but nobody asked
             for it yet )
          -->
        <RequestInterceptor className="org.apache.tomcat.session.StandardSessionInterceptor" />

        <!-- Check if the request requires an authenticated role  -->
        <RequestInterceptor className="org.apache.tomcat.request.AccessInterceptor" debug="0" />

        <!-- Check permissions using a simple xml file  -->
        <RequestInterceptor className="org.apache.tomcat.request.SimpleRealm" debug="0" />

		<!-- UnComment one of the following and comment out the above to get a JDBC realm -->

		<!--
		     <RequestInterceptor className="org.apache.tomcat.request.JDBCRealm" debug="99" 
		        driverName="sun.jdbc.odbc.JdbcOdbcDriver" 
		        connectionURL="jdbc:odbc:TOMCAT" 
		        userTable="users" userNameCol="user_name" userCredCol="user_pass" 
		        userRoleTable="user_roles" roleNameCol="role_name"/>

        
             <RequestInterceptor className="org.apache.tomcat.request.JDBCRealm" debug="99"
                driverName="oracle.jdbc.driver.OracleDriver"
                connectionURL="jdbc:oracle:thin:@ntserver:1521:ORCL?user=scott;password=tiger"
                userTable="users" userNameCol="user_name" userCredCol="user_pass"
                userRoleTable="user_roles" roleNameCol="role_name" />
        
             <RequestInterceptor className="org.apache.tomcat.request.JDBCRealm" debug="99"
                driverName="sun.jdbc.odbc.JdbcOdbcDriver"
                connectionURL="jdbc:odbc:TOMCAT"
                userTable="users" userNameCol="user_name" userCredCol="user_pass"
                userRoleTable="user_roles" roleNameCol="role_name" />

        -->

        <Connector className="org.apache.tomcat.service.PoolTcpConnector">
            <Parameter name="handler" value="org.apache.tomcat.service.http.HttpConnectionHandler"/>
            <Parameter name="port" value="8080"/>
        </Connector>

        <Connector className="org.apache.tomcat.service.PoolTcpConnector">
            <Parameter name="handler" value="org.apache.tomcat.service.connector.Ajp12ConnectionHandler"/>
            <Parameter name="port" value="8007"/>
        </Connector>

        <!-- example - how to override AutoSetup actions -->
        <Context path="/examples" docBase="webapps/examples" debug="0" reloadable="true" > 
        </Context>
        <!-- example - how to override AutoSetup actions -->
        <Context path="" docBase="webapps/ROOT" debug="0" reloadable="true" > 
        </Context>

        <Context path="/test" docBase="webapps/test" debug="0" reloadable="true" > 
        </Context>

        <Context path="/admin" docBase="webapps/admin" debug="0" reloadable="true" trusted="true" > 
        </Context>

        <!-- Virtual host example - just use numeric IP instead of localhost
             and you should see /examples as the root context and root as examples.
             Same docBase is used, just different mappings :-)        -->
        <Host name="127.0.0.1" >
           <Context path="" docBase="webapps/examples" />
           <Context path="/examples" docBase="webapps/ROOT" />
        </Host>

    </ContextManager>
</Server>
