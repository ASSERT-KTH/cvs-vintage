<?xml version="1.0"?>
<document url="./introduction.xml">

  <properties>
    <author>Craig R. McClanahan</author>
    <author>Mike Schachter</author>
    <author>Larry McCay</author>
    <title>The Struts Framework Project</title>
  </properties>

  <body>

  <chapter name="Introduction" href="introduction">
  	
  		<section name="The Model-View-Controller ('MVC') Design Pattern" href="mvc">
  		
  			<p>
	  			In the MVC design pattern, the application flow is controlled by a central <i>Controller</i>,
	  			which utilizes an implementation of the Mediator design pattern to delegate requests to the
	  			appropriate handler, which is tied with a <i>Model</i>. The Model is responsible for containg the
	  			application logic.  The control is then forwarded to the appropriate <i>View</i> back through the 
	  			Controller. The appropriate View which to forward the request to is acquired by resolving, 
	  			from a configuration file or database, the logical name passed to the Controller.  This provides
	  			a loose coupling of the View and Model within the application.	 The MVC implementation in Struts
	  			is sometimes also called "Model-2". 		
	  		</p>	  		
	  		<p>
	  			See the "<a href="#resources">resources</a>" section at the end of this guide for links to the
	  			Model-View-Controller desgin pattern.
	  		</p>
	  		
  			
  		</section>
  		
  		<section name="Mapping MVC Concepts to Struts Components" href="introduction_mvcConcepts">
  		
  			<p>
  				The Struts architecture implements the concepts of the
  				Model-View-Controller design pattern by mapping them to web
  				application components and concepts, as outlined in the following
  				diagram:
  				<p align="center">
  					<img src="model2.gif" />
  				</p>
  			</p>
  			
  			<p>
  				Each major component of this architecture will be discussed in more detail below.
  			</p>
  		</section>

		<section name="The Model: System State and Business Logic JavaBeans" href="introduction_modelConcepts">
			
			<p>
				The <i>Model</i> portion of an MVC-based system can be subdivided into
				concepts -- the internal state of the system, and the actions that can be
				taken to change that state.  In grammatical terms, we might think about
				state information as <i>nouns</i> (things) and actions as <i>verbs</i>
				(changes to the state of those things).
			</p>
				
			<p>
				Generally, your application will represent the internal state of the
				system as a set of one or more JavaBeans, with properties that represent
				the details of the state.  Depending on your application's complexity,
				these beans may be self contained (and know how to save their state
				information persistently somehow), or they may be facades that know
				how to retrieve information from external sources (such as a database)
				when it is requested.  Entity Enterprise JavaBeans (EJBs) are also commonly
				used to represent internal state.
			</p>
				
			<p>
				Large-scale applications will often represent the business logic actions
				that are possible in a system as methods that can be called on the beans
				maintaining the state information.  For example, you might have a shopping
				cart bean, stored in session scope for each current user, with properties
				that represent the current set of items that the user has decided to
				purchase.  This bean might also have a <code>checkOut()</code> method
				that authorizes the user's credit card, and sends the order to the
				warehouse to be picked and shipped.  Other systems will represent the
				available actions separately, perhaps as Session Enterprise JavaBeans
				(EJBs).
			</p>
				
			<p>
				In some smaller scale applications, on the other hand, the available
				actions might be embedded within the <code>Action</code> classes that are
				part of the Controller role.  This is appropriate when the logic is very
				simple, or where reuse of the business logic in other environments is not
				contemplated.  The Struts framework supports any of these approaches, but
				recommends separating the business logic ("what to do") from the role that
				<code>Action</code> classes play ("deciding what to do").
			</p>
		</section>

		<section name="1.4 The View: JSP Pages and Presentation Components" href="introduction_presentationConcepts">
			
			<p>
				The <i>View</i> portion of a Struts-based application is generally
				constructed using JavaServer Pages (JSP) technology.  JSP pages can
				contain static HTML (or XML) text called "template text", plus the
				ability to insert dynamic content based on the interpretation (at page
				request time) of special action tags.  The JSP environment includes a
				set of standard action tags, such as <code>&lt;jsp:useBean&gt;</code>
				whose purpose is described in the JavaServer Pages Specification.  In
				addition, there is a standard facility to define your own tags, which
				are organized into "custom tag libraries."
			</p>
					
			<p>
				Struts includes an extensive custom tag library that facilitates
				creating user interfaces that are fully internationalized, and that
				interact gracefully with <code>ActionForm</code> beans that are part
				of the <i>Model</i> portion of the system.  The use of these tags is
				discussed in detail later.
			</p>
					
			<p>
				In addition to JSP pages and the action and custom tags they contain,
				it is often necessary for business objects to be able to render
				themselves in HTML (or XML), based on their current state at request time.
				The rendered output from such objects can be easily included in a
				resulting JSP page by using the <code>&lt;jsp:include&gt;</code>
				standard action tag.
			</p>
		</section>
		
		<section name="1.5 The Controller: ActionServlet and ActionMapping" href="introduction_controllerConcepts">
			
			<p>
				The <i>Controller</i> portion of the application is focused on receiving
				requests from the client (typically a user running a web browser), deciding
				what business logic function is to be performed, and then delegating
				responsibility for producing the next phase of the user interface to
				an appropriate View component.  In Struts, the primary component of the
				Controller is a servlet of class <code>ActionServlet</code>.  This servlet
				is configured by defining a set of mappings (described by a Java class
				<code>ActionMapping</code>).  Each mapping defines a <code>path</code>
				that is matched against the request URI of the incoming request, and the
				fully qualified class name of an <code>Action</code> class (that is, a
				Java class extending the <code>Action</code> class) which is
				responsible for performing the desired business logic, and then dispatching
				control to the appropriate View component to create the response.
			</p>
				
			<p>
				Struts also supports the ability to use <code>ActionMapping</code>
				classes that have additional properties beyond the standard ones required
				to operate the framework.  This allows you to store additional information
				specific to your application, but still utilize the remaining features of
				the framework.  In addition, Struts lets you define logical "names" to which
				control should be forwarded so that an action method can ask for the
				"Main Menu" page (for example), without knowing what the actual name of the
				corresponding JSP page is.  These features greatly assist you in separating
				the control logic (what do I do next) with the view logic (what is the name
				of the corresponding page).
			</p>
  		</section>
  	</chapter>
  	</body>
</document>