<?xml version="1.0"?>
<document url="./building_controller.xml">

  <properties>
    <author>Craig R. McClanahan</author>
    <author>Mike Schachter</author>
    <title>The Struts Framework Project</title>
  </properties>
  
  <body>  
  <chapter name="Building Controller Components" href="building_controller">
  
  		<section name="4.1 Overview" href="building_controller_overview">
  			
  			<p>
  				Now that we understand how to construct the Model and View components
				of your application, it is time to focus on the <code>Controller</code>
				components.  Struts includes a servlet that implements the primary function
				of mapping a request URI to an <code>Action</code> class.  Therefore, your
				primary responsibilities related to the Controller are:
			</p>
			
			<ul>
				<li>Write an <code>Action</code> class (that is, an implementation of the
				    <code>Action</code> interface) for each logical request
				    that may be received.</li>
				<li>Write an <code>ActionMapping</code> class (that is, an implementation
				    of the <code>ActionMapping</code> interface) that defines the class
				    names and other information associated with each possible
				    mapping.</li>
				<li>Write the action mapping configuration file (in XML) that is used
				    to configure the controller servlet.</li>
				<li>Update the web application deployment descriptor file (in XML)
				    for your application to include the necessary Struts components.</li>
				<li>Add the appropriate Struts components to your application.</li>
			</ul>
		</section>
		
		<section name="4.2 Action Classes" href="building_controller_action_classes">
			
			<p>The <code>Action</code> interface defines a single method that must be
				implemented by an <code>Action</code> class, as follows:
				<pre>
				    public ActionForward perform(ActionServlet servlet,
				                                 ActionMapping mapping,
				                                 ActionForm form,
				                                 HttpServletRequest request,
				                                 HttpServletResponse response)
				      throws IOException, ServletException;
				</pre>
			</p>
				
			<p>
				The goal of an <code>Action</code> class is to process this request,
				and then to return an <code>ActionForward</code> object that identifies
				the JSP page (if any) to which control should be forwarded to generate
				the corresponding response.  In the <i>Model 2</i> design pattern,
				a typical <code>Action</code> class will implement the following
				logic in its <code>perform()</code> method:
			</p>
			<ul>
				<li>Validate the current state of the user's session (for example, checking
				    that the user has successfully logged on).  If the <code>Action</code>
				    class finds that no logon exists, the request should be forwarded to
				    the JSP page that displays the username and password prompts for
				    logging on.  This could occur because a user tried to enter your
				    application "in the middle" (say, from a bookmark), or because the
				    session has timed out, and the servlet container created a new one.</li>
				<li>If validation has not yet occurred (due to the use of a form bean
				    that implements the <code>ValidatingActionForm</code> interface),
				    validate the form bean properties as necessary.  If a problem is found,
				    store the appropriate error message keys as a request attribute, and
				    forward control back to the input form so that the errors can be
				    corrected.</li>
				<li>Perform the processing required to deal with this request (such as
				    saving a row into a database).  This can be done by code embedded within
				    the <code>Action</code> class itself, but should generally be performed
				    by calling an appropriate method of a business logic bean.</li>
				<li>Update the server-side objects that will be used to create the next
				    page of the user interface (typically request scope or session scope
				    beans, depending on how long you need to keep these items available).</li>
				<li>Return an appropriate <code>ActionForward</code> object that identifies
				    the JSP page to be used to generate this response, based on the newly
				    updated beans.  Typically, you will acquire a reference to such an
				    object by calling <code>findForward()</code> on either the
				    <code>ActionMapping</code> object you received (if you are using a
				    logical name local to this mapping), or on the controller servlet
				    itself (if you are using a logical name global to the application).</li>
			</ul>
				
			<p>
				Design issues to remember when coding <code>Action</code> classes
				include the following:
			</p>
			
			<ul>
				<li>The controller servlet creates only one instance of your
				    <code>Action</code> class, and uses it for all requests.  Thus,
				    you need to code your <code>Action</code> class so that it operates
				    correctly in a multi-threaded environment, just as you must code a
				    servlet's <code>service()</code> method safely.</li>
				<li>The most important principle that aids in thread-safe coding is to
				    use only local variables, not instance variables, in your
				    <code>Action</code> class.  Local variables are created on a
				    stack that is assigned (by your JVM) to each request thread, so
				    there is no need to worry about sharing them.</li>
				<li>The beans that represent the Model of your system may throw exceptions
				    due to problems accessing databases or other resources.
				    You should trap all such exceptions
				    in the logic of your <code>perform()</code> method, and log them to the
				    application logfile (along with the corresponding stack trace) by
				    calling:
				    <pre>
					servlet.log("Error message text", exception);
				    </pre></li>
				<li>As a general rule, allocating scarce resources and keeping them across
				    requests from the same user (in the user's session) can cause
				    scalability problems.  You should strive to release such resources
				    (such as database connections) prior to forwarding control to the
				    appropriate View component -- even if a bean method you have called
				    throws an exception.</li>
			</ul>
				
			<p>
				In addition, you will want to guard against <code>Action</code> classes
				that are too large.  The easiest way for this to happen is to embed your
				functional logic in the <code>Action</code> class itself, rather than
				coding it in separate business logic beans.  Besides making the
				<code>Action</code> class itself hard to understand and maintain, this
				approach also makes it harder to re-use the business logic code, because
				it is embedded inside a component (the <code>Action</code> class) that
				is tied to being executed in a web application environment.
			</p>
				
			<p>
				The example application included with Struts stretches this design
				principle somewhat, because the business logic itself is embedded in the
				<code>Action</code> classes.  This should be considered something of a
				bug in the design of the sample application, rather than an intrinsic
				feature of the Struts architecture, or an approach to be emulated.
			</p>
		</section>
				
		<section name="4.3 The ActionMapping Implementation" href="building_controller_actionmapping">
			
			<p>
				In order to operate successfully, the Struts controller servlet needs
				to know several things about how each request URI should be mapped to an
				appropriate <code>Action</code> class.  The required knowledge has been
				encapsulated in a Java interface named <code>ActionMapping</code>, which
				has the following properties:
			</p>
			
			<ul>
				<li><b>actionClass</b> - The fully qualified Java class name of the
				    <code>Action</code> class used for this mapping.  The first time
				    a particular mapping is used, an instance of this class will be
				    created and saved for reuse later.</li>
				<li><b>formAttribute</b> - The name of the session scope bean under
				    which the current <code>ActionForm</code> for this mapping is stored.
				    If this property is not defined, no <code>ActionForm</code> will be
				    used.</li>
				<li><b>formClass</b> - The fully qualified Java class name of the
				    <code>ActionForm</code> class used for this mapping.  If you are
				    using the support for form beans, an instance of this class will be
				    created and saved (in the current user's session) automatically
				    whenever necessary.</li>
				<li><b>path</b> - The request URI path that is matched to select this
				    mapping.  See below for examples of how matching works.</li>
			</ul>
				
			<p>
				Struts includes a convenient implementation of the
				<code>ActionMapping</code> interface, in a class named
				<code>ActionMappingBase</code>.  If you do not need to define any
				additional properties for your own mappings, feel free to use
				this class as your <code>ActionMapping</code> class, configured as
				described in the following section.  However, it is also possible to
				define an <code>ActionMapping</code> implementation (perhaps extending the
				<code>ActionMappingBase</code> class) that contains additional properties.
				The controller servlet knows how to configure these custom properties
				automatically, because it uses the Struts Digester module to read the
				configuration file.
			</p>
				
			<p>
				In the example application included with Struts, this feature is used to
				define two additional properties:
			</p>
			
			<ul>
				<li><b>failure</b> - The context-relative URI to which control should be
				    forwarded if the Action class detects some sort of problem with the
				    input fields it received.  This will typically be the name of the
				    JSP page from which the request was sent, which will cause the form
				    to be redisplayed (with the error messages set by the Action Class
				    and the most recent input values from the ActionForm bean).</li>
				<li><b>success</b> - The context-relative URI to which control should be
				    forwarded if the Action class successfully performs the required
				    function.  This will typically be the name of a JSP page that prepares
				    the next page of the conversation flow for this application.</li>
			</ul>
				
			<p>
				Using these two extra properties, the <code>Action</code> classes in the
				example application are almost totally independent of the actual names of
				the JSP pages that are used by the page designers.  The pages can be renamed
				(for example) during a redesign, with negligible impact on the
				<code>Action</code> classes themselves.  If the names of the "next" JSP
				pages were hard coded into the <code>Action</code> classes, all of these
				classes would also need to be modified.
			</p>
		</section>
		
		<section name="4.4 The Action Mappings Configuration File" href="building_controller_config">
			
			<p>
				How does the controller servlet learn about the mappings you want?  It
				would be possible (but tedious) to write a small Java class that simply
				instantiated new <code>ActionMapping</code> instances, and called all of
				the appropriate setter methods.  To make this process easier, Struts includes
				a Digester module that is capable of reading an XML-based description of
				the desired mappings, creating the appropriate objects along the way.
				See the <a href="api/index.html">API documentation</a> for more information
				about Digester.
			</p>
				
			<p>
				The developer's responsibility is to create an XML file named
				<code>action.xml</code>, and place it in the WEB-INF directory of your
				application.  (Note that no DTD for this file is required, because the
				actual attributes used can be different for different users.)  The
				outermost XML element must be <code>&lt;action-mappings&gt;</code>, and
				within this element are nested zero or more <code>&lt;action&gt;</code>
				elements -- one per mapping that you wish to define.
			</p>
				
			<p>
				The <code>action.xml</code> file from the example application includes
				the following mapping entry for the "log on" function, which we will use
				to illustrate the requirements:
			</p>
				<pre>
				  &lt;action-mappings&gt;
				
				    &lt;forward name="logon" path="/logon.jsp"/&gt;
				
				    &lt;action   path="/logon"
				       actionClass="org.apache.struts.example.LogonAction"
				     formAttribute="logonForm"
				         formClass="org.apache.struts.example.LogonForm"
				         inputForm="/logon.jsp"&gt;
				      &lt;forward name="success" path="/mainMenu.jsp"/&gt;
				    &lt;/action&gt;
				
				  &lt;/action-mappings&gt;
				</pre>
				
			<p>
				As you can see, this mapping matches the path <code>/logon</code> (actually,
				because the example application uses extension mapping, the request URI you
				specify in a JSP page would end in <code>/logon.do</code>).  When a request
				that matches this path is received, an instance of the <code>LogonAction</code>
				class will be created (the first time only) and used.  The controller servlet
				will look for a session scoped bean under key <code>logonForm</code>, creating
				and saving a bean of the specified class if needed.
			</p>
				
			<p>
				This <code>action</code> element also defines a logical name "success",
				which is used within the <code>LogonAction</code> class to identify the
				page to be used when a user successfully logs on.  Using a logical name like
				this allows the action class to be insulated from any changes in the page
				names that might occur due to a site redesign.
			</p>
				
			<p>
				There is a second <code>forward</code> element that is declared outside
				of any <code>action</code>, so it is globally available to all actions.  In
				this case, it defines a logical name for the logon page.  In your action
				code, when you call <code>mapping.findForward()</code>, Struts first looks at
				the locally defined logical names for this action.  If it does not find one,
				it then searches the global definitions for you automatically.
			</p>
		</section>
		
		<section name="4.5 The Web Application Deployment Descriptor" href="building_controller_dd_config">
			
			<p>
				The final step in setting up the application is to configure the application
				deployment descriptor (stored in file <code>WEB-INF/web.xml</code>) to include
				all the Struts components that are required.  Using the deployment descriptor
				for the example application as a guide, we see that the following entries need
				to be created or modified.
			</p>
			
			<section name="4.5.1 Configure the Action Servlet Instance" href="building_controller_dd_config_servlet">
				
				<p>
					Add an entry defining the action servlet itself, along with the appropriate
					initialization parameters.  Such an entry might look like this:
					<pre>
					    &lt;servlet&gt;
					      &lt;servlet-name&gt;action&lt;/servlet-name&gt;
					      &lt;servlet-class&gt;org.apache.struts.action.ActionServlet&lt;/servlet-class&gt;
					      &lt;init-param&gt;
					        &lt;param-name&gt;application&lt;/param-name&gt;
					        &lt;param-value&gt;org.apache.struts.example.ApplicationResources&lt;/param-value&gt;
					      &lt;/init-param&gt;
					      &lt;init-param&gt;
					        &lt;param-name&gt;config&lt;/param-name&gt;
					        &lt;param-value&gt;/WEB-INF/action.xml&lt;/param-value&gt;
					      &lt;/init-param&gt;
					      &lt;init-param&gt;
					        &lt;param-name&gt;debug&lt;/param-name&gt;
					        &lt;param-value&gt;2&lt;/param-value&gt;
					      &lt;/init-param&gt;
					      &lt;init-param&gt;
					        &lt;param-name&gt;mapping&lt;/param-name&gt;
					        &lt;param-value&gt;org.apache.struts.example.ApplicationMapping&lt;/param-value&gt;
					      &lt;/init-param&gt;
					      &lt;load-on-startup&gt;2&lt;/load-on-startup&gt;
					    &lt;/servlet&gt;
					</pre>
				</p>
				
				<p>
					The initialization parameters supported by the controller servlet are
					described below, which is copied from the <a href="api/index.html">Javadocs</a>
					for the <code>ActionServlet</code> class.  Square brackets describe the
					default values that are assumed if you do not provide a value for that
					initialization parameter.
				</p>
				<ul>
					<li><strong>application</strong> - Java class name of the application
					    resources bundle base class.  [NONE].</li>
					<li><strong>config</strong> - Context-relative path to the XML resource
					    containing our configuration information.  [/WEB-INF/action.xml]</li>
					<li><strong>debug</strong> - The debugging detail level for this
					    servlet, which controls how much information is logged.  [0]</li>
					<li><strong>digester</strong> - The debugging detail level for the Digester
					    we utilize in <code>initMapping()</code>, which logs to System.out
					    instead of the servlet log.  [0]</li>
					<li><strong>forward</strong> - The Java class name of the ActionForward
					    implementation to use [org.apache.struts.action.ActionForward]</li>
					<li><strong>mapping</strong> - The Java class name of the ActionMapping
					    implementation to use [org.apache.struts.action.ActionMappingBase]</li>
					<li><strong>nocache</strong> - If set to <code>true</code>, add HTTP headers
					    to every response intended to defeat browser caching of any response we
					    generate or forward to.  [false]</li>
					<li><strong>null</strong> - If set to <code>true</code>, set our application
					    resources to return <code>null</code> if an unknown message key is used.
					    Otherwise, an error message including the offending message key will
					    be returned.  [true]</li>
				</ul>			
			</section>
			
			<section name="4.5.2 Configure the Action Servlet Mapping" href="building_controller_dd_config_mapping">
			
				<p>
					There are two common approaches to defining the URLs that will
					be processed by the controller servlet -- prefix matching and extension
					matching.  An appropriate mapping entry for each approach will be
					described below.
				</p>
					
				<p>
					Prefix matching means that you want all URLs that start (after the context
					path part) with a particular value to be passed to this servlet.  Such an
					entry might look like this:
				</p>
					<pre>
					    &lt;servlet-mapping&gt;
					      &lt;servlet-name&gt;action&lt;/servlet-name&gt;
					      &lt;url-pattern&gt;/execute/*&lt;/url-pattern&gt;
					    &lt;/servlet-mapping&gt;
					</pre>
				
				<p>
					which means that a request URI to match the <code>/logon</code> path
					described earlier might look like this:
					<pre>
					    http://www.mycompany.com/myapplication/execute/logon
					</pre>
				</p>
				
				<p>
					where <code>/myapplication</code> is the context path under which your
					application is deployed.
				</p>
					
				<p>
					Extension mapping, on the other hand, matches request URIs to the action
					servlet based on the fact that the URI ends with a period followed by a
					defined set of characters.  For example, the JSP processing servlet is mapped
					to the <code>*.jsp</code> pattern so that it is called to process every
					JSP page that is requested.  To use the <code>*.do</code> extension (which
					implies "do something"), the mapping entry would look like this:
					<pre>
					    &lt;servlet-mapping&gt;
					      &lt;servlet-name&gt;action&lt;/servlet-name&gt;
					      &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;
					    &lt;/servlet-mapping&gt;
					</pre>
				</p>
				
				<p>
					and a request URI to match the <code>/logon</code> path described
					earlier might look like this:
					<pre>
					    http://www.mycompany.com/myapplication/logon.do
					</pre>
				</p>
			</section>
			
			<section name="4.5.3 Configure the Struts Tag Library" href="building_controller_dd_config_taglib">
				
				<p>
					Next, you must add an entry defining the Struts tag library.  The entry
					should look like this:
					<pre>
					  &lt;taglib&gt;
					    &lt;taglib-uri&gt;/WEB-INF/struts.tld&lt;/taglib-uri&gt;
					    &lt;taglib-location&gt;/WEB-INF/struts.tld&lt;/taglib-location&gt;
					  &lt;/taglib&gt;
					</pre>
				</p>
					
				<p>
					which tells the JSP system where to find the tag library descriptor
					for this library (in your application's WEB-INF directory, instead of
					out on the Internet somewhere).
				</p>
			</section>
			
			<section name="4.5.4 Add Struts Components To Your Application" href="building_controller_dd_config_add">
				
				<p>
					To use Struts when your application executes, you must copy the
					<code>struts.tld</code> file to your <code>WEB-INF</code> directory,
					and the <code>struts.jar</code> file to your <code>WEB-INF/lib</code>
					directory.
				</p>
			</section>
		</section>
	</chapter>
	</body>
</document>
					
										
