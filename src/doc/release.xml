<?xml version="1.0"?>
<document url="./release.xml">

  <properties>
    <author>Craig R. McClanahan</author>
    <title>Struts Release Notes (Version 1.0)</title>
  </properties>

  <body>

  <section name="Introduction" href="Introduction">

  <p>This document contains the release notes for <strong>Version 1.0</strong>
  of the Struts Framework.  The following sections cover
  <a href="#New">New Features</a> and <a href="#Changes">Changes</a> since
  the <strong>Version 0.5</strong> of Struts was made available.</p>

  <p>One global new feature to take note of is that Struts 1.0 requires
  a Java2 (JDK 1.2 or later) platform on which to run.</p>

  </section>


  <section name="What's New?" href="New">

  <p>The following major new features have been added to the controller
  servlet and associated classes
  (package <code>org.apache.struts.action</code>):</p>
  <ul>
  <li>A new configuration file format, including the
      <a href="dtds/struts-config_1_0.dtd">Document Type Definition (DTD)</a>
      it is based on, is available for configuring the Struts controller
      servlet.  Support for the previous format is still present, but will
      be phased out by the 1.0 release.</li>
  <li>If enabled by setting the <code>locale</code> servlet initialization
      parameter to <code>true</code>, the controller servlet will now calculate
      a Locale for this user (based on the Locale returned by the servlet
      container, or by the HTTP headers included with the request)
      and store it in the user's session, unless the application
      has stored one there already.</li>
  <li>Application <code>Action</code> instances now have lifecycle support.
      The controller servlet will call <code>setServlet()</code> with a
      non-null argument when the instance is first created, and call it with
      a <code>null</code> argument when the instance is being shut down.</li>
  <li>The collection of "standard" Struts actions (in package
      <code>org.apache.struts.actions</code>) is kicked off with a set of
      simple actions that allow on-the-fly changes in the form bean, forward,
      and mapping definitions registered with the controller servlet.  These
      actions would normally be configured behind security constraints to
      prevent interference with the operation of your application but can be
      very useful during development.</li>
  <li>A new representation of error messages (<code>ActionError</code> and
      <code>ActionErrors</code>) has been created that allows errors to be
      associated with individual fields, and stores parameter replacement
      values along with the messages keys.</li>
  <li>The <code>ActionForm</code> interface has been converted to a base class,
      with default implementations of some useful functionality.  In addition,
      the new class provides two <code>validate()</code> methods that take
      the current mapping and current request as arguments, in order to provide
      access to more context information than just the properties of this
      particular form bean.</li>
  <li>The new <code>ActionForm</code> class also provides to
      <code>reset()</code> methods that take the current mapping and current
      request as arguments, in order to provide access to more context
      information (particularly important on multi-page forms so that the form
      bean knows which properties to reset).  Among other things, use of the
      <code>reset()</code> methods can prevent problems with checkbox fields
      -- simply reset boolean fields to <code>false</code> and they will be
      set to <code>true</code> (during auto-population of the form bean
      properties) only if the checkbox was actually checked.</li>
  </ul>

  <p>The following major new features have been added to the
  <em>struts-bean</em> custom tag library (package
  <code>org.apache.struts.taglib.bean</code>):</p>
  <ul>
  <li>A new custom tag, <code>&lt;bean:page&gt;</code>, is available
      to expose key items from the page context associated with the current
      page as scripting variables, and as page-scope beans.  For example,
      you can use the following sequence to render the server information
      string returned by our servlet context:
      <pre>
      &lt;bean:page id="app" property="application"/&gt;
      &lt;bean:write name="app" property="serverInfo"/&gt;
      </pre></li>
  <li>A new custom tag, <code>&lt;bean:struts&gt;</code>, is available
      to expose internal Struts configuration objects (form bean, forward,
      and mapping definitions) as scripting variables and page-scope beans.
      For example, you can use the following sequence to render the actual
      context-relative path of an <code>ActionForward</code> object:
      <pre>
      &lt;bean:struts id="link" forward="success"/&gt;
      &lt;bean:write name="link" property="path"/&gt;
      </pre></li>
  </ul>

  <p>The following major new features have been added to the
  <em>struts-bean</em> custom tag library (package
  <code>org.apache.struts.taglib.bean</code>):</p>
  <ul>
  <li>All of the tags in this library that accept a <code>name</code>
      attribute referring to a JSP bean now also accept an optional
      <code>scope</code> attribute to define the scope in which to search
      for that bean.  If not specified, all scopes are searched.</li>
  </ul>

  <p>The <em>struts-form</em> custom tag library has been created (package
  <code>org.apache.struts.taglib.form</code>), based on the old tags that
  were related to HTML form presentation.  The following differences from
  the old tags are notable:</p>
  <ul>
  <li>You must now reference the "struts-form.tld" TLD to access these
      tags.</li>
  <li>All attribute names matching JavaScript event handlers are now all
      lower case (onClick --&gt; onclick) to conform to XHTML.</li>
  <li>The <code>options1</code> tag has been eliminated since Struts is now
      based on Java2.</li>
  <li>All tag implementation classes have had their <code>final</code>
      modifiers removed, and <code>private</code> instance variables
      changed to <code>protected</code>.  This makes it possible to easily
      subclass these tags to provide specialized functionality.</li>
  <li>The <code>&lt;form:link&gt;</code> tag has been enhanced to support
      a new <code>page</code> attribute that allows you to use
      context-relative URIs in a portable manner.</li>
  <li>A new <code>&lt;form:html&gt;</code> tag has been created that
      renders an HTML <code>&lt;html&gt;</code> element with appropriate
      <code>lang</code> and <code>xml:lang</code> attributes, based on the
      session stored in the user's session (if there is one).</li>
  <li>A new <code>&lt;rewrite&gt;</code> tag has been created that
      renders a request URI, possibly encoded with a session identifier,
      based on exactly the same rules used by the <code>&lt;link&gt;</code>
      tag that generates hyperlinks.  These constants can be useful when
      you are creating JavaScript code that needs to be aware of Struts
      addressing concepts.</li>
  </ul>

  <p>The following major new features have been added to the
  <em>Struts Example Application</em>:</p>
  <ul>
  <li>The form beans used in the example application now use request scope
      rather than session scope.  This is the preferred approach for single
      page forms that contain <em>all</em> of your relevant properties,
      because there is no need to maintain such form beans across requests.
      Note that the action classes have been coded so that they work with
      either request scope or session scope beans.</li>
  <li>The Struts Example Application has been updated to utilize the new
      (separated) custom tag libraries, rather than the old combined one.</li>
  </ul>

  </section>


  <section name="Changes and Bug Fixes" href="Changes">

  <p>The following changes and bug fixes to the controller servlet and
  associated classes (package <code>org.apache.struts.action</code>) have
  occurred:</p>
  <ul>
  <li>The <code>ActionMapping</code> interface has been converted to a base
      class instead, to reduce the impact of future enhancements.  Anyone who
      has extended the <code>ActionMappingBase</code> convenience base class
      (which has been deprecated) should extend <code>ActionMapping</code>
      instead.</li>
  <li>In conjunction with the new configuration file format mentioned above,
      the properties of <code>ActionMapping</code> have been substantially
      updated.  See the
      <a href="api/org/apache/struts/action/ActionMapping.html">API
      Documentation</a> for more information</li>
  <li>The <code>Action</code> interface has been converted to a base class
      instead, to reduce the impact of future enhancements.  Anyone who has
      extended the <code>ActionBase</code> convenience base class (which
      has been deprecated) should extend <code>Action</code> instead.</li>
  <li>In conjunction with the above change, the <code>servlet</code>
      argument has been removed from the parameter list for the
      <code>perform()</code> method, because it is now redundant -- the
      associated servlet is set via the <code>setServlet()</code> method
      when the <code>Action</code> instance is first created.</li>
  <li>Responsibility for creating <code>Action</code> instances has been moved
      from <code>ActionMapping</code> to the controller servlet, so that
      instance lifecycle management can be performed.  As a side effect of this
      change, if you had two actions that used the same Action class name,
      there will now be only one (shared) instance of the Action class,
      rather than two.</li>
  <li>New <code>log(String, int)</code> method that logs the associated message
      only if you have configured the debugging detail level for the servlet to
      an equal or higher value.</li>
  <li>In <code>ActionServlet</code>, the functionality to populate form bean
      parameters from a request, and the functionality to validate the form
      bean's contents, has been separated into two methods that can be
      overridden individually if required.</li>
  <li>The <code>ActionServlet</code> functionality to call the
      <code>validate()</code> method of a form bean is skipped if the user
      pressed the Cancel key (i.e. the submit button created by the
      <code>&lt;struts:cancel&gt;</code> custom tag), or if the selected
      mapping does not define an input form to return control to.</li>
  <li>The controller servlet may now be used as the target of a
      <code>RequestDispatcher.include()</code> or
      <code>&lt;jsp:include/&gt;</code> call.  Previously, it would mistakenly
      use the original request URI, rather than the included path, to calculate
      which action class to execute.</li>
  <li>The <code>ActionMappings.getUnknown()</code> method now takes the current
      request as an parameter, so that context-sensitive decisions can be
      made.</li>
  </ul>

  <p>The following changes and bug fixes to the Digester module
  (package <code>org.apache.struts.digester</code>) have occurred:</p>
  <ul>
  <li>The <code>Digester.resolveEntity()</code> method has been enhanced
      to correctly handle local URIs so that it works with resources loaded via
      <code>Class.getResource()</code>.</li>
  </ul>

  <p>The following changes and bug fixes to the Utilities package
  (package <code>org.apache.struts.util</code>) have occurred:</p>
  <ul>
  <li>Fixed <code>PropertyUtils.getPropertyType()</code> to correctly return
      the underlying element type even if there was a non-indexed property
      getter method.</li>
  <li>Added a missing "return" statement to
      <code>PropertyUtils.setIndexedProperty()</code>.</li>
  <li>Functionality in <code>BeanUtils</code> that previously duplicated
      functionality that was earlier moved to <code>PropertyUtils</code>
      has been removed.</li>
  <li>Fixed <code>PropertyUtils.copyProperties()</code> to skip cases where
      the origin bean has a getter method but the destination bean does not
      have a setter method.</li>
  </ul>

  <p>The following changes and bug fixes to the Struts Example Application
  (package <code>org.apache.struts.example</code> and the corresponding web
  components) have occurred:</p>
  <ul>
  <li>Used the <code>reset()</code> methods defined by the
      <code>ActionForm</code> interface to reset form bean properties to
      default values.  This is particularly important to make boolean
      properties (represented visually by checkboxes) work correctly.</li>
  <li>Eliminate the special-case handling of null String values in the
      form beans.  Such handling is not necessary because the custom tags
      correctly deal with null String values.</li>
  <li>Use the <code>PropertyUtils.copyProperties()</code> method to initially
      populate form beans from underlying data objects, and to update date
      objects when a transaction is successfully completed.  Note that using
      this approach dramatically lessens an action class's dependence on the
      specific properties of the form bean and corresponding data object
      in many use cases.</li>
  <li>Added an <code>autoConnect</code> boolean property to the Subscription
      data object, primarily to illustrate that representing a boolean
      property with a checkbox now works correctly if you set the property
      to <code>false</code> in the <code>reset()</code> method of your
      form beans.</li>
  </ul>

  </section>

  </body>

</document>

