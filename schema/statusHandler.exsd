<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.ui.workbench">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.ui.workbench" id="statusHandler" name="Status handler"/>
      </appInfo>
      <documentation>
         &lt;p&gt;
Status handlers are part of status handling facility with &lt;code&gt;StatusManager&lt;/code&gt; which controls handling.
&lt;code&gt;StatusManager&lt;/code&gt; object is a singleton, keeps information about &quot;status handling policy&quot;.
Each problem is handled by status manager which uses handlers due to the policy.
&lt;/p&gt;

&lt;p&gt;
So far there is one default policy and it can&apos;t be overriden.
&lt;/p&gt;

&lt;p&gt;
 Default policy (steps):
 &lt;ul&gt;
 &lt;li&gt;manager tries to handle the problem with default handler&lt;/li&gt;
 &lt;li&gt;manager tries to find a right handler for status plugin &lt;/li&gt;
 &lt;li&gt;manager delegates the problem to workbench handler&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/p&gt;
 
 &lt;p&gt;
 Default handler can be set for product using &quot;statusHandlerProductBinding&quot; element in 
 extension for &quot;statusHandler&quot; ext. point.
 &lt;/p&gt;
 
 &lt;p&gt;
 Each status handler defined as &quot;statusHandler&quot; extension can have package prefix assigned to it. 
 During step 2 status manager looks for the most specific handler for given status checking
 status pluginId against these prefixes. If handler is the default one it is not used in this step. 
 &lt;/p&gt;
 
 &lt;p&gt;
 Workbench handler is the &lt;code&gt;org.eclipse.ui.internal.WorkbenchErrorHandlerProxy&lt;/code&gt; object
 which passes handling to handler assigned to the workbench advisor. This handler doesn&apos;t have to
 be added as &quot;statusHandler&quot; extension.
 &lt;/p&gt;
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="statusHandler" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="statusHandlerProductBinding" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="statusHandler">
      <annotation>
         <documentation>
            This element is used to define a status handler.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="parameter" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  &lt;p&gt;
A unique identifier for this error handler. The id is used for setting default 
error handler in a product. 
If an error handler is to be the default one its id has to be set
in a product preference file in org.eclipse.ui/ERROR_HANDLER_ID property. 
The name of the preference file is set in product extension 
&quot;preferenceCustomization&quot; property.
&lt;/p&gt;
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  &lt;p&gt;
A fully qualified name of a class which extends &lt;code&gt;org.eclipse.ui.errors.AbstractStatusHandler&lt;/code&gt;.
&lt;/p&gt;
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.ui.errors.AbstractStatusHandler"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="parameter">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="name"/>
         </appInfo>
         <documentation>
            &lt;p&gt;
This element defines parameters for instances of specified status handler class.
Instances of specified status handler class should understand this parameter. 
&lt;/p&gt;
&lt;p&gt;
Handling policies can use handler parameters. For example default policy 
use handlers &quot;prefix&quot; parameter. The default policy looks for the most specific 
handler for given status checking status pluginId against these prefixes.
&lt;/p&gt;
         </documentation>
      </annotation>
      <complexType>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  The name of a parameter.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="value" type="string" use="required">
            <annotation>
               <documentation>
                  The value of a parameter.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="statusHandlerProductBinding">
      <annotation>
         <documentation>
            &lt;p&gt;
Specifies a binding between a product and a status handler. 
These bindings determine which handler is appropriate for the current product (as defined by &lt;code&gt;org.eclipse.core.runtime.Platform.getProduct()&lt;/code&gt;).
&lt;/p&gt;
         </documentation>
      </annotation>
      <complexType>
         <attribute name="productId" type="string" use="required">
            <annotation>
               <documentation>
                  The unique id of a product.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="handlerId" type="string" use="required">
            <annotation>
               <documentation>
                  The unique id of an status handler.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         3.3
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         &lt;p&gt;
The following is an example of the definition for handler with prefix parameter.
&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
&lt;extension
 point=&quot;org.eclipse.ui.workbench.statusHandler&quot;&gt;
 &lt;statusHandler
 class=&quot;org.eclipse.ui.errors.SampleStatusHandler&quot;
 id=&quot;sampleStatusHandler&quot;&gt;
  &lt;parameter
  name=&quot;prefix&quot;
  value=&quot;org.eclipse.ui.ide&quot;&gt;
  &lt;/parameter&gt;
 &lt;/statusHandler&gt;
&lt;/extension&gt;
&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
The following is an example of the definition for default (product) handler.
The handler defined in the example will be default for product with id &quot;productId&quot;.
&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
&lt;extension
 point=&quot;org.eclipse.ui.workbench.statusHandler&quot;&gt;
 &lt;statusHandler
 class=&quot;org.eclipse.ui.errors.SampleStatusHandler&quot;
 id=&quot;sampleStatusHandler&quot;&gt;
 &lt;/statusHandler&gt;
 &lt;statusHandlerProductBinding
 handlerId=&quot;sampleStatusHandler&quot;
 productId=&quot;productId&quot;&gt;
 &lt;/statusHandlerProductBinding&gt;
&lt;/extension&gt;
&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
Of course we can define only the binding (for instance in a product plugin).
The handler can be defined in other plugin.
&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
&lt;extension
 point=&quot;org.eclipse.ui.workbench.statusHandler&quot;&gt;
 &lt;statusHandlerProductBinding
 handlerId=&quot;sampleStatusHandler&quot;
 productId=&quot;productId&quot;&gt;
 &lt;/statusHandlerProductBinding&gt;
&lt;/extension&gt;
&lt;/pre&gt;
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         &lt;p&gt;
All status handlers are &lt;code&gt;AbstractStatusHandler&lt;/code&gt; subclasses.
Each handler has to have &lt;code&gt;handle(StatusHandlingState status)&lt;/code&gt; implemented. 
This method handles the status due to handling hint The hint indicates
how status handler should handle a status but this is only a suggestion.
&lt;/p&gt;

&lt;p&gt;
 Handling modes
 &lt;ul&gt;
    &lt;li&gt;IGNORE - status should be ignored&lt;/li&gt;
    &lt;li&gt;LOG - the status should be logged&lt;/li&gt;
    &lt;li&gt;SHOW - the status should be shown to an user&lt;/li&gt;
    &lt;li&gt;SHOWANDLOG - the status should be logged and shown to an user&lt;/li&gt;
 &lt;/ul&gt;
&lt;/p&gt;
  
&lt;p&gt;
Handlers shoudn&apos;t be used directly but through the &lt;code&gt;StatusManager&lt;/code&gt; singleton
which keeps the status handling policy and chooses handlers due to it.
&lt;/p&gt;

&lt;p&gt;
One point of entry for all problems to report is &lt;code&gt;StatusManager.getManager().handle(IStatus)&lt;/code&gt;
method or &lt;code&gt;StatusManager.getManager().handle(IStatus, HandlingMode) if we want to suggest handling mode for the status.
&lt;/p&gt;

&lt;p&gt;
In the default policy new error handlers are put into status handling flow by adding
new &quot;statusHandler&quot; extension.
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         &lt;p&gt;
The platform supplies basic implementations of 
&lt;code&gt;org.eclipse.ui.errors.AbstractStatusHandler&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;org.eclipse.ui.internal.WorkbenchErrorHandlerProxy&lt;/code&gt; handler is 
a proxy which passes all handling calls to handler assigned to current application workbench advisor.
&lt;/p&gt;

&lt;p&gt;
There are two other implementation of handlers  &lt;code&gt;org.eclipse.ui.application.WorkbenchErrorHandler&lt;/code&gt; which is assigned to &lt;code&gt;WorkbenchAdvisor&lt;/code&gt; and &lt;code&gt;org.eclipse.ui.internal.ide.IDEWorkbenchErrorHandler&lt;/code&gt; assigned to
&lt;code&gt;IDEWorkbenchAdvisor&lt;/code&gt;. Due to advisor which is actually used 
&lt;code&gt;org.eclipse.ui.internal.WorkbenchErrorHandlerProxy&lt;/code&gt; handler 
delegates handling to one of them. 
&lt;/p&gt;

&lt;p&gt;
In the default policy &lt;code&gt;org.eclipse.ui.internal.WorkbenchErrorHandlerProxy&lt;/code&gt;
handler doesn&apos;t have to be defined as extension point. It is used by default.
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2000, 2006 IBM Corporation and others.&lt;br&gt;
All rights reserved. This program and the accompanying materials are made
available under the terms of the Eclipse Public License v1.0 which accompanies
this distribution, and is available at &lt;a 
href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;
      </documentation>
   </annotation>

</schema>
