<?xml version="1.0"?>
<document url="./status.xml">

<!--
// ======================================================================== 78
-->

<properties>
    <title>Development Roadmap - The Apache Struts Web Application Framework</title>
    <author>Craig R. McClanahan</author>
    <author>Ted Husted</author>
    <author>Steve Byrne</author>
</properties>

<body>
<chapter href="status" name="Development Roadmap">

<section href="status" name="Development Roadmap">

    <p>
    <font size="-2">$Id: status.xml,v 1.33 2003/08/11 11:34:39 husted Exp $</font>
    </p>

    <p>
    This document outlines some of changes we expect to
    see in future releases of Struts.
    </p>

    <p>
    This document is provided for discussion purposes only.
    All releases and changes to the codebase are subject to
    <a href="http://jakarta.apache.org/site/decisions.html">a vote</a> of the
    <a href="volunteers.html#committers">Struts Committers</a>.
    </p>

    </section>

    <section href="bugzilla" name="Bugzilla Queries">

        <p>
            The Struts development teams uses the <a href="http://jakarta.apache.org/site/bugs.html">Apache Bug Database</a> (Bugzilla)
            to manage problem reports and enhancement requests.
            For your convenience, here are some common Bugzilla queries:
        </p>

        <ul>
            <li><a href="http://issues.apache.org/bugzilla/buglist.cgi?bug_status=UNCONFIRMED&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;product=Struts&amp;order=%27Importance%27">Open reports</a></li>
            <li><a href="http://issues.apache.org/bugzilla/buglist.cgi?bug_status=UNCONFIRMED&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;bug_severity=Blocker&amp;bug_severity=Critical&amp;bug_severity=Major&amp;bug_severity=Normal&amp;bug_severity=Minor&amp;email1=&amp;emailtype1=substring&amp;emailassigned_to1=1&amp;email2=&amp;emailtype2=substring&amp;emailreporter2=1&amp;bugidtype=include&amp;bug_id=&amp;changedin=&amp;votes=&amp;chfieldfrom=&amp;chfieldto=Now&amp;chfieldvalue=&amp;product=Struts&amp;short_desc=&amp;short_desc_type=allwordssubstr&amp;long_desc=&amp;long_desc_type=allwordssubstr&amp;bug_file_loc=&amp;bug_file_loc_type=allwordssubstr&amp;keywords=&amp;keywords_type=anywords&amp;field0-0-0=noop&amp;type0-0-0=noop&amp;value0-0-0=&amp;cmdtype=doit&amp;order=%27Importance%27">Open problem reports</a></li>
            <li><a href="http://issues.apache.org/bugzilla/buglist.cgi?bug_status=UNCONFIRMED&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;bug_severity=Enhancement&amp;email1=&amp;emailtype1=substring&amp;emailassigned_to1=1&amp;email2=&amp;emailtype2=substring&amp;emailreporter2=1&amp;bugidtype=include&amp;bug_id=&amp;changedin=&amp;votes=&amp;chfieldfrom=&amp;chfieldto=Now&amp;chfieldvalue=&amp;product=Struts&amp;short_desc=&amp;short_desc_type=allwordssubstr&amp;long_desc=&amp;long_desc_type=allwordssubstr&amp;bug_file_loc=&amp;bug_file_loc_type=allwordssubstr&amp;keywords=&amp;keywords_type=anywords&amp;field0-0-0=noop&amp;type0-0-0=noop&amp;value0-0-0=&amp;cmdtype=doit&amp;order=%27Importance%27">Open enhancement requests</a></li>
            <li><a href="http://issues.apache.org/bugzilla/buglist.cgi?bug_status=RESOLVED&amp;resolution=LATER&amp;email1=&amp;emailtype1=substring&amp;emailassigned_to1=1&amp;email2=&amp;emailtype2=substring&amp;emailreporter2=1&amp;bugidtype=include&amp;bug_id=&amp;changedin=&amp;votes=&amp;chfieldfrom=&amp;chfieldto=Now&amp;chfieldvalue=&amp;product=Struts&amp;short_desc=&amp;short_desc_type=allwordssubstr&amp;long_desc=&amp;long_desc_type=allwordssubstr&amp;bug_file_loc=&amp;bug_file_loc_type=allwordssubstr&amp;keywords=&amp;keywords_type=anywords&amp;field0-0-0=noop&amp;type0-0-0=noop&amp;value0-0-0=&amp;cmdtype=doit&amp;order=%27Importance%27">Reports to be handled "LATER"</a></li>
        </ul>


    </section>

<section href="struts_1_x" name="Struts 1.x">

    <p>
        The platform requirements throughout the Struts 1.x series will remain the same (Servlet 2.2 / JSP 1.1).
        The releases will focus on refactoring of existing functionality, with a
        continued emphasis on backward compatibility, as were seen in Struts 1.1.
        However, we expect there to releases to be incremental throughout the rest of the
        1.x series, so that improvements and fixes become available to production teams every few weeks.
    </p>

    <p>
        Enhancements are logged in Bugzilla as
        <a href="http://issues.apache.org/bugzilla/buglist.cgi?bug_status=RESOLVED&amp;resolution=LATER&amp;resolution=REMIND&amp;product=Struts&amp;order=%27Importance%27">
        LATER or REMIND tickets as they are suggested</a>.
        Future release milestones are provided for enhancements which are
        being actively planned or developed
        but may not be ready for the very next release.
        When developers are actually working on an enhancement,
        they should re-tag it for a specific release milestone, such as "1.2.1" or "1.2.2".
    </p>

    <p>
        <b>The listing of an enhancement in Bugzilla does not imply that is being "planned"</b>,
        merely that someone has suggested it, and the idea hasn't been ruled out.
        If a listing has not been tagged for a specific milestone by a working developer,
        then <b>it may never be realized</b>.
    </p>

    <p>
        If an enhancement has not been tagged for a specific target,
        feel free to start working on it yourself.
        Many of our best features have been contributed by developers, just like you.
        If you would like to announce your active interest in an enhancement,
        please post a note on the ticket, and tag it to an appropriate release milestone.
    </p>

    <p>
        Any feature that can be implemented under Servlet 2.2/JSP 1.1 may be considered for the Struts 1.x series.
        This may include, but is not limited to, better support for alternate view technologies (like XLST),
        integrated unit testing, integrated support for HTTP/HTTPS mode switching, better workflow handling,
        support for alternative action types (e.g. BSF actions), and so forth.
    </p>

    <p>
        Features most likely to be considered are those that have already been implemented as
        third-party extensions and are in active use by the Struts Community, such as
        those distributed through the
        <a href="http://sourceforge.net/projects/struts">Struts SourceForge</a> site.
    </p>

    <p>
        Throughout the 1.x series, there will be a continued emphasis on expanding unit test coverage for the framework.
        Bug reports should include a failing test case when possible.
        Proposals for new features should include a working test suite.
        (Creating features through Test Driven Development is strongly encouraged.)
    </p>

  <!--
    <p>
    Features under discussion include:
    </p>

    <ul>

        <li>
        Proposing ActionError/ActionErrors as generic Commons "message" components
        </li>

        <li>
        "Nested" or "hierarchical" and locale-sensitive modules
        </li>

        <li>
        Extending one configuration element from another, as is done with Tiles
        Definitions
        </li>

        <li>
        Enhanced interoperability with JSTL and JSF
        </li>

        <li>
        Making Tiles JSTL-aware and available to other presentation systems (XLST,
        Velocity)
        </li>

        <li>
        Better support for XLST technology (e.g. stxx)
        </li>

        <li>
        Better support for unit testing within the framework (e.g.
        <a href="http://sourceforge.net/projects/strutstestcase/">Struts TestCase</a>)
        or perhaps even a distinct unit testing framework.
        </li>

        <li>
        Encouraging the use of <a href="http://sourceforge.net/projects/xdoclet/">XDoclet</a> and other code generation technologies to streamline development.
        </li>

        <li>Moving to <a href="http://jakarta.apache.org/turbine/maven/index.html">
        Maven</a> for project management
        </li>

        <li>Regardless of whether a move to Maven happens or not, we need to
        refactor the source repositories and build scripts for less complexity
        and easier maintenance.</li>

    </ul>
    <p>
    More detail on work-in-progress may be found in
    <a href="http://issues.apache.org/bugzilla/buglist.cgi?bug_status=RESOLVED&amp;resolution=LATER&amp;email1=&amp;emailtype1=substring&amp;emailassigned_to1=1&amp;email2=&amp;emailtype2=substring&amp;emailreporter2=1&amp;bugidtype=include&amp;bug_id=&amp;changedin=&amp;votes=&amp;chfieldfrom=&amp;chfieldto=Now&amp;chfieldvalue=&amp;product=Struts&amp;version=Unknown&amp;version=1.0+Beta+2&amp;version=1.0+Beta+1&amp;version=0.5+Final&amp;version=1.0.2+Final&amp;version=1.0.1+Final&amp;version=1.0+Final&amp;version=1.0+Beta+3&amp;version=1.1+Beta+2&amp;version=1.1+Beta+1&amp;version=Nightly+Build&amp;short_desc=&amp;short_desc_type=allwordssubstr&amp;long_desc=&amp;long_desc_type=allwordssubstr&amp;bug_file_loc=&amp;bug_file_loc_type=allwordssubstr&amp;keywords=&amp;keywords_type=anywords&amp;field0-0-0=noop&amp;type0-0-0=noop&amp;value0-0-0=&amp;cmdtype=doit&amp;order=Bug+Number">Bugzilla</a>.
    If any of these features are important to you, please don't hesitate to
    <a href="./faqs/helping.html">help with the development effort</a>.
    </p>
-->

</section>

<section href="struts_2_0" name="Struts 2.0.x">

    <p>
    Struts 2.x (aka Struts "Next Generation") will include broader enhancements.
    We anticipate that the implementation will utilize the Servlet 2.4 / JSP 2.0
    platform. Refactorings may include the use of Filters and so forth.
    </p>

    <p>
    We anticipate that Struts 2.x will rely on JSTL and the JavaServer Faces
    API as supporting technologies.
    However, the focus of the Struts framework will remain on the Controller aspect of a Model 2/MVC architecture.
    The core framework will continue to be both Model and View independent.
    </p>

    <p>
    Target features include:
    </p>

    <ul>

        <li>
        Comprehensive unit test coverage for all core features
        </li>

        <li>
        Refactoring for Filters and other new technologies
        </li>

        <li>
        Direct support for JSTL/JSF taglibs and the JSF API
        </li>

        <li>
        Enchanced support for other presentation layers, such as XLST
        </li>

    </ul>

    <p>
    Development of Struts 2.x will include taking a completely fresh look at
    the architecture.
    The goal for 2.x will be to incorporate everything we've learned in the past
    years of Struts usage, and create something even better.
    </p>

    <p>
        Of course, it is anticipated that the Struts team will continue to support
        the 1.x codebase for a long time with bugfixes and incremental enhancements.
        (Mainly because many of us will still be using it on our production sites!)
        Accordingly, it is anticipated that the development of the 2.x and 1.x
        series will occur in tandem.
        At some point, 2.x milestones may appear alongside new 1.x releases.
    </p>

</section>

<section href="proposals" name="Relevant Proposals">

    <ul>

        <li>
        <a href="proposals/release-plan-1.1.html">Release Plan 1.1</a>
        </li>

        <li>
        <a href="proposals/struts-faces.html">struts-faces taglib</a>
        </li>

        <li>
        <a href="proposals/workflow.html">Workflow Proposal</a>
        </li>

    </ul>

</section>

    <section href="releases" name="Release Guidelines">

        <p>
            A <a href="http://jakarta.apache.org/commons/versioning.html">point release</a>
            should be made before and after any product change that is not a "fully-compatible change"
            (see link). This includes moving a dependency from an internal package to an external product,
            including products distributed through the Jakarta Commons.
            We should place any fully-compatible changes in the hands of the community
            before starting on a change that is only "interface" or "external-interface" compatible.
        </p>
        <p>
            A fully-compatible point release does not always need a "preview" beta or milestone release.
            If appropriate, a Release Candidate can be cut, uploaded to the Release Manager's home directory
            on cvs.apache.org (~/public_html), and voted to be released to the general public from there.
        </p>

        <p>
            Any release should follow the same general process used by the Jakarta Commons
            and the Apache HTTP Server project.
        </p>

        <ul>
            <li>
                 <a href="http://jakarta.apache.org/commons/releases/">Releasing Common Components</a>
            </li>
            <li>
                <a href="http://nagoya.apache.org/wiki/apachewiki.cgi?SigningReleases">Signing a release version</a>
                <ul>
                <li>
                    <small>The MD5 tool is installed on daedalus, and you can create the digests for Struts releases there.</small>
                </li>
                </ul>
            </li>
            <li>
                <a href="http://httpd.apache.org/dev/release.html">Apache HTTPD Server Release Guidelines</a>
            </li>
        </ul>

        <p>
            Additional remarks:
        </p>

        <ul>
            <li>
                Remember to update the <a href="news/index.html">Status section of the News page</a> when cutting any milestone.
                For a final release, also update the /doc/project.xml with the current release number.
            </li>
            <li>
                The release process can seem daunting when you review it for the first time.
                But, essentially, it breaks down into three phases of just a few steps each:
                <ul>
                    <li>Building - Bugzilla, dependencies, release notes, JAR manifest, licenses, copyrights, and build (using the release target).</li>
                    <li>Testing - JUnit, Cactus, web apps (for all "supported" containers). </li>
                    <li>Distributing - Checksum, sign, mirror, release, update Struts site, update Jakarta site, announce.</li>
                </ul>
            </li>
            <li>
                Our dependencies on external JARs (including Commons JARs) should
                be in line with our own release status.
                Our nightly build can be dependant on another nightly build.
                Our beta can be dependant on another beta,
                but should avoid a dependance on a nightly build.
                Our release candidate can have a dependance on another RC,
                but should not have a dependance on a beta (and certainly <b>not</b> a nightly build).
                Our final release can only have dependencies on other final releases.
            </li>
            <li>
                Use your own discretion as to detail needed by the Release Notes.
                A high-level description of the changes is more important than providing uninterpreted detail.
                At a minimum, new features and deprecations should be summarized,
                since these are commonly asked questions.
                Ideally, the release notes should be maintained continuously for the nightly build
                so that we do not need to quickly assembled them on the eve of a Release.
            </li>
            <li>
                Test building the distribution under prior version of J2SE, if possible,
                to ensure that we are still backwardly-compatible.
                But, our Release distribution should be built using the <b>latest release of J2SE</b>,
                to take advantage of all available compiler enhancements.
            </li>
            <li>
                Before building the final release, run the JUnit and Cactus tests using the same
                configuration used that will be used to build the Release distribution.
            </li>
            <li>
                There is a "release" target in the buildfile that will zip and tar the releases.
                Before uploading the release, extract the sample web applications and deploy the WARs under
                each of the "supported" containers.
                Play test each application under each container to be sure they operate nominally.
            </li>
            <li>
                By the way, the nightly builds are being created on a machine of Craig McClanahan's.
                If there are problems with a nightly build that seem infrastructure related,
                Craig is the one to contact.
            </li>
        </ul>

    </section>


<section href="guidelines" name="Coding Conventions and Guidelines">

    <p>
    Source code and documentation contributed to the Struts repositories
    should observe the:
    </p>

    <ul>

        <li>
          <a href="http://jakarta.apache.org/site/source.html">Jakarta project
          guidelines</a>,
        </li>

        <li>
          <a href="http://www.ambysoft.com/elementsJavaStyle.html">Elements of
          Java Style</a>, and
        </li>

        <li>
          <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/">How to
          write Doc Comments</a>
        </li>

    </ul>

    <p>
    as core references regarding the formatting of code and documentation.
    </p>

    <p>
    <strong>Clarifications</strong>
    </p>

    <ul>

        <li>
        First, "Observe the style of the original".
        Resist the temptation to make stylistic changes for their own sake.
        But, if you must reformat code, commit style changes separately from
        code changes.
        Either change the style, commit, and then change the code, or vice-
        versa.
        </li>

        <li>
        Set editors to replace tabs with spaces, and do not trim trailing
        spaces.
        </li>

        <li>
        Specify imported classes (do not use <code>.*</code>).
        </li>

        <li>
        Write all if/else statements as full blocks with each clause within braces,
        unless the entire statement fits on the same line.
        </li>

        <li>
        Use <code>:FIXME:</code> and <code>:TODO:</code> tokens to mark follow up
        notes in code.
        You may also include your Apache username and the date.
        <code>:FIXME: we need to do this sometime (husted 2002-11-14)</code>
        </li>

        <li>
        Use <code>@since</code> to document changes between Struts versions,
        as in <code>@since Struts 1.1</code>.
        </li>

        <li>
        Wrap lines of code and JavaDoc at column 78.
        You can include a "comment rule" in the source to help with this.<br />
        <small>
        // ------------------------------------------------------------------------ 78
        </small>
        </li>

        <li>
        Please do your best to provide high-quality JavaDocs for all source code
        elements.
        Package overviews (aka "Developer Guides") are also encouraged.
        </li>

        <li>
        When working on a bugfix, please first write a
        <a href="http://www.junit.org">JUnit</a> test that proves the bug exists,
        and then use the test to prove  the bug is fixed. =:0)
        </li>

        <li>
        When working on an enhancement, please feel free to use test-driven design
        and write the test first &lt;head-slap/>.
        For more about TDD, see the
        <a href="http://sourceforge.net/projects/mockobjects">MockObjects project
        </a>.
        </li>

        <li>
        As files are updated from year to year, the copyright on each file should
        be extended to include the current year.
        You do not need to change the copyright year unless you change the file.
        Every source file should include the current Apache License and copyright.
        </li>

        <li>
        Provide high-level API compatibility for any changes made within the same
        major release series (#.x).
        Changes which adversely affect compatibility should be slotted for the
        next major release series (++#.x).
        </li>

        <li>
        Our favorite books about programming are
        <a href="http://www.amazon.com/exec/obidos/ISBN=0201633612/hitchhikeguidetoA/">
        Design Patterns</a> and
        <a href="http://www.amazon.com/exec/obidos/ISBN=0201485672/hitchhikeguidetoA/">
        Refactoring</a>.
        </li>

        <li>
        Our favorite book about open source development is the
        <a href="http://www.amazon.com/exec/obidos/ISBN=1565927249/hitchhikeguidetoA/">
        The Cathedral and the Bazaar</a>.
        </li>

        <li>
        Our favorite science fiction author is
        <a href="http://www.nitrosyncretic.com/rah/">Robert Heinlein</a>.
        <a href="http://www.tuxedo.org/~esr/jargon/html/entry/TANSTAAFL.html">
        <font size="-1">TANSTAAFL</font></a>.<br />
        (Except on Friday, when we favor
        <a href="http://carbon.cudenver.edu/~mstilman/zaphod/">Douglas
        Adams</a>.
        <a href="http://news.bbc.co.uk/1/hi/uk/1326657.stm">
        <font size="-1">SLATFATF</font></a>.)
        </li>

    </ul>

</section>

<section>
    <p align="right">
    Next: <a href="news/index.html">News and Status</a>
    </p>
</section>

<section>
    <p><font size="-2">Website updated from CVS: 2003 AUG 11 by husted.</font></p>
    <p><font size="-2">Javadocs updated from CVS: 2003 JUN 29 by mcooper.</font></p>
</section>

</chapter></body></document>
