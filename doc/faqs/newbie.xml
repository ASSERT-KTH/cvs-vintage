<?xml version="1.0"?>
<document url="./newbie.xml">
<properties>
<author>Ted Husted</author>
<author>James Holmes</author>
<author>Craig R. McClanahan</author>
<title>Newbie FAQ - Apache Struts</title>
</properties>
<body>
<chapter href="faq" name="Newbie FAQ">

<section href="contents" name="Index">
<p>
Here are answers to the most common questions people ask when using Struts on their first project. <b>For an in-depth, searchable FAQ, visit our friends at <a href="http://www.jguru.com/faq/home.jsp?topic=Struts">JGuru</a>.</b>
</p>

<p><font color="red"><b>UNDER CONSTRUCTION</b></font> (contributions welcome)</p>
  <ul>

    <li><a href="#reload">Why was reload removed from Struts 1.1?</a></li>

    <li><a href="#modules">What is a modular application? What does module-relative mean?</a></li>

    <li><a href="#naming">Why are some of the class and element names counter-intuitive?</a></li>

    <li>Why is ActionForm a base class rather than an interface?</li>

    <li>Do I have to have a separate ActionForm bean for every HTML form?</li>

    <li>do ActionForms have to be true JavaBeans?</li>

    <li>Can I use other beans or hashmaps with ActionForms?</li>

    <li>How can I prepopulate a form?</li>

    <li><a href="#multiple">Can I use multiple HTML form elements with the same name?</a></li>

    <li><a href="#actionforms">Why are my checkboxes not being set from ON to OFF?</a></li>

    <li><a href="#reset"></a>Do I need to implement reset and set all my form properties to their initial values? </li>

    <li>How can I capture binary or formatted values, like dates or telephone numbers?</li>

    <li>Why do my option lists disappear when validation fails?</li>

    <li><a href="#scriptlets">Can't I just create some of my JavaBeans in the JSP using a scriptlet?</a></li>

    <li><a href="#tags">Why do the Struts tags provide for so little formatting?</a></li>

    <li><a href="#link">Why does the &lt;html:link> tag URL-encode javascript and mailto links?"</a></li>

    <li>Why can't I disable URL-encoding in the Struts taglibs?</li>

    <li>When is the best time to validate input?</li>

    <li>How can I avoid validating a form before data is entered?</li>

    <li>How can I create a "wizard" workflow?</li>

    <li>How can I "chain" Actions?</li>

    <li>Can I have an Action without a form?</li>

    <li>How do I access my database?</li>

    <li>How can I authenticate my users?</li>

    <li>How can I scroll through list of pages like the search results in google?</li>

    <li>Can I have multiple submit buttons on the same form?</li>

    <li>Why can't my Javascript submit a form?</li>

    <li><a href="minimization">Why does the option tag render selected="selected" instead of just "selected"?</a></li>

    <li>Can I create dynamic ActionForwards?</li>

    <li>How can I use my own (ActionForm, ActionForward, ActionMapping, ActionServlet) class?</li>

    <li>Do I have to use JSPs with my application?</li>

  </ul>
</section>

<section href="reload" name="Why was reload removed from Struts 1.1?">

<p>
The problem with ReloadAction was that Struts was trying to act like a 
container, but it couldn't do a proper job of it. For example, you 
can't reload classes that have been modified, or (portably) add new
classes to a running web application (even if the container supported it).
</p>

<p>
Meanwhile, as 1.1 was being developed, work progressed on things
like Tomcat's reload command via the Manager webapp. This feature allows 
you to quickly reload-on-demand, complete with saving and restoring your 
session). It started to make even less sense for Struts to half-implement 
a feature that containers are implementing fully.
</p>

<p>
A more minor point is that freezing the configuration information at application 
startup time allows Struts to safely access the mapping information without 
bothering with synchronization. The "startup-only" strategy creates a modest 
but real improvement in performance for all users.
</p>    
        
<p>So, ReloadAction is not supported in 1.1 for two reasons:</p>
            
<ul>
<li>
    It never did let you reload everything that you would really
    want to -- particularly changed classes -- so many people
    ended up having to reload the webapp anyway.
</li>
<li>
    Containers are starting to offer reload-on-demand features 
    which does the same thing as the Struts ReloadAction, only better.
</li>
<li>
    Not supporting ReloadAction lets Struts avoid doing synchronization
    locks around all the lookups (like figuring out which action to use,
    or the destination of an ActionForward) so applications can run a 
    little faster.
</li>
</ul>

<p>
Of course, if someone came up with an implementation that solved these 
problems without creating any others, we would not be opposed to including 
a new ReloadAction.
</p>

</section>

<section href="modules" name="What is a modular application? What does module-relative mean?">

<p>
Since Struts 1.1, the framework supports multiple application modules. All applications have at
least one root, or default, module. Like the root directory in a file system, the default application
has no name. (Or is named with an empty string, depending your viewpoint.) Developing an application
with only a default module is no different from how applications were developed under Struts 1.0.
Since Struts 1.1, you can add additional modules to your application, each of which can have their
own configuration files, messages resources, and so forth. Each module is developed in the same way as
the default module. Applications that were developed as a single module can added to a multiple
module application, and modules can promoted to a standalone application without change. For more
about configuring your application to support multiple modules, see
<a href="userGuide/building_controller.html#module_config">Building Controller Components</a> in the
User Guide.
</p>

<p>
But to answer the question =:0), a modular application is a Struts application that uses more than
one module. Module-relative means that the URI starts at the application-module level, rather than at
the application-context level, or the absolute-URL level.
</p>
<ul>
<li>Absolute URL: http://localhost/myApplication/myModule/myAction.do</li>
<li>context-relative: /myModule/myAction.do</li>
<li>module-relative: /myAction.do</li>
</ul>

</section>

<section href="naming" name="Why are some of the class and element names counter-intuitive?">
<p>
The framework grew in the telling and as it evolved some of the names
drifted.
</p>
<p>The good thing about a nightly build, is that everything becomes
available to the community as soon as it is written. The bad thing about
a nightly build is that things like classnames get locked down early and
then become difficult to change.
</p>
</section>


<section href="actionforms" name="Wither ActionForms?">
<p>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg19281.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg19281.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg19338.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg19338.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg20833.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg20833.html</a><br/>
</p>
</section>


<section href="JavaBeans" name="Do ActionForms have to be true JavaBeans?">
<p>
The utilities that Struts uses (Commons-BeanUtils since 1.1) require that ActionForm properties follow
the JavaBean patterns for mutators and accessors (get*,set*,is*). Since Struts uses the Introspection API
with the ActionForms, some containers may require that all the JavaBean patterns be followed, including
declaring "<code>implements serializable</code>" for each subclass. The safest thing is to review the
<a href="userGuide/preface.html#javabeans">JavaBean specification</a> and follow all the prescribed patterns.</p>
</section>


<section href="multiple" name="Can I use multiple HTML form elements with the same name?">
<p>
Yes. Define the element as an array and Struts will autopopulate it like any other.
</p>
<pre>
<code>
private String[] id= {};
public String[] getId() { return this.id; }
public void setItem(String id[]) {this.id = id;}
</code>
</pre>
<p>
And so forth
</p>
</section>


<section href="focus" name="Why doesn't the focus feature on the &lt;html:form> tag work in every circumstance?">
<p>
Unfortunately, there is some disagreement between the various browsers, and different versions of the same browser, as to how the focus can be set.
The &lt;html:form> tag provides a quick and easy Javascript that will set the focus on a form
for most versions of most browsers.
If this feature doesn't work for you, then you should set the focus using your own Javascript.
The focus feature is a convenient "value-add" -- not a core requirement of the tag.
If you do come up with a Javascript that provides the final solution to this project,
please post your patch to this <a href="http://issues.apache.org/bugzilla/show_bug.cgi?id=13454">Bugzilla ticket</a>.
</p>
</section>


<section href="checkbox" name="Why are my checkboxes not being set from ON to OFF?">
<p>
A problem with a checkbox is that the browser will only include it in the request
when it is checked. If it is not checked, the HTML specification suggests that it
not be sent (i.e. omitted from the request). If the value of the checkbox is being
persisted, either in a session bean or in the model, a checked box can never
unchecked by a HTML form -- because the form can never send a signal to uncheck
the box. The application must somehow ascertain that since the element was not
sent that the corresponding value is unchecked.
</p>
<p>
The recommended approach for Struts applications is to use the reset method in the
ActionForm to set all properties represented by checkboxes to null or false. The
checked boxes submitted by the form will then set those properties to true. The
omitted properties will remain false. Another solution is to use radio buttons
instead, which always submit a value.
</p>
<p>
It is important to note that the HTML specification recommends this same
behavior whenever a control is not "successful". Any blank element in a HTML
form is not guaranteed to submitted. It is therefor very important to set the
default values for an ActionForm correctly, and to implement the reset method
when the ActionForm might kept in session scope.
</p>
</section>


<section href="reset" name="Do I need to implement reset and set all my form properties to their initial values?">
<p>
No.
You need to set checkbox properties to false if the ActionForm is being retained in session scope.
This is because an unchecked box does not submit an attribute.
Only checked boxes submit attributes.
If the form is in session scope, and the checkbox was checked, there is no way to turn it back off without the reset method.
Resetting the properties for other controls, or for a request scope form, is pointless.
If the form is in request scope, everything already just started at the initial value.
</p>
</section>


<section href="scriptlets" name="Can't I just create some of my JavaBeans in the JSP using a scriptlet?">
<p>
Struts is designed to encourage a
<a href="http://www.javaworld.com/javaworld/jw-12-1999/f_jw-12-ssj-jspmvc.html">
Model 2/MVC architecture</a>. But there is nothing that prevents you from using Model 1
techniques in your JavaServer Pages, so the answer  to the question is "Yes, you can".
</p>
<p>
Though, using Model 1 techniques in a Struts application does go against the grain.
The approach recommended by most Struts developers is to create and populate whatever
objects the view may need in the Action, and then forward these through the request.
Some objects may also be created and stored in the session or application context,
depending on how they are used.
</p>
<p>
Likewise, there is nothing to prevent you from using scriptlets along with JSP
tags in your pages. Though, many Struts developers report writing very complex
scriplet-free applications and recommend the JSP tag approach to others.
</p>
<p>
For help with Model 1 techniques and scriptlets, you might consider joining the
<a href="http://archives.java.sun.com/jsp-interest.html">Javasoft JSP-interest
mailing list</a>, where there are more people still using these approaches.
</p>
</section>


<section href="tags" name="Why do the Struts tags provide for so little formatting?">
<p>
<i>The Struts tags seem to provide only the most rudimentary functionality.
Why is there not better support for date formatting and advanced string handling?</i>
</p>
<p>
Three reasons:
</p>
<p>
First, work started on the JSTL and we didn't want to duplicate the effort.
</p>
<p>
Second, work started on Java Server Faces, and we didn't want to duplicate that effort either.
</p>
<p>
Third, in a Model 2 application, most of the formatting can be handled in the ActionForms (or in the business tier),
so all the tag has to do is spit out a string.
This leads to better reuse since the same "how to format" code does not need to be repeated in every instance.
You can "say it once" in a JavaBean and be done with it.
</p>
</section>

<section href="layout" name="Why don't the Struts taglibs offer more layout options?">
<p>
Since the Struts tags are open source, you can extend them to provide whatever additional formatting you may need.
If you are interested in a prewritten taglib that offers more layout options, see the
<a href="http://struts.application-servers.com">struts-layout taglib</a>.
</p>
<p>
In the same arena, there is a well regarded contributor taglib that can help you create
<a href="http://sourceforge.net/projects/struts-menu/">Menus for your Struts applications</a>.
</p>
</section>


<section href="link" name="Why does the &lt;html:link> tag URL-encode javascript and mailto links?">
<p>
The &lt;html:link> tag is not intended for use with client-side references like those used to launch Javascripts or email clients.
The purpose of link tag is to interject the context (or module) path into the URI so that your server-side links are not dependant on your context (or module) name.
It also encodes the link, as needed, to maintain the client's session on the server.
Neither feature applies to client-side links, so there is no reason to use the &lt;html:link> tag.
Simply markup the client-side links using the standard <a/> tag.
</p>
</section>

<section name="How do I access my database?">
<p>
The best thing is use the Action as a thin adaptor between the web/presentation-tier and your business classes
(including those that access a database).
</p>
<p>
So you first design a business API that uses plain Java classes. The best thing is to use objects that take
ordinary Java types and return a JavaBean or collection of JavaBeans. The Action then calls these objects and
passes the result back to the web/presentation tier.
</p>
<p>
A common approach is to create an Action class for each of the business API methods/classes that you need to call.
Ideally, all the database access code should be encapsulated in the business API classes, so Struts doesn't know
what persistent layer you are using (or even if there is a persistence layer). It just passes a key or search
String and gets back a bean or collection of beans. This lets you use the same business API classes in other
environments, and also to run unit tests against your business API outside of Struts or a HTTP environment.
</p>
<p>
To get started, it's simplest to setup a 1:1 correspondence between the Actions and the entry-points to
your business API. As you gain experience, you will find ways to combine your Actions, say by using the
DispatchAction. It's even possible to use a single "framework" Action to call all of your business
classes, as is done with Scaffold ProcessAction in the contrib folder. Using fewer Actions does require
a deeper understanding of how Struts and MVC frameworks operate. Don't hesitate to err on the side
of creating more Actions at first. The Struts configuration makes it easy to refactor your Actions
later, since you can change the Action type without changing anything else in the application.
</p>
<p>
For more, see
</p>
<p>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg24621.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg24621.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg24709.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg24709.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg24626.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg24626.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg24331.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg24331.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg24102.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg24102.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg23501.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg23501.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg23455.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg23455.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg23375.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg23375.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg23321.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg23321.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg23098.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg23098.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg22713.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg22713.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg21974.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg21974.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg21026.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg21026.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg19338.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg19338.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg18323.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg18323.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg14975.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg14975.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg14914.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg14914.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg14435.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg14435.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg01562.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg01562.html</a>
</p>
<p>
Transformation/Data Transfer<br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg24480.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg24480.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg23623.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg23623.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg10195.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg10195.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg10205.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg10205.html</a>
</p>
</section>


<section name="How can I authenticate my users?">
<p>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg24504.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg24504.html</a><br/>
<a href="http://www.mail-archive.com/struts-user@jakarta.apache.org/msg22949.html">http://www.mail-archive.com/struts-user@jakarta.apache.org/msg22949.html</a>
</p>
</section>


<section href="pager" name="How can I scroll through list of pages like the search results in google?">
<p>Many Struts developers use the Pager from the JSPTags site.</p>
<p><a href="http://jsptags.com/tags/navigation/pager/">http://jsptags.com/tags/navigation/pager/</a></p>
</section>


<section href="minimization" name="Why does the option tag render selected=selected instead of just selected?">
<p>
Attribute minimization (that is, specifying an attribute with no value) is
a place where HTML violates standard XML syntax rules. This matters a lot
for people writing to browsers that support XHTML, where doing so makes
the page invalid.It's much better for Struts to use the expanded syntax,
which works the same on existing browsers interpreting HTML, and newer
browsers that expect XHTML-compliant syntax. Struts is following the
behavior recommended by the <a href="http://www.w3.org/TR/xhtml1/#h-4.5">
XHTML specification</a></p>
</section>

</chapter></body></document>
