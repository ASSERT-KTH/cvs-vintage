<?xml version="1.0"?>

<!-- Build file for Scarab -->

<project name="Scarab" default="deploy" basedir=".">

    <!-- Allow the user to have multiple configuration files and
         specify them using -Dconfiguration.file=filename 
       By default we load build.properties.     
    -->         
    <property name="configuration.file" value="build.properties"/>

    <!-- Give user a chance to override without editing this file
         (and without using -D arguments each time they build) -->
    <property file="${user.home}/scarab.build.properties" />
    <property file="${user.home}/build.properties" />
    <property file="${basedir}/${configuration.file}" />

    <!--  Allow a build.properties in the project root in the
          same place it would be used by Maven. -->
    <property file="${basedir}/../build.properties"/>
    <property file="${basedir}/default.properties" />
    <property file="${basedir}/default.${scarab.database.type}.properties" />

    <property name="ant.home" value=".."/>

    <property name="final.name" value="${project}-${version}"/>
    <property name="final.dir" value="${basedir}/../${final.name}/"/>

    <property name="src.conf.dir" value="${src.dir}/conf"/>
    <property name="src.java.dir.scarab" value="${src.dir}/java"/>
    <property name="src.sql.dir" value="${src.dir}/sql"/>
    <property name="src.schema.dir" value="${src.dir}/schema"/>
    <property name="src.webapp.dir" value="${src.dir}/webapp"/>
    <property name="src.webinf.dir" value="${src.webapp.dir}/WEB-INF"/>
    <property name="src.templates.dir" value="${src.webinf.dir}/templates"/>    
    <property name="src.test.dir" value="${src.dir}/test"/>
    
    <property name="torque.dir.scarab" value="${build.dir}/torque"/>
    <property name="torque.java.dir" value="${build.src.scarab}/torque"/>
    
    <property name="torquedoc.destdir" value="${build.dir}/torquedoc"/>
    <property name="scarab.war.file.dir" value="${build.dir}"/>
    <property name="scarab.war.file.name" value="scarab.war"/>
    <property name="scarab.war.file" value="${scarab.war.file.dir}/${scarab.war.file.name}"/>

    <property name="extensions.lib.dir" value="${extensions.dir}/usermods/lib"/>
    <property name="extensions.templates.dir" value="${extensions.dir}/usermods/templates"/>
    <property name="extensions.conf.dir" value="${extensions.dir}/usermods/conf"/>

    <property name="migration.dest.dir" value="${build.dir}/migration/classes"/>
    <property name="tomcat.dir" value="../tomcat"/>

    <!-- Build classpath -->
    <path id="classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
            <exclude name="**/xalan*.jar"/>
        </fileset>
        <fileset dir="${ant.home}/lib">
            <include name="**/ant*.jar"/>
        </fileset>
        <fileset dir="${basedir}/../www/repository">
            <include name="**/**.jar"/>
        </fileset>
    </path>

    <!-- ================================================================== -->
    <!-- Prepares the Build directory                                       -->
    <!-- ================================================================== -->
    <target name="prepare-build-dir">

        <echo message="Build Dir: ${build.dir}"/>
        <mkdir dir="${build.dir}"/>
        <tstamp/>
    <echo>
  _________                         ___.    
 /   _____/ ____ _____ ____________ \_ |__  
 \_____  \_/ ___\\__  \\_  __ \__  \ | __ \ 
 /        \  \___ / __ \|  | \// __ \| \_\ \
/_______  /\___  >____  /__|  (____  /___  /
        \/     \/     \/           \/    \/ 

        [${version}-${DSTAMP}${TSTAMP}]
    </echo>


    </target>


    <!-- ================================================================== -->
    <!-- Prepares the build directory                                       -->
    <!-- ================================================================== -->

    <target name="prepare" depends="prepare-build-dir">

        <echo>
+-------------------------------------------------------------
|
| Scarab database type       = ${scarab.database.type}
| Scarab database name       = ${scarab.database.name}
| Scarab database admin user = ${scarab.database.admin.username}
| Scarab database admin pwd  = ${scarab.database.admin.password}
|
| Scarab Administrator name  = ${scarab.user.username}
|
+-------------------------------------------------------------
        </echo>
        
        <!--
          Copy the appropriate build properties to the runtime
          properties area. The template file "settings.tmpl"
          can be copied with a filter to produce something suitable
          for inclusion in Scarab's runtime configuration.
        -->
        <filter token="DB_NAME" value="${scarab.database.name}"/>
        <filter token="DB_TYPE" value="${scarab.database.type}"/>
        <filter token="DB_VALIDATION_QUERY" value="${scarab.database.validationQuery}"/>
        <filter token="DB_DRIVER_CLASS" value="${scarab.database.jdbc.driver}"/>
        <filter token="DB_CONNECTION_URL" value="${scarab.database.url}"/>
        <filter token="DB_USER" value="${scarab.database.username}"/>
        <filter token="DB_PASSWORD" value="${scarab.database.password}"/>
        
        <copy tofile="${src.conf.dir}/conf/ant-generated.properties"
              file="settings.tmpl"
              filtering="yes"
              overwrite="yes" />
        
        <!--
          This filtered copy ensures that the default db connection
          information in the database creation shell script is correct.
        -->
        <filter token="DB_HOST" value="${scarab.database.host}"/>
        <filter token="DB_PORT" value="${scarab.database.port}"/>
        <filter token="DB_ADMIN_USER" value="${scarab.database.admin.username}"/>
        <filter token="SCARAB_CONTEXT" value="${scarab.context}"/>
        
        <copy tofile="${src.sql.dir}/create-db.sh"
              file="create-db.sh.tmpl"
              filtering="yes"
              overwrite="yes" />

        <!-- things to go into the project directory -->      
        <copy todir="${build.project}" filtering="no">
            <fileset dir="${src.dir}/webapp">
                <include name="WEB-INF/tld/**/*"/>
                <include name="WEB-INF/server-config.wsdd"/>
                <include name="WEB-INF/web.xml"/>
                <include name="docs/*"/>
                <include name="images/*"/>
                <include name="scripts/*"/>
                <include name="style/*"/>
                <include name="index.html"/>
                <include name="index.jsp"/>
            </fileset>
        </copy>
        
        <!--
          Make sure the file exists even if it is only empty.
        -->
        <touch file="${src.dir}/conf/conf/CustomSettings.properties"/>
        <!--
          Copy the miscellaneous runtime configuration files into the webapp
        -->
        <copy todir="${build.project.webinf}/conf" filtering="no">
             <fileset dir="${src.dir}/conf/conf">
                 <include name="**/*.*"/>
             </fileset>
             <filterset>
                 <filter token="SCARAB_MODULE_CODE_LENGTH" value="${scarab.module.code.length}"/>
                 <filter token="VERSION" value="${version}"/>
                 <filter token="BUILD_DATE" value="${DSTAMP}${TSTAMP}"/>
             </filterset>
        </copy>

        <!-- Conditionally copy templates -->
        <antcall target="copy-templates" />

        <!-- Conditionally copy extension conf -->
        <available property="extensions.conf.exist"
                   file="${extensions.conf.dir}"/>
        <antcall target="copy-conf-extensions"/>

        <!-- things to go into the web-inf directory -->
        <copy todir="${build.project.webinf}/lib" filtering="no" flatten="true">
            <fileset dir="${lib.dir}/">
                <exclude name="**/servlet*.jar"/>
                <exclude name="**/xalan*.jar"/>
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${basedir}/../www/repository">
                <include name="**/**.jar"/>
            </fileset>
        </copy>

        <!-- Conditionally copy extension libraries -->
        <available property="extensions.lib.exist" 
                   file="${extensions.lib.dir}"/>
        <antcall target="copy-lib-extensions"/>

        <!-- Copy the appropriate database driver to the webapp lib folder -->
        <echo>Using ${scarab.database.type} JDBC driver named
              ${scarab.jdbc.driver.jar}
        </echo>

        <copy todir="${build.project.webinf}/lib" filtering="no"
              preservelastmodified="yes">
            <fileset dir="${lib.dir}/">
                <include name="**/${scarab.jdbc.driver.jar}"/>
            </fileset>
            <fileset dir="${basedir}/../www/repository">
                <include name="**/${scarab.jdbc.driver.jar}"/>
            </fileset>
        </copy>

        <!-- Name of the initial Scarab Administrator user -->
        <!-- Name of the Scarab database instance          -->
        <filter token="ADMIN_USERNAME" value="${scarab.user.username}"/>
       
        <!-- the SQL data population scripts directory -->
        <copy todir="${build.sql.scarab}" filtering="yes">
            <fileset dir="${src.sql.dir}">
                <include name="**/*.sql"/>
                <include name="**/*.sh"/>
                <include name="**/*.lst"/>
                <include name="**/dbsettings.props"/>
            </fileset>
        </copy>
        
        <!-- Make all shell scripts executable -->
        <chmod perm="+x">
            <fileset dir="${src.sql.dir}" includes="**/*.sh"/>
            <fileset dir="${build.sql.scarab}" includes="**/*.sh"/>
        </chmod>

        <mkdir dir="${build.sql.scarab}/${scarab.database.type}" />
        
        <!-- copy config files to the classes directory -->
        <copy todir="${build.project.webinf}/classes" 
              filtering="no"
              preservelastmodified="yes">
            <fileset dir="${src.conf.dir}/classes"/>
        </copy>

    </target>

    <!-- conditional file copy used in prepare target-->
    <target name="copy-conf-extensions" if="extensions.conf.exist">
        <copy todir="${build.project.webinf}" filtering="yes"
              overwrite="true"
              verbose="true">
            <fileset dir="${extensions.conf.dir}/">
                <include name="web.xml"/>
                <include name="server-config.wsdd"/>
            </fileset>
        </copy>
    </target>
    <target name="copy-lib-extensions" if="extensions.lib.exist">
        <copy todir="${build.project.webinf}/lib" filtering="no"
              overwrite="true"
              verbose="true">
            <fileset dir="${extensions.lib.dir}/">
                <include name="**/*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Copies templates to WEB-INF directory, if specified                -->
    <!-- ================================================================== -->
    <target name="copy-templates">
        <copy todir="${build.project.webinf}/templates" filtering="no">
            <fileset dir="${src.templates.dir}"/>
            <filterset>
              <filter token="SCARAB_MODULE_CODE_LENGTH" value="${scarab.module.code.length}"/>
            </filterset>
        </copy>
        <available property="extension.templates.exist" 
                   file="${extensions.templates.dir}"/>
        <antcall target="copy-template-extensions"/>
    </target>

    <target name="copy-template-extensions" if="extension.templates.exist">
        <copy todir="${build.project.webinf}/templates" filtering="no"
              overwrite="true"
              verbose="true">
            <fileset dir="${extensions.templates.dir}"/>
            <filterset>
              <filter token="SCARAB_MODULE_CODE_LENGTH" value="${scarab.module.code.length}"/>
            </filterset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Copy all of the xml schema files into the torque directory         -->
    <!-- ================================================================== -->
    <target name="torque-copy-all-schema">
        <!-- copy the schema's to the torque directory -->
        <copy file="${src.schema.dir}/${project}-schema.xml" 
              todir="${torque.dir.scarab}/schema"
              filtering="true" overwrite="true">
          <filterset>
            <filter token="SCARAB_MODULE_CODE_LENGTH" value="${scarab.module.code.length}"/>
          </filterset>
        </copy>
        <copy file="${src.schema.dir}/id-table-schema.xml" 
              todir="${torque.dir.scarab}/schema"
              filtering="true" overwrite="true"/>
        <copy file="${src.schema.dir}/turbine-schema.xml" 
              todir="${torque.dir.scarab}/schema"
              filtering="true" overwrite="true"/>
    </target>

    <!-- ================================================================== -->
    <!-- Check to see if SQL related stuff is up to date                    -->
    <!-- ================================================================== -->
    <target name="schema-check">
        <echo message="checking: ${build.sql.scarab}/${scarab.database.type}/${project}.sql"/>
        <uptodate property="schema.uptodate"
                  targetfile="${build.sql.scarab}/${scarab.database.type}/${project}.sql">
            <srcfiles dir="${src.schema.dir}" includes="turbine-schema.xml"/>
            <srcfiles dir="${src.schema.dir}" includes="id-table-schema.xml"/>
            <srcfiles dir="${src.schema.dir}" includes="${project}-schema.xml"/>
            <srcfiles dir="${user.home}" includes="scarab.build.properties"/>
            <srcfiles dir="${user.home}" includes="build.properties"/>
            <srcfiles dir="${basedir}" includes="${configuration.file}"/>
        </uptodate>
    </target>

    <!-- ================================================================== -->
    <!-- Generate SQL from Torque for all databases                         -->
    <!-- ================================================================== -->
    <target name="sql-all" depends="schema-check" description="Generate SQL DDL for all databases"
            unless="schema.uptodate">
        <antcall target="sql-specific-db">
            <param name="generatesql.database.type" value="mysql"/>
        </antcall>
        <antcall target="sql-specific-db">
            <param name="generatesql.database.type" value="mssql"/>
        </antcall>
        <antcall target="sql-specific-db">
            <param name="generatesql.database.type" value="oracle"/>
        </antcall>
        <antcall target="sql-specific-db">
            <param name="generatesql.database.type" value="db2"/>
        </antcall>
        <antcall target="sql-specific-db">
            <param name="generatesql.database.type" value="hypersonic"/>
        </antcall>
        <antcall target="sql-specific-db">
            <param name="generatesql.database.type" value="postgresql"/>
        </antcall>
    </target>
    
    <!-- ================================================================== -->
    <!-- Generate SQL from Torque for a specified database type. Set the    -->
    <!-- generatesql.database.type property when calling this target to     -->
    <!-- specify the required database type.                                -->
    <!-- ================================================================== -->
    <target name="sql-specific-db">

        <antcall target="torque-copy-all-schema" />

        <filter token="DATABASE_TYPE" value="${generatesql.database.type}"/>
        <filter token="DATABASE_DRIVER" value="${scarab.database.jdbc.driver}"/>
        <filter token="DATABASE_URL" value="${scarab.database.url}"/>
        <filter token="DATABASE_HOST" value="${scarab.database.host}"/>
        <filter token="DATABASE_PORT" value="${scarab.database.port}"/>
        <filter token="DATABASE_USERNAME" value="${scarab.database.username}"/>
        <filter token="DATABASE_PASSWORD" value="${scarab.database.password}"/> 
        
        <!-- copy the scarab specific build.properties over -->
        <copy file="${src.conf.dir}/torque.props" 
              tofile="${torque.dir.scarab}/build.properties"
              filtering="true" overwrite="true"/>

        <!-- move the generated .sql files into the target directory -->
        <ant antfile="build-torque.xml" target="sql" inheritAll="false">
        
            <!-- See the Torque tasks' build.properties for options -->
            <property name="torque.home" value="${torque.dir.scarab}"/>
            <property name="lib.dir" value="${lib.dir}"/>
            <property name="torque.output.dir" value="${src.dir}"/>
            <property name="build.properties"
                      value="${torque.dir.scarab}/build.properties"/>
            <property name="idTableXMLFile" value=""/>
        </ant>

        <mkdir dir="${build.sql.scarab}/${generatesql.database.type}/"/>

        <move file="${src.sql.dir}/${project}-schema.sql"
            tofile="${build.sql.scarab}/${generatesql.database.type}/${project}.sql"/>
        <move file="${src.sql.dir}/turbine-schema.sql"
            tofile="${build.sql.scarab}/${generatesql.database.type}/turbine.sql"/>
        <move file="${src.sql.dir}/id-table-schema.sql"
            tofile="${build.sql.scarab}/${generatesql.database.type}/id-table.sql"/>
    </target>
    
    
    <!-- ================================================================== -->
    <!-- Generate SQL from Torque for the database type set in the build    -->
    <!-- property "scarab.database.type".                                   -->
    <!-- ================================================================== -->
    <target name="sql-current-db" depends="prepare">
        <!-- Generate the Torque files for the specified database type -->
        <antcall target="sql-specific-db">
            <param name="generatesql.database.type"
                   value="${scarab.database.type}"/>
        </antcall>
    </target>

    <!-- ================================================================== -->
    <!-- Generate OM/Peer classes from Torque                               -->
    <!-- ================================================================== -->
    <target name="generated-check" depends="prepare">
        <echo message="checking: ${src.java.dir.scarab}/report.scarab.om.generation"/>
        <uptodate property="gen.uptodate"
                  targetfile="${src.java.dir.scarab}/report.scarab.om.generation">
            <srcfiles dir="${src.sql.dir}"
                      includes="${scarab.torque.schemas}"/>
        </uptodate>
    </target>

    <target name="om-peer-generate" depends="generated-check" 
            unless="gen.uptodate">
        <!-- Generate the Torque files for the specified database type -->
        <antcall target="sql-specific-db">
            <param name="generatesql.database.type"
                   value="${scarab.database.type}"/>
        </antcall>
    
        <!-- we don't want to generate the OM objects for Turbine 
             tables because they already exists in the fulcrum.jar -->
        <delete file="${torque.dir.scarab}/schema/turbine-schema.xml"/>

        <ant antfile="build-torque.xml" target="om" inheritAll="false">
            <property name="torque.home" value="${torque.dir.scarab}"/>
            <property name="lib.dir" value="${build.project.webinf.lib}"/>
            <property name="build.properties" value="${torque.dir.scarab}/build.properties"/>
        </ant>

    </target>

    <target name="om-peer" depends="om-peer-generate"
            unless="gen.uptodate">
    </target>


    <!-- ================================================================== -->
    <!-- Check for databases that could require alternate or more complex   -->
    <!-- methods for schema creation                                        -->
    <!-- ================================================================== -->
    <target name="db-type-check">
        <condition property="auto.create.db">
        <not>
            <or>
                <equals arg1="${scarab.database.type}" arg2="oracle"/>
                <equals arg1="${scarab.database.type}" arg2="db2"/>
                <equals arg1="${scarab.database.type}" arg2="mssql"/>
                <equals arg1="${scarab.database.type}" arg2="hypersonic"/>
                <equals arg1="${scarab.database.type}" arg2="postgresql"/>
            </or>
        </not>
        </condition>
    </target>

    <!-- ================================================================== -->
    <!-- Test to make sure the database connection works                    -->
    <!-- ================================================================== -->
    <target name="test-db-connection" depends="sql-current-db">
        <echo message="Connecting to ${scarab.database.type} at ${scarab.database.url}"/>
        <sql
            driver="${scarab.database.jdbc.driver}"
            url="${scarab.database.url}"
            userid="${scarab.database.username}"
            password="${scarab.database.password}">
            <classpath refid="classpath"/>
        CREATE TABLE scarab_test (
          scarab_test integer
        );
        drop table scarab_test;
        </sql>
    </target>

    <!-- ================================================================== -->
    <!-- Create database if not bypassed in "db-type-check"                 -->
    <!-- ================================================================== -->
    <target name="create-db-schema" depends="db-type-check,prepare,sql-current-db" 
            if="auto.create.db">
        <!-- Generate the Torque files for the specified database type -->
        
        <copy file="${src.sql.dir}/create-${scarab.database.type}-db.sql" 
              todir="${build.src.scarab}"
              filtering="true" overwrite="true"/>
        <echo message="Connecting to ${scarab.database.type} at ${scarab.database.admin.url}"/>
        <sql
            driver="${scarab.database.jdbc.driver}"
            url="${scarab.database.admin.url}"
            userid="${scarab.database.admin.username}"
            password="${scarab.database.admin.password}">
            <classpath refid="classpath"/>
            <transaction 
                src="${build.src.scarab}/create-${scarab.database.type}-db.sql"/>
        </sql>

    </target>

    <!-- ================================================================== -->
    <!-- Load default data                                                  -->
    <!-- ================================================================== -->
    <target name="load-default-data" depends="create-db-schema">

        <!-- Oracle does not have any type of conditional execution    -->
        <!-- of "drop table".  So when running the table creation,     -->
        <!-- it fails when dropping a table.  Rather than setting the  -->
        <!-- onerror of the actual creation class to "continue", this  -->
        <!-- pre-creates dummy tables (ignoring any errors if the      -->
        <!-- tables already exist) so that they can be dropped.        -->
        <sql
            rdbms="oracle"
            onerror="continue"
            driver="${scarab.database.jdbc.driver}"
            url="${scarab.database.url}"
            userid="${scarab.database.admin.username}"
            password="${scarab.database.admin.password}">
            <classpath refid="classpath"/>
            <transaction 
                src="${build.sql.scarab}/prepare-oracle-dummy-tables.sql"/>
        </sql>

        <echo message=
            "Connecting to ${scarab.database.type} at ${scarab.database.url}"/>
        <sql
            driver="${scarab.database.jdbc.driver}"
            url="${scarab.database.url}"
            userid="${scarab.database.admin.username}"
            password="${scarab.database.admin.password}">
            <classpath refid="classpath"/>
            <transaction src="${build.sql.scarab}/standard-${scarab.database.type}-init.sql"/>

            <transaction src="${build.sql.scarab}/${scarab.database.type}/turbine.sql"/>
            <transaction src="${build.sql.scarab}/${scarab.database.type}/${project}.sql"/>
            <transaction src="${build.sql.scarab}/${scarab.database.type}/id-table.sql"/>
            <transaction src="${build.sql.scarab}/turbine-id-table-init.sql"/>
            <transaction src="${build.sql.scarab}/${project}-id-table-init.sql"/>
            <transaction src="${build.sql.scarab}/${project}-required-data.sql"/>
            <transaction src="${build.sql.scarab}/${project}-default-data.sql"/>
            <transaction src="${build.sql.scarab}/${project}-security.sql"/>
        </sql>
    </target>

    <!-- ================================================================== -->
    <!-- Load seed data unless bypassed by setting "skip.seed.data"         -->
    <!-- to any value in "build.properties"                                 -->
    <!-- ================================================================== -->
    <target name="load-seed-data" depends="load-default-data"
            unless="skip.seed.data">
        <!-- ============================================================== -->
        <!-- Alternate initial data file may be specified                   -->
        <!-- in "build.properties" by setting "seed.data.sql"               -->
        <!-- to an alternate file.                                          -->
        <!-- ============================================================== -->
        <property name="seed.data.sql"
            value="${build.sql.scarab}/${project}-sample-data.sql"/>
        <sql
            driver="${scarab.database.jdbc.driver}"
            url="${scarab.database.url}"
            userid="${scarab.database.admin.username}"
            password="${scarab.database.admin.password}">
            <classpath refid="classpath"/>
            <transaction src="${build.sql.scarab}/standard-${scarab.database.type}-init.sql"/>
            <transaction src="${seed.data.sql}"/>
        </sql>
    </target>

    <!-- ================================================================== -->
    <!-- Create DB from Torque                                              -->
    <!-- ================================================================== -->
    <target name="create-db" depends="load-seed-data"/>

    <!-- ================================================================== -->
    <!-- Create database if not bypassed in "db-type-check"                 -->
    <!-- ================================================================== -->
    <target name="create-test-db-schema" depends="db-type-check,sql-current-db,prepare" 
            if="auto.create.db">

        <copy file="${src.sql.dir}/create-${scarab.database.type}-db.sql" 
              todir="${build.src.scarab}"
              filtering="true" overwrite="true"/>
        <echo message="Connecting to ${scarab.database.type} at ${scarab.database.admin.url}"/>
        <sql
            driver="${scarab.database.jdbc.driver}"
            url="${scarab.test.database.url}"
            userid="${scarab.test.database.username}"
            password="${scarab.test.database.password}">
            <classpath refid="classpath"/>
            <transaction 
                src="${build.src.scarab}/create-${scarab.database.type}-db.sql"/>
        </sql>

    </target>

    <!-- ================================================================== -->
    <!-- Load test default data                                             -->
    <!-- ================================================================== -->
    <target name="load-test-default-data" depends="create-test-db-schema, prepare">

        <!-- Oracle does not have any type of conditional execution    -->
        <!-- of "drop table".  So when running the table creation,     -->
        <!-- it fails when dropping a table.  Rather than setting the  -->
        <!-- onerror of the actual creation class to "continue", this  -->
        <!-- pre-creates dummy tables (ignoring any errors if the      -->
        <!-- tables already exist) so that they can be dropped.        -->
        <sql
            rdbms="oracle"
            onerror="continue"
            driver="${scarab.database.jdbc.driver}"
            url="${scarab.test.database.url}"
            userid="${scarab.test.database.username}"
            password="${scarab.test.database.password}">
            <classpath refid="classpath"/>
            <transaction 
                src="${build.sql.scarab}/prepare-oracle-dummy-tables.sql"/>
        </sql>


        <echo message=
            "Connecting to ${scarab.database.type} at ${scarab.test.database.url}"/>
        <sql
            driver="${scarab.database.jdbc.driver}"
            url="${scarab.test.database.url}"
            userid="${scarab.test.database.username}"
            password="${scarab.test.database.password}">
            <classpath refid="classpath"/>
            <transaction src="${build.sql.scarab}/standard-${scarab.database.type}-init.sql"/>

            <transaction src="${build.sql.scarab}/${scarab.database.type}/turbine.sql"/>
            <transaction src="${build.sql.scarab}/${scarab.database.type}/${project}.sql"/>
            <transaction src="${build.sql.scarab}/${scarab.database.type}/id-table.sql"/>
            <transaction src="${build.sql.scarab}/turbine-id-table-init.sql"/>
            <transaction src="${build.sql.scarab}/${project}-id-table-init.sql"/>
            <transaction src="${build.sql.scarab}/${project}-required-data.sql"/>
            <transaction src="${build.sql.scarab}/${project}-default-data.sql"/>
            <transaction src="${build.sql.scarab}/${project}-security.sql"/>
        </sql>
    </target>

    <!-- ================================================================== -->
    <!-- Load test seed data                                                -->
    <!-- ================================================================== -->
    <target name="load-test-seed-data" depends="load-test-default-data">
        <sql
            driver="${scarab.database.jdbc.driver}"
            url="${scarab.test.database.url}"
            userid="${scarab.test.database.username}"
            password="${scarab.test.database.password}">
            <classpath refid="classpath"/>
            <transaction src="${build.sql.scarab}/standard-${scarab.database.type}-init.sql"/>
      <transaction src="${build.sql.scarab}/${project}-sample-data.sql"/>
        </sql>
    </target>

    <!-- ================================================================== -->
    <!-- Create test DB from Torque                                              -->
    <!-- ================================================================== -->
    <target name="create-test-db" depends="load-test-seed-data"/>

    <!-- ================================================================== -->
    <!-- Generate Data DTD from Torque                                      -->
    <!-- ================================================================== -->
    <target name="datadtd-check">
        <echo message="checking: ${src.sql.dir}/${project}-data.dtd"/>
        <uptodate property="datadtd.uptodate"
            targetfile="${src.sql.dir}/${project}-data.dtd">
            <srcfiles dir="${src.schema.dir}" includes="scarab-schema.xml"/>
        </uptodate>
    </target>

    <target name="datadtd" depends="datadtd-check,compile"
            unless="datadtd.uptodate">
        <copy file="${src.schema.dir}/${project}-schema.xml"
              todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.conf.dir}/torque.props"
              overwrite="true" tofile="${torque.dir.scarab}/build.properties"/>
        <ant antfile="build-torque.xml"
             target="datadtd" inheritAll="false">
            <property name="torque.home" value="${torque.dir.scarab}"/>
            <property name="databaseName" value="default"/>
            <property name="lib.dir" value="${build.project.webinf.lib}"/>
            <property name="build.properties" value="${torque.dir.scarab}/build.properties"/>
        </ant>

        <echo message="${src.java.dir.scarab}/${project}-data.dtd"/>
        <echo message="${src.sql.dir}/${project}-data.dtd"/>

        <copy file="${src.dir}/conf/classes/org/tigris/scarab/scarab.dtd"
            tofile="${src.sql.dir}/${project}-data.dtd"/>
    </target>

    <!-- ================================================================== -->
    <!-- Generate SQL from data XML                                         -->
    <!-- ================================================================== -->
    <target name="datasql" depends="prepare,datadtd,compile">
        <copy file="${src.schema.dir}/${project}-schema.xml"
            todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.schema.dir}/${project}-data.xml"
            todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.schema.dir}/${project}-data.dtd"
            todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.conf.dir}/torque.props" overwrite="true"
            tofile="${torque.dir.scarab}/build.properties"
      filtering="true"/>
        <ant antfile="build-torque.xml"
            target="datasql" inheritAll="false">
            <property name="torque.home" value="${torque.dir.scarab}"/>
            <property name="lib.dir" value="${build.project.webinf.lib}"/>
            <property name="build.properties" value="${torque.dir.scarab}/build.properties"/>
        </ant>
        <move file="${src.java.dir.scarab}/${project}-data.sql"
            tofile="${src.sql.dir}/${project}-data.sql"/>
    </target>

    <target name="check-ant-version">
      <condition property="can.compile">
        <contains string="${ant.version}" substring="1.5."/>
      </condition>
      <fail unless="can.compile">
        
+-----------------------------------------------------------------------+
| Your version of ant is                                                |
|                                                                       |
| ${ant.version}
|                                                                       |
| Due to dependencies between ant and Torque you                        |
| need to use ant-1.5.* in order to compile successfully.               |
| Please get a supported version of ant and try again.                  |
| Following ant download is known to work for building scarab :         |
|                                                                       |
| http://archive.apache.org/dist/ant/binaries/apache-ant-1.5.4-bin.zip  |
|                                                                       |
+-----------------------------------------------------------------------+
      </fail>
    </target>

    <!-- ================================================================== -->
    <!-- Compiles the source directory                                      -->
    <!-- ================================================================== -->
    <target name="compile" depends="check-ant-version, om-peer,prepare">
        <mkdir dir="${build.dest.scarab}"/>
        <javac srcdir="${src.java.dir.scarab}"
               destdir="${build.dest.scarab}"
               debug="on"
               deprecation="off"
               optimize="off">
            <classpath refid="classpath"/>
            <classpath>
                <fileset dir="${build.project.webinf.lib}">
                    <include name="**/torque*.jar"/>
                </fileset>
            </classpath>
            <exclude name="**/package.html"/>
            <exclude name="torque/**"/>
        </javac>
    </target>

    <!-- ================================================================== -->
    <!-- Deploys Scarab into the bundled Tomcat                             -->
    <!-- ================================================================== -->
    <target name="deploy" depends="compile">
        <copy todir="${tomcat.dir}/webapps" filtering="no">
            <fileset dir="${build.dir}">
                <include name="scarab/**"/>
            </fileset>
        </copy>
    </target>
    
    <!-- ================================================================== -->
    <!-- Cleans up the build directory                                      -->
    <!-- ================================================================== -->
    <target name="clean" depends="prepare-build-dir, remove-generation">
        <delete dir="${build.dir}" quiet="true"/>
        <delete dir="${tomcat.dir}/webapps/scarab"/>
    </target>

    <target name="clean-all" depends="prepare-build-dir, remove-generation,clean">
        <delete file="${src.sql.dir}/${project}-data.dtd"/>
        <delete file="${scarab.log.file.scarab}" quiet="true"/>
        <delete file="${scarab.log.file.turbine}" quiet="true"/>
        <delete file="${scarab.log.file.torque}" quiet="true"/>
        <delete file="${scarab.log.file.fulcrum}" quiet="true"/>
        <delete file="${scarab.log.file.stratum}" quiet="true"/>
        <delete file="${scarab.log.file.velocity}" quiet="true"/>
        <delete file="${scarab.log.file.jcs}" quiet="true"/>
        <delete dir="${build.dir}" quiet="true"/>
        <delete quiet="true">
            <fileset dir="..">
                <include name="${final.name}*"/>
            </fileset>
        </delete>
        <delete quiet="true">
            <fileset dir="${tomcat.dir}/logs">
                <include name="*log*.txt"/>
            </fileset>
        </delete>
    </target>

    <!-- ================================================================== -->
    <!-- Package (creates a .zip and .tar.gz)                               -->
    <!-- ================================================================== -->
    <target name="package" depends="package-zip,package-tgz">
    </target>

    <!-- ================================================================== -->
    <!-- Packages the distribution with ZIP                                 -->
    <!-- ================================================================== -->
    <target name="package-zip" depends="dist">
        <delete file="../${final.name}.zip" quiet="true" />
        <zip zipfile="../${final.name}.zip" 
             basedir="../" includes="**/${final.name}/**"/>
    </target>

    <!-- ================================================================== -->
    <!-- Packages the distribution with TAR-GZIP                            -->
    <!-- ================================================================== -->
    <target name="package-tgz" depends="dist">
        <delete file="../${final.name}.tar" quiet="true"/>
        <delete file="../${final.name}.tar.gz" quiet="true" />
        <tar longfile="gnu" tarfile="../${final.name}.tar" 
             basedir="../" includes="**/${final.name}/**"/>
        <gzip zipfile="../${final.name}.tar.gz" 
                  src="../${final.name}.tar"/>
        <delete file="../${final.name}.tar"/>
    </target>

    <!-- ================================================================== -->
    <!-- Creates the Binary distribution directory                          -->
    <!-- ================================================================== -->
    <target name="dist">
        <delete dir="${final.dir}" quiet="true" />
        <mkdir dir="${final.dir}"/>

        <copy todir="${final.dir}" preservelastmodified="true"
              includeEmptyDirs="false">
            <fileset dir="../">
                <exclude name="**/build/nightly.sh"/>
                <exclude name="**/build/run-tests*"/>
                <exclude name="**/build/velocity.log*"/>
                <exclude name="**/lib/jakarta-turbine-*.gz"/>
                <exclude name="**/src/sql/${scarab.database.type}-scarab.sql"/>
                <exclude name="**/src/sql/report.scarab.sql.generation"/>
                <exclude name="**/src/sql/project-schema.sql"/>
                <exclude name="**/src/sql/sqldb.map"/>
                <exclude name="**/src/sql/id-table-schema.sql"/>
                <exclude name="**/src/sql/*.DM1"/>
                <exclude name="**/src/sql/*.jpg"/>
                <exclude name="**/src/sql/schema-design-notes.txt"/>
                <exclude name="**/src/sql/sql_questions.txt"/>
                <exclude name="**/src/test/**"/>
                <exclude name="**/target/**"/>
                <exclude name="**/www/**"/>
            </fileset>
            <fileset dir="../">
              <include name="www/repository/**"/>
            </fileset>
        </copy>     

    </target>

   

    <!-- ================================================================== -->
    <!-- Create a war file                                                  -->
    <!-- ================================================================== -->
    <target name="war" depends="compile">

        <war warfile="${scarab.war.file}"
              webxml="${build.project.webinf}/web.xml">

          <fileset dir="${build.project}">
            <exclude name="WEB-INF/web.xml"/>
            <exclude name="logs/**"/>
          </fileset>
        </war>
    </target>

  



<!-- ============================================================= -->
<!-- Targets beyond this point are currently considered broken or  -->
<!-- experimental - User Beware!                                  -->
<!-- ============================================================= -->



    <!-- ================================================================== -->
    <!-- Creates the Torque documentation                                   -->
    <!-- ================================================================== -->
    <target name="datadoc" depends="sql-current-db">
        <mkdir dir="${torquedoc.destdir}"/>

        <antcall target="torque-copy-all-schema" />

        <ant antfile="build-torque.xml"
           target="doc">
            <property name="torque.home" value="${torque.dir.scarab}"/>
            <property name="lib.dir" value="${build.project.webinf}/lib"/>
            <property name="build.properties"
                      value="${torque.dir.scarab}/build.properties"/> 
            <property name="torque.doc.dir"
                      value="${torquedoc.destdir}"/> 
        </ant>
    </target>
    

    <!-- ================================================================== -->
    <!-- Dump data from DB into xml                                         -->
    <!-- ================================================================== -->
    <target name="datadump" depends="sql-current-db,compile">
        <ant antfile="build-torque.xml"
            target="datadump">
            <property name="torque.home" value="${torque.dir.scarab}"/>
            <property name="lib.dir" value="${build.project.webinf}/lib"/>
            <property name="build.properties"
                      value="${torque.dir.scarab}/build.properties"/> 
            <property name="torque.output.dir" value="${src.sql.dir}"/> 
            <property name="torque.database.driver"
                value="${scarab.database.jdbc.driver}"/>
            <property name="torque.database.url"
                value="${scarab.database.url}"/>
            <property name="torque.database.user"
                value="${scarab.database.username}"/>
            <property name="torque.database.password"
                value="${scarab.database.password}"/>
        </ant>
    </target>

    <!-- ================================================================== -->
    <!-- Generates an Html description of the DB schema                     -->
    <!-- This should be integrated with torque, so effort to integrate      -->
    <!-- into the build has not been done                                   -->
    <!-- ================================================================== -->
    <target name="html-schema">
        <echo message="This task expects you to have xalan-j_2_3_1 binary
                       distribution located at ${lib.repo}/xalan-j_2_3_1"/>
        <java classname="org.apache.xalan.xslt.Process" fork="yes"
              args="-XSL ${src.dir}/dtd/XMLSchemaToHTML.xsl 
                    -IN  ${src.schema.dir}/scarab-schema.xml 
                    -OUT ${src.sql.dir}/scarab-schema.html">
           <!-- it seems ant is treating these as jvmarg ??
           <arg value="-XSL ${src.dir}/dtd/XMLSchemaToHTML.xsl"/>
           <arg value="-IN  ${src.sql.dir}/scarab-schema.xml"/>
           <arg value="-OUT ${src.sql.dir}/scarab-schema.html"/>
           -->
           <classpath>
               <fileset dir="${lib.repo}/xalan-j_2_3_1/bin">
                   <include name="xalan.jar"/>
                   <include name="xml-apis.jar"/>
                   <include name="xercesImpl.jar"/>
               </fileset>
           </classpath>
        </java>

        <copy file="${src.sql.dir}/scarab-schema.html"
            tofile="${www.dir}/generated-scarab-schema.html"/>

    </target>

    <!-- Remove any torque *.generation files.  This forces torque to rebuild. -->
    <target name="remove-generation">
        <delete file="${src.sql.dir}/report.scarab.sql.generation"/>
        <delete file="${src.java.dir.scarab}/report.scarab.om.generation"/>
        <delete file="${src.dir}/report.scarab.datadtd.generation"/>
        <!-- delete file="${torque.dir.scarab}/report.scarab.om.generation"/-->
    </target>

    <!-- ================================================================== -->
    <!-- Complete buld of all components (for testing changes to build.xml) -->
    <!-- ================================================================== -->
    <target name="test-complete-build">
        <antcall target="clean"/>
        <antcall target="compile"/>
        <antcall target="datadtd"/>
        <antcall target="datadoc"/>
        <antcall target="war"/>
        <antcall target="dist"/>
    </target>
    
    <!-- ================================================================== -->
    <!--    Task to migrate build properties from b18 to b19.               -->
    <!--                                                                    -->
    <!--    WARNING! This will overwrite the following files:               -->
    <!--                                                                    -->
    <!--      src/conf/conf/CustomSettings.properties                       -->
    <!--      src/conf/conf/intake.xml                                      -->
    <!--      src/webapp/WEB-INF/web.xml                                    -->
    <!--      tomcat/conf/server.xml                                        -->
    <!-- ================================================================== -->
    <target name="migrate-b18-b19"
            description="Migrates b18 properties to the equivalents for b19">
        <!-- Copy the tomcat configuration to the required place -->
        <filter token="TOMCAT_HTTP_PORT" value="${scarab.tomcat.http.port}"/>
        <filter token="TOMCAT_SHUTDOWN_PORT" value="${scarab.tomcat.shutdown.port}"/>
        <filter token="TOMCAT_PROXY_NAME" value="${scarab.tomcat.proxy.name}"/>
        <filter token="TOMCAT_PROXY_PORT" value="${scarab.tomcat.proxy.port}"/>
        <filter token="SCARAB_CONTEXT" value="${scarab.context}"/>
        <filter token="SCARAB_WEBAPP_RELOADABLE" value="${scarab.webapp.reloadable}"/>
        <filter token="SCARAB_WEBAPP_CHECK_INTERVAL" value="${scarab.webapp.checkInterval}"/>
        
        <copy file="server.xml.tmpl"
              tofile="${tomcat.dir}/conf/server.xml"
              filtering="yes"
              overwrite="yes"/>
        
        <!-- Copy the webapp configuration to the required place -->
        <filter token="SCARAB_WELCOME_FILE" value="${scarab.welcome.file}"/>
        
        <copy file="web.xml.tmpl"
              tofile="${src.webinf.dir}/web.xml"
              filtering="yes"
              overwrite="yes"/>
        
        <!-- Copy the intake service configuration to the required place -->
        <filter token="FILE_UPLOAD_MAX_SIZE" value="${scarab.file.max.size}"/>
        
        <copy file="intake.xml.tmpl"
              tofile="${src.conf.dir}/conf/intake.xml"
              filtering="yes"
              overwrite="yes"/>
        
        <!-- Compile the migration task -->        
        <mkdir dir="${migration.dest.dir}"/>
        <javac srcdir="${src.dir}/migration"
               destdir="${migration.dest.dir}"
               excludes="**/package.html,torque/**">
            <classpath refid="classpath"/>
        </javac>

        <!-- Configure the migration task -->
        <path id="migration-cp">
            <pathelement location="${migration.dest.dir}"/>
        </path>

        <taskdef name="b18-b19" 
                 classname="org.tigris.scarab.migration.b18b19.MigrateProperties">
            <classpath refid="migration-cp"/>
        </taskdef>

        <!-- Run the migration task -->
        <b18-b19 output="${src.conf.dir}/conf/CustomSettings.properties"/>
    </target>

    <target name="migrate-b15-b16" depends="prepare">
        <path id="migration-cp">
          <path refid="classpath"/>
          <pathelement location="${migration.dest.dir}"/>
        </path>

        <mkdir dir="${migration.dest.dir}"/>
        <javac srcdir="${src.dir}/migration"
            destdir="${migration.dest.dir}"
            excludes="**/package.html,torque/**"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}">

            <classpath refid="classpath"/>
        </javac>

      <taskdef name="b15b16-1" 
       classname="org.tigris.scarab.migration.b15b16.DB_1_MoveIssueCreateInfo">
       <classpath refid="migration-cp"/>
      </taskdef>

        <b15b16-1
            driver="${scarab.database.jdbc.driver}"
            url="${scarab.database.url}"
            userid="${scarab.database.admin.username}"
            password="${scarab.database.admin.password}">
            <classpath refid="migration-cp"/>
        </b15b16-1>

    </target>
</project>
