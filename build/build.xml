<?xml version="1.0"?>

<!-- Build file for Scarab -->

<project name="Scarab" default="compile" basedir=".">

    <!-- Give user a chance to override without editing this file
        (and without typing -D each time it compiles it -->
    <property file="${user.home}/build.properties" />
    <property file="${basedir}/build.properties" />

    <property name="ant.home" value="."/>

    <property name="final.name" value="${project}-${version}"/>
    <property name="final.dir" value="${basedir}/../${final.name}/"/>
            
    <property name="src.conf.dir" value="${src.dir}/conf"/>
    <property name="src.html.dir" value="${src.dir}/html"/>
    <property name="src.i18n.dir" value="${src.dir}/i18n"/>
    <property name="src.images.dir" value="${src.dir}/images"/>
    <property name="src.java.dir.scarab" value="${src.dir}/java"/>
    <property name="src.resources.dir" value="${src.dir}/resources"/>
    <property name="src.sql.dir" value="${src.dir}/sql"/>
    <property name="src.templates.dir" value="${src.dir}/templates"/>
    <property name="src.test.dir" value="${src.dir}/test"/>
    <property name="src.usecases.dir" value="${src.dir}/usecases"/>
    
    <property name="tomcat.dist.dir" value="${src.dir}/tomcat-4.0"/>

    <property name="torque.dir.scarab" value="${build.src.scarab}/torque"/>
    <property name="javadoc.destdir" value="${build.project}/api"/>

    <!-- Build classpath -->
    <path id="classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
            <exclude name="**/xalan*.jar"/>
        </fileset>
        <fileset dir="${ant.home}/lib">
            <include name="**/ant*.jar"/>
        </fileset>
    </path>

    <!-- ================================================================== -->
    <!-- Check to see what optional dependencies are available              -->
    <!-- ================================================================== -->
    <target name="check_for_optional_packages">
        <available property="lucene.present"
                   classname="com.lucene.document.Document">
            <classpath refid="classpath"/>
        </available>
        <available property="junit.present"
           classname="junit.framework.TestCase">
            <classpath refid="classpath"/>
        </available>
    </target>

    <!-- ================================================================== -->
    <!-- Prepares the Build directory                                       -->
    <!-- ================================================================== -->
    <target name="prepare-build-dir">

        <echo message="Build Dir: ${build.dir}"/>
        <mkdir dir="${build.dir}"/>

    </target>

    <!-- ================================================================== -->
    <!-- Prepares the Tomcat directory                                      -->
    <!-- ================================================================== -->
    <target name="prepare-tomcat" depends="prepare-build-dir">

        <!-- copy over tomcat -->
        <mkdir dir="${build.dir}"/>
        <copy todir="${build.dir}/bin" filtering="no">
            <fileset dir="${tomcat.dist.dir}/bin"/>
        </copy>
        <copy todir="${build.dir}/common" filtering="no">
            <fileset dir="${tomcat.dist.dir}/common"/>
        </copy>
        <filter token="SCARAB_CONTEXT" value="${scarab.context}"/>
        <copy todir="${build.dir}/conf" filtering="yes">
            <fileset dir="${tomcat.dist.dir}/conf"/>
        </copy>
        <copy todir="${build.dir}/lib" filtering="no">
            <fileset dir="${tomcat.dist.dir}/lib"/>
        </copy>
        <copy todir="${build.dir}/server" filtering="no">
            <fileset dir="${tomcat.dist.dir}/server"/>
        </copy>
        <copy todir="${build.dir}" filtering="no">
            <fileset dir="${tomcat.dist.dir}">
                <include name="scarab.sh"/>
            </fileset>
        </copy>
        <!-- no need to have two copies of this checked into CVS -->
        <copy todir="${build.dir}/common/lib" filtering="no">
             <fileset dir="${lib.dir}">
                 <include name="**/xerces*.jar"/>
             </fileset>
        </copy>
        <!-- no need to have two copies of this checked into CVS -->
        <copy todir="${build.dir}/server/lib" filtering="no">
             <fileset dir="${lib.dir}">
                <include name="**/jakarta-regexp*.jar"/>
            </fileset>
        </copy>

        <chmod dir="${build.dir}" perm="ug+rx" includes="**/*.sh" />

        <mkdir dir="${build.dir}/logs"/>
        <mkdir dir="${build.dir}/work"/>
        <mkdir dir="${build.dir}/webapps"/>
    </target>

    <!-- ================================================================== -->
    <!-- Prepares the build directory                                       -->
    <!-- ================================================================== -->
    <target name="prepare" depends="prepare-tomcat">

        <!-- things to go into the project directory -->
        <filter token="SCARAB_CONTEXT" value="${scarab.context}"/>
        <copy todir="${build.project}" filtering="yes">
            <fileset dir="${src.html.dir}" defaultexcludes="no">
                <include name="**/*.html"/>
                <include name="**/*.css"/>
            </fileset>
        </copy>
        <copy todir="${build.project}/images" filtering="no">
            <fileset dir="${src.images.dir}" defaultexcludes="no"/>
        </copy>

        <!-- Conditionally copy templates -->
        <antcall target="copy-templates"/>

        <copy todir="${build.project}/resources" filtering="no">
            <fileset dir="${src.resources.dir}" defaultexcludes="no"/>
        </copy>
        <copy todir="${build.project.webinf}" filtering="yes">
            <fileset dir="${src.conf.dir}/">
                <include name="web.xml"/>
            </fileset>
        </copy>

        <condition property="template.path" value="/WEB-INF">
            <equals arg1="${copy.templates}" arg2="true"/>
        </condition>
        <condition property="template.path" value="file://${src.dir}">
            <not>
                <equals arg1="${copy.templates}" arg2="true"/>
            </not>
        </condition>

        <!-- things to go into the web-inf directory -->
        <filter token="TEMPLATE_PATH" value="${template.path}"/>
        <filter token="PIPELINE_DEFAULT" value="${scarab.default.pipeline}"/>
        <filter token="DATABASE_PROP_NAME" value="${scarab.database.prop.name}"/>
        <filter token="DATABASE_NAME" value="${scarab.database.name}"/>
        <filter token="DATABASE_HOST" value="${scarab.database.host}"/>
        <filter token="DATABASE_PORT" value="${scarab.database.port}"/>
        <filter token="DATABASE_USERNAME" value="${scarab.database.username}"/>
        <filter token="DATABASE_PASSWORD" value="${scarab.database.password}"/>
        <filter token="SESSION_VALIDATOR" value="${scarab.sessionvalidator}"/>
        <filter token="USER_SERVICE" value="${scarab.user.service}"/>
        <filter token="MODULE_SERVICE" value="${scarab.module.service}"/>
        <filter token="SCARAB_LINK" value="${scarab.pull.link}"/>
        <filter token="EXTRA_TR_PROPERTIES" 
            value="${scarab.extra.tr.properties}"/>
        <copy todir="${build.project.webinf}/conf" filtering="yes">
            <fileset dir="${src.conf.dir}/" defaultexcludes="no">
                <include name="*.properties"/>
                <include name="*.xml"/>
            </fileset>
        </copy>

        <copy todir="${build.project.webinf}/lib" filtering="no">
            <fileset dir="${lib.dir}/">
                <exclude name="**/servlet*.jar"/>
                <exclude name="**/xalan*.jar"/>
                <exclude name="**/${torque.zip}"/>
                <include name="**/*.jar"/>
            </fileset>
        </copy>

        <!-- the source code directory -->
        <copy todir="${build.src.scarab}/org" filtering="yes">
            <fileset dir="${src.java.dir.scarab}/org" defaultexcludes="no">
                <include name="**/*.java"/>
                <include name="**/*.properties"/>
                <include name="**/package.html"/>
                <exclude name="**/*Lucene*.java"/>
            </fileset>
        </copy>

        <!-- copy l18n stuff into classpath -->
        <mkdir dir="${build.dest.scarab}"/>
        <copy todir="${build.dest.scarab}" filtering="no">
            <fileset dir="${src.i18n.dir}">
                <include name="**/*.properties"/>
            </fileset>
        </copy>

        <!-- add Lucene code to source directory -->
        <antcall target="copy-lucene"/>
        
        <mkdir dir="${build.project}/logs"/>
    </target>

    <!-- ================================================================== -->
    <!-- Copies templates to WEB-INF directory, if specified                -->
    <!-- ================================================================== -->
    <target name="copy-templates" if="copy.templates">

        <copy todir="${build.project.webinf}/templates" filtering="no">
            <fileset dir="${src.templates.dir}" defaultexcludes="no"/>
        </copy>
    </target>
    <target name="check-requested-template-dir">
        <condition property="copy.templates">
            <not>
                <equals arg1="${templates.dir}" arg2="cvs"/>
            </not>
        </condition>
    </target>

    <!-- ================================================================== -->
    <!-- Adds Lucene adaptor code to source directory                       -->
    <!-- ================================================================== -->
    <target name="copy-lucene" depends="check_for_optional_packages"
        if="lucene.present">

        <copy todir="${build.src.scarab}/org" filtering="yes">
            <fileset dir="${src.java.dir.scarab}/org" defaultexcludes="no">
                <include name="**/*Lucene*.java"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Prepare Torque for action                                          -->
    <!-- ================================================================== -->
    <target name="torque-expanded-check">
        <!-- we can check that torque.zip is upToDate in order to know if
             the archive has already been expanded because it is expanded
             in the same target as it is copied to the directory -->
        <uptodate property="torque.is.expanded"
            targetfile="${build.src.scarab}/${torque.zip}">
            <srcfiles dir="${lib.dir}" includes="${torque.zip}"/>
        </uptodate>    
    </target>

    <target name="torque-init" depends="prepare,torque-expanded-check"
            unless="torque.is.expanded">
        <copy file="${lib.dir}/${torque.zip}" todir="${build.src.scarab}"/>
        <unzip  src="${build.src.scarab}/${torque.zip}"
               dest="${build.src.scarab}" />
        <copy todir="${build.project.webinf.lib}">
            <fileset dir="${torque.dir.scarab}/lib">
                <include name="torque*.jar"/>
            </fileset>
        </copy>
        <!-- removing sample schema that comes packaged with torque -->
        <delete file="${torque.dir.scarab}/schema/project-schema.xml"/>
        <filter token="DATABASE_PROP_NAME" value="${scarab.database.prop.name}"/>
        <filter token="DATABASE_NAME" value="${scarab.database.name}"/>
        <copy file="${src.sql.dir}/${project}-schema.xml" 
              todir="${torque.dir.scarab}/schema"
              filtering="true" overwrite="true"/>
        <copy file="${src.conf.dir}/torque.props" 
              tofile="${torque.dir.scarab}/build.properties"
              filtering="true" overwrite="true"/>
    </target>
 

    <!-- ================================================================== -->
    <!-- Generate SQL from Torque                                           -->
    <!-- ================================================================== -->
    <target name="schema-check">
        <echo message="checking: ${src.sql.dir}/mysql-${project}.sql"/>
        <uptodate property="schema.uptodate"
            targetfile="${src.sql.dir}/mysql-${project}.sql">
            <srcfiles dir="${src.sql.dir}" includes="scarab-schema.xml"/>
            <srcfiles dir="${user.home}" includes="build.properties"/>
            <srcfiles dir="${basedir}" includes="build.properties"/>
        </uptodate>
    </target>

    <target name="sql" depends="prepare-build-dir,schema-check,torque-init" 
            unless="schema.uptodate">
        <ant antfile="build.xml"
                dir="${torque.dir.scarab}" target="project-sql" inheritAll="false">
            <property name="torque.home" value="${torque.dir.scarab}"/>
            <property name="lib.dir" value="${build.project.webinf.lib}"/>
            <property name="build.properties" value="${torque.dir.scarab}/build.properties"/>
        </ant>

        <move file="${src.sql.dir}/${project}-schema.sql"
            tofile="${src.sql.dir}/mysql-${project}.sql"/>
    </target>


    <!-- ================================================================== -->
    <!-- Create DB from Torque                                              -->
    <!-- ================================================================== -->
    <target name="create-db" depends="sql">
        <!-- torque requires the db handle and actual name to be the same, which creates
             some problems with dependencies (fulcrum)
        <ant antfile="build.xml"
                dir="${torque.dir.scarab}" target="project-create-db" 
                inheritAll="false">
            <property name="torque.home" value="${torque.dir.scarab}"/>
            <property name="lib.dir" value="${build.project.webinf.lib}"/>
            <property name="build.properties" 
                value="${torque.dir.scarab}/build.properties"/>
        </ant>
        -->

        <!-- use instead of the above -->
        <filter token="DATABASE_NAME" value="${scarab.database.name}"/>
        <copy file="${src.sql.dir}/create-mysql-db.sql" 
              todir="${build.src.scarab}"
              filtering="true" overwrite="true"/>
        <echo message="Connecting to mysql at ${scarab.database.host}:${scarab.database.port}/mysql"/>
        <sql
            driver="org.gjt.mm.mysql.Driver"
            url="jdbc:mysql://${scarab.database.host}:${scarab.database.port}/mysql"
            userid="${scarab.database.admin.username}"
            password="${scarab.database.admin.password}">
            <classpath refid="classpath"/>
            <transaction src="${build.src.scarab}/create-mysql-db.sql"/>
        </sql>
        <!-- populate with default and sample data -->
        <echo message="Connecting to mysql at ${scarab.database.host}:${scarab.database.port}/${scarab.database.name}"/>
        <sql
            driver="org.gjt.mm.mysql.Driver"
            url="jdbc:mysql://${scarab.database.host}:${scarab.database.port}/${scarab.database.name}"
            userid="${scarab.database.admin.username}"
            password="${scarab.database.admin.password}">
            <classpath refid="classpath"/>
            <transaction src="${src.sql.dir}/mysql-scarab.sql"/>
            <transaction src="${src.sql.dir}/mysql-turbine.sql"/>
            <transaction src="${src.sql.dir}/mysql-turbine-scheduler.sql"/>
            <transaction src="${src.sql.dir}/mysql-id-table-schema.sql"/>
            <transaction src="${src.sql.dir}/mysql-turbine-id-table-init.sql"/>
            <transaction src="${src.sql.dir}/mysql-scarab-id-table-init.sql"/>
            <transaction src="${src.sql.dir}/mysql-scarab-default-data.sql"/>
            <transaction src="${src.sql.dir}/mysql-scarab-sample-data.sql"/>
            <transaction src="${src.sql.dir}/mysql-scarab-security.sql"/>
        </sql>
    </target>

    <!-- ================================================================== -->
    <!-- Generate Data DTD from Torque                                      -->
    <!-- ================================================================== -->
    <target name="datadtd-check">
        <echo message="checking: ${src.sql.dir}/${project}-data.dtd"/>
        <uptodate property="datadtd.uptodate"
            targetfile="${src.sql.dir}/${project}-data.dtd">
            <srcfiles dir="${src.sql.dir}" includes="scarab-schema.xml"/>
        </uptodate>
    </target>

    <target name="datadtd" depends="datadtd-check,torque-init,compile"
            unless="datadtd.uptodate">
        <copy file="${src.sql.dir}/${project}-schema.xml"
              todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.conf.dir}/torque.props"
              overwrite="true" tofile="${torque.dir.scarab}/build.properties"/>
        <ant antfile="build.xml"
                dir="${torque.dir.scarab}" target="project-datadtd" inheritAll="false">
            <property name="torque.home" value="${torque.dir.scarab}"/>
            <property name="databaseName" value="default"/>
            <property name="lib.dir" value="${build.project.webinf.lib}"/>
            <property name="build.properties" value="${torque.dir.scarab}/build.properties"/>
        </ant>

        <move file="${src.java.dir.scarab}/${project}-data.dtd"
            tofile="${src.sql.dir}/${project}-data.dtd"/>
    </target>

    <!-- ================================================================== -->
    <!-- Generate SQL from data XML                                         -->
    <!-- ================================================================== -->
    <target name="datasql" depends="datadtd,compile">
        <copy file="${src.sql.dir}/${project}-schema.xml"
            todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.sql.dir}/${project}-data.xml"
            todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.sql.dir}/${project}-data.dtd"
            todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.conf.dir}/torque.props" overwrite="true"
            tofile="${torque.dir.scarab}/build.properties"/>
        <ant antfile="build.xml" dir="${torque.dir.scarab}"
            target="project-datasql" inheritAll="false">
            <property name="torque.home" value="${torque.dir.scarab}"/>
            <property name="lib.dir" value="${build.project.webinf.lib}"/>
            <property name="build.properties" value="${torque.dir.scarab}/build.properties"/>
        </ant>
        <move file="${src.java.dir.scarab}/${project}-data.sql"
            tofile="${src.sql.dir}/${project}-data.sql"/>
    </target>

    <!-- ================================================================== -->
    <!-- Generate OM/Peer classes from Torque                               -->
    <!-- ================================================================== -->
    <target name="generated-check" depends="prepare">
        <echo message="checking: ${torque.dir.scarab}/report.scarab.om.generation"/>
        <uptodate property="gen.uptodate"
            targetfile=
               "${torque.dir.scarab}/report.scarab.om.generation">
            <srcfiles dir="${src.sql.dir}" includes="scarab-schema.xml"/>
        </uptodate>
    </target>

    <target name="om-peer" depends="generated-check,torque-init,sql" 
            unless="gen.uptodate">

        <echo message="+------------------------------------------+"/>
        <echo message="|                                          |"/>
        <echo message="|        Building OM/Peer classes          |"/>
        <echo message="|                                          |"/>
        <echo message="+------------------------------------------+"/>
        <ant antfile="build.xml" dir="${torque.dir.scarab}" 
                target="project-om" inheritAll="false">
            <property name="torque.home" value="${torque.dir.scarab}"/>
            <property name="lib.dir" value="${build.project.webinf.lib}"/>
            <property name="build.properties" value="${torque.dir.scarab}/build.properties"/>
        </ant>

        <move todir="${build.src.scarab}/org/tigris/scarab/om" filtering="yes">
            <fileset dir="${src.java.dir.scarab}/org/tigris/scarab/om">
                <include name="**/Base*.java"/>
                <exclude name="**/BaseScarabObject.java"/>
                <include name="**/map/*MapBuilder.java"/>
                <include name="report.scarab.om.generation"/>
            </fileset>
        </move>

        <copy file="${src.java.dir.scarab}/report.scarab.om.generation" 
              overwrite="true" todir="${torque.dir.scarab}"/>

        <delete dir="${src.java.dir.scarab}/org/tigris/scarab/om/map"/>
    </target>

    <!-- ================================================================== -->
    <!-- Compiles the source directory                                      -->
    <!-- ================================================================== -->
    <target name="compile" depends="om-peer,prepare">
        <mkdir dir="${build.dest.scarab}"/>
        <javac srcdir="${build.src.scarab}"
            destdir="${build.dest.scarab}"
            excludes="**/package.html,torque/**"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}">

        <classpath refid="classpath"/>

        <classpath>
            <fileset dir="${build.project.webinf.lib}">
                <include name="**/torque*.jar"/>
            </fileset>
        </classpath>

        </javac>
    </target>

    <target name="compile-tests" depends="compile">
        <javac srcdir="${src.test.dir}"
            destdir="${build.dest.scarab}"
            excludes="**/package.html,torque/**"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}">

        <classpath refid="classpath"/>

        <classpath>
            <fileset dir="${build.project.webinf.lib}">
                <include name="**/torque*.jar"/>
            </fileset>
        </classpath>

        </javac>
    </target>

    <!-- ================================================================== -->
    <!-- Runs the test suite                                                -->
    <!-- ================================================================== -->
    <target name="tests" depends="compile-tests">
        <exec executable="ant" dir="${basedir}">
            <arg line="-buildfile run-tests.xml"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- jars the source directory                                          -->
    <!-- ================================================================== -->
    <target name="jarsrc" depends="prepare">
        <jar jarfile="${build.dir}/${final.name}.src.jar"
            basedir="${build.src.scarab}"
            excludes="**/package.html"/>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Tomcat easily                               -->
    <!-- ================================================================== -->
    <target name="upgrade-tomcat">
        <copy todir="${tomcat.dist.dir}/bin" filtering="no">
            <fileset dir="${tomcat.cvs.dir}/build/bin"/>
        </copy>
        <copy todir="${tomcat.dist.dir}/common/lib" filtering="no">
            <fileset dir="${tomcat.cvs.dir}/build/common/lib">
                <include name="**/naming-common.jar"/>
                <include name="**/naming-resources.jar"/>
                <include name="**/servlet.jar"/>
            </fileset>
       </copy>
       <copy todir="${tomcat.dist.dir}/lib" filtering="no">
            <fileset dir="${tomcat.cvs.dir}/build/lib">
                <include name="**/naming-factory.jar"/>
            </fileset>
        </copy>
        <copy todir="${tomcat.dist.dir}/server/lib" filtering="no">
            <fileset dir="${tomcat.cvs.dir}/build/server/lib">
                <include name="**/servlets-common.jar"/>
                <include name="**/servlets-default.jar"/>
                <include name="**/servlets-invoker.jar"/>
                <include name="**/servlets-manager.jar"/>
                <include name="**/catalina.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Turbine easily                                -->
    <!-- ================================================================== -->
    <target name="build-turbine">
        <exec executable="ant" dir="${turbine.dir}">
            <arg line="clean"/>
        </exec>
        <exec executable="ant" dir="${turbine.dir}">
            <arg line="install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Torque easily                                 -->
    <!-- ================================================================== -->
    <target name="build-torque">
        <exec executable="ant" dir="${torque.dir}">
            <arg line="clean"/>
        </exec>
        <exec executable="ant" dir="${torque.dir}">
            <arg line="dist-lite"/>
        </exec>
        <exec executable="ant" dir="${torque.dir}">
            <arg line="install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Fulcrum easily                                -->
    <!-- ================================================================== -->
    <target name="build-fulcrum">
        <exec executable="ant" dir="${fulcrum.dir}">
            <arg line="clean"/>
        </exec>
        <exec executable="ant" dir="${fulcrum.dir}">
            <arg line="-Dsecurity.database.name=${scarab.database.prop.name} -Dscheduler.database.name=${scarab.database.prop.name} install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Flux easily                                   -->
    <!-- ================================================================== -->
    <target name="build-flux">
        <exec executable="ant" dir="${flux.dir}">
            <arg line="clean"/>
        </exec>
        <exec executable="ant" dir="${flux.dir}">
            <arg line="install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Commons-Collections easily                    -->
    <!-- There is a dependency on stuff in here in fulcrum                  -->
    <!-- ================================================================== -->
    <target name="build-commons-collections">
        <exec executable="ant" dir="${commons-collections.dir}">
            <arg line="clean"/>
        </exec>
        <exec executable="ant" dir="${commons-collections.dir}">
            <arg line="dist"/>
        </exec>
        <copy todir="${lib.repo}">
            <fileset dir="${commons-collections.dir}">
                <include name="**/commons-collections*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Commons-Sandbox-Util easily                   -->
    <!-- There is a dependency on stuff in here in fulcrum                  -->
    <!-- ================================================================== -->
    <target name="build-commons-sandbox-util">
        <exec executable="ant" dir="${commons-sandbox-util.dir}">
            <arg line="clean"/>
        </exec>
        <exec executable="ant" dir="${commons-sandbox-util.dir}">
            <arg line="install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Commons-Sandbox-Email easily                  -->
    <!-- ================================================================== -->
    <target name="build-commons-sandbox-email">
        <exec executable="ant" dir="${commons-sandbox-email.dir}">
            <arg line="clean"/>
        </exec>
        <exec executable="ant" dir="${commons-sandbox-email.dir}">
            <arg line="install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Turbine easily                              -->
    <!-- ================================================================== -->
    <target name="upgrade-turbine" depends="build-turbine">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/turbine*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${turbine.dir}/bin">
                <include name="**/turbine*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Torque easily                               -->
    <!-- ================================================================== -->
    <target name="upgrade-torque" depends="build-torque">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/${torque.zip}"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${torque.dir}/bin">
                <include name="**/${torque.zip}"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Fulcrum easily                              -->
    <!-- ================================================================== -->
    <target name="upgrade-fulcrum" depends="build-fulcrum">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/fulcrum*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${fulcrum.dir}/bin">
                <include name="**/fulcrum*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Flux easily                                 -->
    <!-- ================================================================== -->
    <target name="upgrade-flux" depends="build-flux">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/flux*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${flux.dir}/bin">
                <include name="**/flux*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Commons-Collections easily                  -->
    <!-- ================================================================== -->
    <target name="upgrade-commons-collections" depends="build-commons-collections">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/commons-collections*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${commons-collections.dir}/dist">
                <include name="**/commons-collections*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Commons-Sandbox-Util easily                 -->
    <!-- ================================================================== -->
    <target name="upgrade-commons-sandbox-util" depends="build-commons-sandbox-util">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/commons-util*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${commons-sandbox-util.dir}">
                <include name="**/commons-util*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Commons-Sandbox-Email easily                -->
    <!-- ================================================================== -->
    <target name="upgrade-commons-sandbox-email" depends="build-commons-sandbox-email">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/commons-email*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${commons-sandbox-email.dir}">
                <include name="**/commons-email*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our dependencies easily                                    -->
    <!-- These are in dependency order for themselves                       -->
    <!-- ================================================================== -->
    <target name="upgrade-jakarta" 
            depends="upgrade-commons-collections,
                     upgrade-commons-sandbox-util,
                     upgrade-commons-sandbox-email,
                     upgrade-torque,upgrade-fulcrum,
                     upgrade-turbine,upgrade-flux
                     ">
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our cvs dependencies easily                                -->
    <!-- ================================================================== -->
    <target name="upgrade-jakarta-cvs">
        <echo>${fulcrum.dir}</echo>
        <cvs dest="${fulcrum.dir}" command="update"/>
        <echo>${torque.dir}</echo>
        <cvs dest="${torque.dir}" command="update"/>
        <echo>${turbine.dir}</echo>
        <cvs dest="${turbine.dir}" command="update"/>
        <echo>${flux.dir}</echo>
        <cvs dest="${flux.dir}" command="update"/>
        <echo>${commons-sandbox-util.dir}</echo>
        <cvs dest="${commons-sandbox-util.dir}" command="update"/>
        <echo>${commons-sandbox-email.dir}</echo>
        <cvs dest="${commons-sandbox-email.dir}" command="update"/>
    </target>

    <!-- ================================================================== -->
    <!-- Creates the API documentation                                      -->
    <!-- ================================================================== -->
    <target name="javadocs" depends="prepare">
        <mkdir dir="${javadoc.destdir}"/>
        <javadoc
            sourcepath="${build.src.scarab}"
            packagenames="org.tigris.scarab.*"
            destdir="${javadoc.destdir}"
            author="true"
            private="true"
            version="true"
            use="true"
            windowtitle="${Name} ${version} API"
            doctitle="${Name} ${version} API"
          bottom="Copyright &amp;copy; ${year} CollabNet. All Rights Reserved."
        >
            <classpath refid="classpath"/>
            <classpath>
                <fileset dir="${build.project.webinf.lib}">
                    <include name="**/torque*.jar"/>
                </fileset>
            </classpath>
        </javadoc>
    </target>

    <!-- ================================================================== -->
    <!-- Creates the Usecase documentation                                  -->
    <!-- ================================================================== -->
    <target name="usecases" depends="prepare">
        <ant antfile="build.xml" 
                dir="${src.usecases.dir}" target="docs">
        </ant>
    </target>
    
    <!-- ================================================================== -->
    <!-- Cleans up the build directory                                      -->
    <!-- ================================================================== -->
    <target name="clean" depends="prepare-build-dir">
        <delete dir="${build.project}"/>
    </target>
    <target name="clean-all" depends="prepare-build-dir">
        <delete dir="${build.dir}"/>
        <delete>
            <fileset dir="..">
                <include name="${final.name}*"/>
            </fileset>
        </delete>
    </target>

    <!-- ================================================================== -->
    <!-- Package (creates a .zip and .tar.gz)                               -->
    <!-- ================================================================== -->
    <target name="package" depends="package-zip,package-tgz">
    </target>

    <!-- ================================================================== -->
    <!-- Packages the distribution with ZIP                                 -->
    <!-- ================================================================== -->
    <target name="package-zip" depends="dist">
        <delete file="../${final.name}.zip"/>
        <zip zipfile="../${final.name}.zip" 
             basedir="../" includes="**/${final.name}/**"/>
    </target>

    <!-- ================================================================== -->
    <!-- Packages the distribution with TAR-GZIP                            -->
    <!-- ================================================================== -->
    <target name="package-tgz" depends="dist">
        <delete file="../${final.name}.tar"/>
        <delete file="../${final.name}.tar.gz"/>
        <tar longfile="gnu" tarfile="../${final.name}.tar" 
             basedir="../" includes="**/${final.name}/**"/>
        <gzip zipfile="../${final.name}.tar.gz" 
                  src="../${final.name}.tar"/>
        <delete file="../${final.name}.tar"/>
    </target>

    <!-- ================================================================== -->
    <!-- Creates the Binary distribution directory                          -->
    <!-- ================================================================== -->
    <target name="dist" depends="clean-all,compile,javadocs">
        <delete dir="${build.src.scarab}"/>

        <jar 
          jarfile="${build.project.webinf.lib}/${final.name}.jar"
          basedir="${build.dest.scarab}"
          excludes="**/package.html"/>

        <delete dir="${build.dest.scarab}"/>

        <mkdir dir="${final.dir}"/>
        <copy todir="${final.dir}">
            <fileset dir="${build.dir}">
                <exclude name="**/appData.ser"/>
            </fileset>
        </copy>

        <copy todir="${final.dir}">
            <fileset dir="../">
                <include name="LICENSE.txt"/>
                <include name="README.txt"/>
                <include name="WIN32.txt"/>
            </fileset>
        </copy>

        <chmod dir="${final.dir}" perm="ug+rx" includes="**/*.sh" />
    </target>

<!-- ============================================================= -->
<!-- Targets beyond this point are currently considered broken or  -->
<!-- experimental - User Beware!                                  -->
<!-- ============================================================= -->

    <!-- ================================================================== -->
    <!-- Tool to create proper import statements                            -->
    <!-- ==================================================================
    <target name="scrub" depends="om-peer,prepare">
        <taskdef name="scrub" 
          classname="org.apache.tools.ant.taskdefs.optional.importscrubber.ImportScrubberTask"/>

        <property name="tmp.dir" value="tmp"/>

        <delete dir="${tmp.dir}" quiet="true"/>

        <copy todir="${tmp.dir}/org">
          <fileset dir="${build.src.scarab}/org"/>
        </copy>

        <javac srcdir="${tmp.dir}"
            destdir="${tmp.dir}"
            excludes="**/package.html,torque/**"
            debug="true">

          <classpath refid="classpath"/>

          <classpath>
            <fileset dir="${build.project.webinf.lib}">
              <include name="**/torque*.jar"/>
            </fileset>
          </classpath>
        </javac>
        
        <scrub root="${tmp.dir}" format="nobreaks" recurse="true"/>

        <delete>
          <fileset dir="${tmp.dir}" includes="**/*.class"/>
        </delete>

        <copy todir="${src.java.dir.scarab}/org" overwrite="true">
          <fileset dir="${tmp.dir}/org"/>
        </copy>

    </target>
    -->

    <!-- ================================================================== -->
    <!-- Dump data from DB into xml                                         -->
    <!-- ================================================================== -->
    <target name="datadump" depends="compile">
        <copy file="${src.sql.dir}/${project}-schema.xml"
            todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.conf.dir}/torque.props" overwrite="true"
            tofile="${torque.dir.scarab}/build.properties"/>
        <ant antfile="build.xml" dir="${torque.dir.scarab}"
            target="project-datadump">
            <property name="torque.home" value="${torque.dir.scarab}"/>
        </ant>
        <move file="${src.java.dir.scarab}/${project}-default-all-data.xml"
            tofile="${src.sql.dir}/${project}-default-all-data.xml"/>
    </target>

</project>

