<?xml version="1.0"?>

<!-- Build file for Scarab -->

<project name="Scarab" default="compile" basedir=".">

    <!-- Give user a chance to override without editing this file
        (and without typing -D each time it compiles it -->
    <property file="${user.home}/.ant.properties" />
    <property file=".ant.properties" />

    <property name="Name" value="Scarab"/>
    <property name="version" value="1.0-dev"/>
    <property name="project" value="scarab"/>
    <property name="final.name" value="${project}-${version}"/>
    <property name="final.dir" value="${basedir}/../${final.name}/"/>

    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="off"/>

    <property name="ant.home" value="."/>
    <property name="year" value="2000-2001"/>

    <property name="build.dir.default" value="${basedir}/../target"/>

    <property name="turbine.dir" value="${basedir}/../../jakarta-turbine"/>
    <property name="turbine.latest.jar" 
            value="turbine-2.1-dev-unreleased.jar"/>
    <property name="torque.zip" value="torque.zip"/>
    <property name="src.dir" value="${basedir}/../src"/>
    <property name="src.conf.dir" value="${src.dir}/conf"/>
    <property name="src.html.dir" value="${src.dir}/html"/>
    <property name="src.images.dir" value="${src.dir}/images"/>
    <property name="src.java.dir.scarab" value="${src.dir}/java"/>
    <property name="src.lib.dir" value="${basedir}/../lib"/>
    <property name="src.sql.dir" value="${src.dir}/sql"/>
    <property name="src.templates.dir" value="${src.dir}/templates"/>
    <property name="tomcat.dist.dir" value="${src.dir}/tomcat-4.0"/>


    <!-- Build classpath -->
    <path id="classpath">
        <fileset dir="${src.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- ================================================================== -->
    <!-- Prepares the Build directory properties                            -->
    <!-- ================================================================== -->
    <target name="pre-prepare-build.dir" unless="build.dir.scarab">
        <property name="build.dir.scarab" value="${build.dir.default}"/>
        <property name="prepare-tomcat-true" value="yes"/>
    </target>
    <target name="prepare-build.dir" depends="pre-prepare-build.dir">
        <property name="build.webapps" value="${build.dir.scarab}/webapps"/>
        <property name="build.project" value="${build.webapps}/${project}"/>
        <property name="build.project.webinf" value="${build.project}/WEB-INF"/>
        <property name="build.src.scarab" value="${build.project.webinf}/src"/>
        <property name="build.dest.scarab"
                 value="${build.project.webinf}/classes"/>
        <property name="torque.dir.scarab" value="${build.src.scarab}/torque"/>
        <property name="javadoc.destdir" value="${build.project}/docs"/>
    </target>


    <!-- ================================================================== -->
    <!-- Prepares the Tomcat directory                                      -->
    <!-- ================================================================== -->
    <target name="prepare-tomcat" if="prepare-tomcat-true" 
         depends="prepare-build.dir">

        <echo message="Build Dir: ${build.dir.scarab}"/>
        <mkdir dir="${build.dir.scarab}"/>

        <!-- copy over tomcat -->
        <copy todir="${build.dir.scarab}" filtering="no">
            <fileset dir="${tomcat.dist.dir}/"/>
        </copy>

        <chmod dir="${build.dir.scarab}" perm="ug+rx" includes="**/*.sh" />

        <mkdir dir="${build.dir.scarab}/logs"/>
        <mkdir dir="${build.dir.scarab}/work"/>
        <mkdir dir="${build.dir.scarab}/webapps"/>
    </target>

    <!-- ================================================================== -->
    <!-- Prepares the build directory                                       -->
    <!-- ================================================================== -->
    <target name="prepare" depends="prepare-tomcat, prepare-build.dir">

        <!-- things to go into the project directory -->
        <copy todir="${build.project}" filtering="no">
            <fileset dir="${src.html.dir}">
                <include name="**/*.html"/>
                <include name="**/*.css"/>
            </fileset>
        </copy>
        <copy todir="${build.project}/images" filtering="no">
            <fileset dir="${src.images.dir}" defaultexcludes="no"/>
        </copy>
        <copy todir="${build.project}/templates" filtering="no">
            <fileset dir="${src.templates.dir}" defaultexcludes="no"/>
        </copy>
        <copy todir="${build.project.webinf}" filtering="no">
            <fileset dir="${src.conf.dir}/">
                <include name="web.xml"/>
            </fileset>
        </copy>

        <!-- things to go into the web-inf directory -->
        <copy todir="${build.project.webinf}/conf" filtering="no">
            <fileset dir="${src.conf.dir}/" defaultexcludes="no">
                <include name="*.properties"/>
                <include name="*.xml"/>
            </fileset>
        </copy>
        <copy todir="${build.project.webinf}/lib" filtering="no">
            <fileset dir="${src.lib.dir}/">
                <exclude name="**/servlet*.jar"/>
                <exclude name="**/stylebook*.jar"/>
                <exclude name="**/torque.zip"/>
                <include name="**/*.jar"/>
            </fileset>
        </copy>

        <!-- the source code directory -->
        <copy todir="${build.src.scarab}/org" filtering="yes">
            <fileset dir="${src.java.dir.scarab}/org" defaultexcludes="no">
                <include name="**/*.java"/>
                <include name="**/*.properties"/>
                <include name="**/package.html"/>
            </fileset>
        </copy>
        
        <mkdir dir="${build.project}/logs"/>
    </target>


    <!-- ================================================================== -->
    <!-- Build Turbine and Torque if CVS is available                       -->
    <!-- ================================================================== -->
    <target name="check-for-turbine">
        <available property="turbine.cvs.available" 
            file="${turbine.dir}/build/build-turbine.xml"/>
    </target>

    <target name="prepare-turbine" depends="check-for-turbine" 
            if="turbine.cvs.available">

        <echo message="checking: ${src.lib.dir}/${turbine.latest.jar}"/>
        <uptodate property="turbine.jar.uptodate"
            targetfile="${src.lib.dir}/${turbine.latest.jar}">
            <srcfiles dir="${turbine.dir}/src/java" includes="**/*.java"/>
        </uptodate>

        <echo message="checking: ${src.lib.dir}/${torque.zip}"/>
        <uptodate property="torque.uptodate"
            targetfile="${src.lib.dir}/${torque.zip}">
            <srcfiles dir="${turbine.dir}/conf/torque" includes="**/*"/>
            <srcfiles dir="${turbine.dir}/src/java/org/apache/turbine/torque" 
                      includes="**/*.java"/>
        </uptodate>
    </target>

    <target name="skip-turbine" depends="check-for-turbine" 
            unless="turbine.cvs.available">
        <property name="turbine.jar.uptodate" value="true"/>
        <property name="torque.uptodate" value="true"/>
    </target>

    <target name="build-turbine" depends="skip-turbine, prepare-turbine"
            unless="turbine.jar.uptodate">
        <echo message="+------------------------------------------+"/>
        <echo message="|                                          |"/>
        <echo message="|     Rebuilding Turbine CVS Version       |"/>
        <echo message="|                                          |"/>
        <echo message="+------------------------------------------+"/>
        <ant antfile="build-turbine.xml" 
                dir="${turbine.dir}/build" target="jar">
            <property name="version" value="2.1-dev-unreleased"/>
            <property name="project" value="turbine"/>
            <property name="final.name" value="turbine-2.1-dev-unreleased"/>
            <property name="src.dir" value="${turbine.dir}/src"/>
        </ant>
        <copy file="${turbine.dir}/bin/${turbine.latest.jar}" overwrite="true"
            todir="${src.lib.dir}"/>
    </target>

    <target name="build-torque"  depends="prepare-turbine,skip-turbine"
            unless="torque.uptodate">
        <echo message="+------------------------------------------+"/>
        <echo message="|                                          |"/>
        <echo message="|      Rebuilding Torque CVS Version       |"/>
        <echo message="|                                          |"/>
        <echo message="+------------------------------------------+"/>
        <ant antfile="build-torque.xml" 
                dir="${turbine.dir}/build" target="main">
            <property name="build.dir" value="../bin"/>
            <property name="build.dest" value="../bin/classes"/>
        </ant>
        <copy file="${turbine.dir}/bin/torque.zip" todir="${src.lib.dir}"/>
    </target>

    <target name="torque-expanded-check" depends="build-torque">
        <!-- we can check that torque.zip is upToDate in order to know if
             the archive has already been expanded because it is expanded
             in the same target as it is copied to the directory -->
        <uptodate property="torque.is.expanded"
            targetfile="${build.src.scarab}/torque.zip">
            <srcfiles dir="${src.lib.dir}" includes="torque.zip"/>
        </uptodate>    
    </target>

    <target name="torque-init" depends="torque-expanded-check"
            unless="torque.is.expanded">
        <copy file="${src.lib.dir}/torque.zip" todir="${build.src.scarab}"/>
        <unzip src="${build.src.scarab}/torque.zip" 
                dest="${build.src.scarab}" />
    </target>

    <!-- ================================================================== -->
    <!-- Generate SQL from Torque                                           -->
    <!-- ================================================================== -->
    <target name="schema-check">
        <echo message="checking: ${src.sql.dir}/mysql-${project}.sql"/>
        <uptodate property="schema.uptodate"
            targetfile="${src.sql.dir}/mysql-${project}.sql">
            <srcfiles dir="${src.sql.dir}" includes="scarab-schema.xml"/>
        </uptodate>
    </target>

    <target name="sql" depends="schema-check,torque-init" 
            unless="schema.uptodate">
        <copy file="${src.sql.dir}/${project}-schema.xml" 
              todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.conf.dir}/torque.props" 
              overwrite="true" todir="${torque.dir.scarab}/config"/>
        <ant antfile="torque.xml" 
                dir="${torque.dir.scarab}" target="project-sql">
            <property name="torque.home" value="${torque.dir.scarab}"/>
        </ant>

        <move file="${src.java.dir.scarab}/${project}-schema.sql" 
            tofile="${src.sql.dir}/mysql-${project}.sql"/>
    </target>

    <!-- ================================================================== -->
    <!-- Generate OM/Peer classes from Torque                               -->
    <!-- ================================================================== -->
    <target name="generated-check" depends="prepare-build.dir">
        <echo message="checking: 
            ${torque.dir.scarab}/report.scarab.om.generation"/>
        <uptodate property="gen.uptodate"
            targetfile=
               "${torque.dir.scarab}/report.scarab.om.generation">
            <srcfiles dir="${src.sql.dir}" includes="scarab-schema.xml"/>
        </uptodate>
    </target>

    <target name="om-peer" depends="generated-check,torque-init,sql" 
            unless="gen.uptodate">

        <echo message="+------------------------------------------+"/>
        <echo message="|                                          |"/>
        <echo message="|        Building OM/Peer classes          |"/>
        <echo message="|                                          |"/>
        <echo message="+------------------------------------------+"/>
        <copy file="${src.sql.dir}/${project}-schema.xml" 
              todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.conf.dir}/torque.props" 
              overwrite="true" todir="${torque.dir.scarab}/config"/>
        <ant antfile="torque.xml" dir="${torque.dir.scarab}" 
                target="project-om">
            <property name="torque.home" value="${torque.dir.scarab}"/>
        </ant>

        <copy todir="${build.src.scarab}/org" filtering="yes">
            <fileset dir="${src.java.dir.scarab}/org">
                <include name="**/Base*.java"/>
                <exclude name="**/BaseScarabObject.java"/>
                <include name="**/map/*MapBuilder.java"/>
            </fileset>
        </copy>

        <copy file="${src.java.dir.scarab}/report.scarab.om.generation" 
              overwrite="true" todir="${torque.dir.scarab}"/>

        <delete>
            <fileset dir="${src.java.dir.scarab}">
                <include name="**/Base*.java"/>
                <exclude name="**/BaseScarabObject.java"/>
                <include name="**/map/*MapBuilder.java"/>
                <include name="report.scarab.om.generation"/>
            </fileset>
        </delete>
        <delete dir="${src.java.dir.scarab}/org/tigris/scarab/om/map"/>
    </target>


    <!-- ================================================================== -->
    <!-- Compiles the source directory                                      -->
    <!-- ================================================================== -->
    <target name="compile" depends="build-turbine,om-peer,prepare">
        <mkdir dir="${build.dest.scarab}"/>
        <javac srcdir="${build.src.scarab}"
            destdir="${build.dest.scarab}"
            excludes="**/package.html,torque/**"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}">

            <classpath refid="classpath"/>
        </javac>
    </target>

    <!-- ================================================================== -->
    <!-- jars the source directory                                          -->
    <!-- ================================================================== -->
    <target name="jarsrc" depends="prepare">
        <jar jarfile="${build.dir.scarab}/${final.name}.src.jar"
            basedir="${build.src.scarab}"
            excludes="**/package.html"/>
    </target>

    <!-- ================================================================== -->
    <!-- Creates the API documentation                                      -->
    <!-- ================================================================== -->
    <target name="javadocs" depends="prepare">
        <mkdir dir="${javadoc.destdir}"/>
        <javadoc
            sourcepath="${build.src.scarab}"
            packagenames="org.tigris.scarab.*"
            destdir="${javadoc.destdir}"
            author="true"
            private="true"
            version="true"
            use="true"
            windowtitle="${Name} ${version} API"
            doctitle="${Name} ${version} API"
          bottom="Copyright &amp;copy; ${year} CollabNet. All Rights Reserved."
        >
            <classpath refid="classpath"/>
    </javadoc>
    </target>

    <!-- ================================================================== -->
    <!-- Package                                                            -->
    <!-- ================================================================== -->
    <!--
    <target name="package" depends="javadocs">
        <mkdir dir="${final.dir}"/>
        <mkdir dir="${final.dir}/src/java"/>

        <copy todir="${final.dir}/src/java">
            <fileset dir="${build.dir.scarab}/src"/>
        </copy>

        <copy todir="${final.dir}/build">
            <fileset dir="../build"/>
        </copy>

        <copy todir="${final.dir}/lib">
            <fileset dir="../lib"/>
        </copy>

        <copy file="${build.dir.scarab}/${final.name}.jar" 
            tofile="${final.dir}/${final.name}.jar"/>
    </target>
    -->

    <!-- ================================================================== -->
    <!-- Packages the distribution with ZIP                                 -->
    <!-- ================================================================== -->
    <!--
    <target name="package-zip" depends="package">
        <delete file="../${Name}-${version}.zip"/>
        <zip zipfile="../${Name}-${version}.zip" 
             basedir="../" includes="**/${final.name}/**"/>
    </target>
    -->

    <!-- ================================================================== -->
    <!-- Packages the distribution with TAR-GZIP                            -->
    <!-- ================================================================== -->
    <!--
    <target name="package-tgz" depends="package">
        <delete file="../${Name}-${version}.tar"/>
        <delete file="../${Name}-${version}.tar.gz"/>
        <tar tarfile="../${Name}-${version}.tar" 
             basedir="../" includes="**/${final.name}/**"/>
        <gzip zipfile="../${Name}-${version}.tar.gz" 
                  src="../${Name}-${version}.tar"/>
    </target>
    -->

    <!-- ================================================================== -->
    <!-- Packages the distribution with ZIP and TAG-GZIP                    -->
    <!-- ================================================================== -->
    <!--
    <target name="package-all" depends="package-zip, package-tgz">
    </target>
    -->

    <!-- ================================================================== -->
    <!-- Same as package-all. It is just here for compatibility.            -->
    <!-- ================================================================== -->
    <!--
    <target name="dist" depends="package-all">
    </target>
    -->
    
    <!-- ================================================================== -->
    <!-- Cleans up the build directory                                      -->
    <!-- ================================================================== -->
    <target name="clean" depends="prepare-build.dir">
        <delete dir="${build.project}"/>
    </target>
    <target name="clean-all" depends="prepare-build.dir">
        <delete dir="${build.dir.scarab}"/>
    </target>

</project>



