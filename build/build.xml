<?xml version="1.0"?>

<!-- Build file for Scarab -->

<project name="Scarab" default="compile" basedir=".">

    <!-- Give user a chance to override without editing this file
        (and without typing -D each time it compiles it -->
    <property file="${user.home}/build.properties" />
    <property file="${basedir}/build.properties" />
    <property file="${user.home}/.ant.properties" />
    <property file="${basedir}/.ant.properties" />

    <property name="ant.home" value="."/>

    <property name="final.name" value="${project}-${version}"/>
    <property name="final.dir" value="${basedir}/../${final.name}/"/>
            
    <property name="src.dir" value="${basedir}/../src"/>
    <property name="src.conf.dir" value="${src.dir}/conf"/>
    <property name="src.html.dir" value="${src.dir}/html"/>
    <property name="src.images.dir" value="${src.dir}/images"/>
    <property name="src.java.dir.scarab" value="${src.dir}/java"/>
    <property name="src.sql.dir.scarab" value="${src.dir}/sql"/>
    <property name="src.sql.dir" value="${src.dir}/sql"/>
    <property name="src.templates.dir" value="${src.dir}/templates"/>
    <property name="src.resources.dir" value="${src.dir}/resources"/>
    <property name="src.usecases.dir" value="${src.dir}/usecases"/>

    <property name="lib.dir" value="${basedir}/../lib"/>

    <property name="tomcat.dist.dir" value="${src.dir}/tomcat-4.0"/>
    <property name="tomcat.cvs.dir" value="../../jakarta-tomcat-4.0"/>

    <property name="build.webapps" value="${build.dir}/webapps"/>
    <property name="build.project" value="${build.webapps}/${project}"/>
    <property name="build.project.webinf" value="${build.project}/WEB-INF"/>
    <property name="build.src.scarab" value="${build.project.webinf}/src"/>
    <property name="build.dest.scarab"
             value="${build.project.webinf}/classes"/>
    <property name="torque.dir.scarab" value="${build.src.scarab}/torque"/>
    <property name="javadoc.destdir" value="${build.project}/docs"/>

    <!-- Build classpath -->
    <path id="classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${basedir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- ================================================================== -->
    <!-- Prepares the Build directory                                       -->
    <!-- ================================================================== -->
    <target name="prepare-build-dir">

        <echo message="Build Dir: ${build.dir}"/>
        <mkdir dir="${build.dir}"/>

    </target>

    <!-- ================================================================== -->
    <!-- Prepares the Tomcat directory                                      -->
    <!-- ================================================================== -->
    <target name="prepare-tomcat" depends="prepare-build-dir">

        <!-- copy over tomcat -->
        <copy todir="${build.dir}" filtering="no">
            <fileset dir="${tomcat.dist.dir}/"/>
        </copy>

        <chmod dir="${build.dir}" perm="ug+rx" includes="**/*.sh" />

        <mkdir dir="${build.dir}/logs"/>
        <mkdir dir="${build.dir}/work"/>
        <mkdir dir="${build.dir}/webapps"/>
    </target>

    <!-- ================================================================== -->
    <!-- Check to see what optional dependencies are available              -->
    <!-- ================================================================== -->
    <target name="check_for_optional_packages">
        <available property="lucene.present"
                   classname="com.lucene.document.Document">
            <classpath refid="classpath"/>
        </available>
        <available property="junit.present"
           classname="junit.framework.TestCase">
            <classpath refid="classpath"/>
        </available>
    </target>

    <!-- ================================================================== -->
    <!-- Prepares the build directory                                       -->
    <!-- ================================================================== -->
    <target name="prepare" depends="prepare-tomcat">

        <!-- things to go into the project directory -->
        <copy todir="${build.project}" filtering="no">
            <fileset dir="${src.html.dir}" defaultexcludes="no">
                <include name="**/*.html"/>
                <include name="**/*.css"/>
            </fileset>
        </copy>
        <copy todir="${build.project}/images" filtering="no">
            <fileset dir="${src.images.dir}" defaultexcludes="no"/>
        </copy>
        <copy todir="${build.project}/templates" filtering="no">
            <fileset dir="${src.templates.dir}" defaultexcludes="no"/>
        </copy>
        <copy todir="${build.project}/resources" filtering="no">
            <fileset dir="${src.resources.dir}" defaultexcludes="no"/>
        </copy>
        <copy todir="${build.project.webinf}" filtering="no">
            <fileset dir="${src.conf.dir}/">
                <include name="web.xml"/>
            </fileset>
        </copy>

        <!-- things to go into the web-inf directory -->
        <copy todir="${build.project.webinf}/conf" filtering="no">
            <fileset dir="${src.conf.dir}/" defaultexcludes="no">
                <include name="*.properties"/>
                <include name="*.xml"/>
            </fileset>
        </copy>
        <copy todir="${build.project.webinf}/lib" filtering="no">
            <fileset dir="${lib.dir}/">
                <exclude name="**/servlet*.jar"/>
                <exclude name="**/stylebook*.jar"/>
                <exclude name="**/torque.zip"/>
                <include name="**/*.jar"/>
            </fileset>
        </copy>

        <!-- the source code directory -->
        <copy todir="${build.src.scarab}/org" filtering="yes">
            <fileset dir="${src.java.dir.scarab}/org" defaultexcludes="no">
                <include name="**/*.java"/>
                <include name="**/*.properties"/>
                <include name="**/package.html"/>
                <exclude name="**/*Lucene*.java"/>
            </fileset>
        </copy>
        <!-- add Lucene code to source directory -->
        <antcall target="copy-lucene"/>
        
        <mkdir dir="${build.project}/logs"/>
    </target>

    <!-- ================================================================== -->
    <!-- Adds Lucene adaptor code to source directory                       -->
    <!-- ================================================================== -->
    <target name="copy-lucene" depends="check_for_optional_packages"
        if="lucene.present">

        <copy todir="${build.src.scarab}/org" filtering="yes">
            <fileset dir="${src.java.dir.scarab}/org" defaultexcludes="no">
                <include name="**/*Lucene*.java"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Prepare Torque for action                                          -->
    <!-- ================================================================== -->
    <target name="torque-expanded-check">
        <!-- we can check that torque.zip is upToDate in order to know if
             the archive has already been expanded because it is expanded
             in the same target as it is copied to the directory -->
        <uptodate property="torque.is.expanded"
            targetfile="${build.src.scarab}/torque.zip">
            <srcfiles dir="${lib.dir}" includes="torque.zip"/>
        </uptodate>    
    </target>

    <target name="torque-init" depends="torque-expanded-check"
            unless="torque.is.expanded">
        <copy file="${lib.dir}/torque.zip" todir="${build.src.scarab}"/>
        <unzip src="${build.src.scarab}/torque.zip"
                dest="${build.src.scarab}" />
        <copy todir="${build.src.scarab}/torque/lib">
            <fileset dir="${lib.dir}">
                <include name="mm.mysql-*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Generate SQL from Torque                                           -->
    <!-- ================================================================== -->
    <target name="schema-check">
        <echo message="checking: ${src.sql.dir}/mysql-${project}.sql"/>
        <uptodate property="schema.uptodate"
            targetfile="${src.sql.dir}/mysql-${project}.sql">
            <srcfiles dir="${src.sql.dir}" includes="scarab-schema.xml"/>
        </uptodate>
    </target>

    <target name="sql" depends="prepare-build-dir,schema-check,torque-init" 
            unless="schema.uptodate">
        <copy file="${src.sql.dir}/${project}-schema.xml" 
              todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.conf.dir}/torque.props" 
              overwrite="true" tofile="${torque.dir.scarab}/build.properties"/>
        <ant antfile="build.xml"
                dir="${torque.dir.scarab}" target="project-sql">
            <property name="torque.home" value="${torque.dir.scarab}"/>
        </ant>

        <move file="${src.sql.dir.scarab}/${project}-schema.sql"
            tofile="${src.sql.dir}/mysql-${project}.sql"/>
    </target>

    <!-- ================================================================== -->
    <!-- Generate Data DTD from Torque                                      -->
    <!-- ================================================================== -->
    <target name="datadtd-check">
        <echo message="checking: ${src.sql.dir}/${project}-data.dtd"/>
        <uptodate property="datadtd.uptodate"
            targetfile="${src.sql.dir}/${project}-data.dtd">
            <srcfiles dir="${src.sql.dir}" includes="scarab-schema.xml"/>
        </uptodate>
    </target>

    <target name="datadtd" depends="datadtd-check,torque-init,compile"
            unless="datadtd.uptodate">
        <copy file="${src.sql.dir}/${project}-schema.xml"
              todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.conf.dir}/torque.props"
              overwrite="true" tofile="${torque.dir.scarab}/build.properties"/>
        <ant antfile="build.xml"
                dir="${torque.dir.scarab}" target="project-datadtd">
            <property name="torque.home" value="${torque.dir.scarab}"/>
            <property name="databaseName" value="default"/>
        </ant>

        <move file="${src.java.dir.scarab}/${project}-data.dtd"
            tofile="${src.sql.dir}/${project}-data.dtd"/>
    </target>

    <!-- ================================================================== -->
    <!-- Generate SQL from data XML                                         -->
    <!-- ================================================================== -->
    <target name="datasql" depends="datadtd,compile">
        <copy file="${src.sql.dir}/${project}-schema.xml"
            todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.sql.dir}/${project}-data.xml"
            todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.sql.dir}/${project}-data.dtd"
            todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.conf.dir}/torque.props" overwrite="true"
            tofile="${torque.dir.scarab}/build.properties"/>
        <ant antfile="build.xml" dir="${torque.dir.scarab}"
            target="project-datasql">
            <property name="torque.home" value="${torque.dir.scarab}"/>
        </ant>
        <move file="${src.java.dir.scarab}/${project}-data.sql"
            tofile="${src.sql.dir}/${project}-data.sql"/>
    </target>

    <!-- ================================================================== -->
    <!-- Generate OM/Peer classes from Torque                               -->
    <!-- ================================================================== -->
    <target name="generated-check" depends="prepare">
        <echo message="checking: ${torque.dir.scarab}/report.scarab.om.generation"/>
        <uptodate property="gen.uptodate"
            targetfile=
               "${torque.dir.scarab}/report.scarab.om.generation">
            <srcfiles dir="${src.sql.dir}" includes="scarab-schema.xml"/>
        </uptodate>
    </target>

    <target name="om-peer" depends="generated-check,torque-init,sql" 
            unless="gen.uptodate">

        <echo message="+------------------------------------------+"/>
        <echo message="|                                          |"/>
        <echo message="|        Building OM/Peer classes          |"/>
        <echo message="|                                          |"/>
        <echo message="+------------------------------------------+"/>
        <copy file="${src.sql.dir}/${project}-schema.xml" 
              todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.conf.dir}/torque.props" 
              overwrite="true" tofile="${torque.dir.scarab}/build.properties"/>
        <ant antfile="build.xml" dir="${torque.dir.scarab}" 
                target="project-om">
            <property name="torque.home" value="${torque.dir.scarab}"/>
        </ant>

        <copy todir="${build.src.scarab}/org" filtering="yes">
            <fileset dir="${src.java.dir.scarab}/org">
                <include name="**/Base*.java"/>
                <exclude name="**/BaseScarabObject.java"/>
                <include name="**/map/*MapBuilder.java"/>
            </fileset>
        </copy>

        <copy file="${src.java.dir.scarab}/report.scarab.om.generation" 
              overwrite="true" todir="${torque.dir.scarab}"/>

        <delete>
            <fileset dir="${src.java.dir.scarab}">
                <include name="**/Base*.java"/>
                <exclude name="**/BaseScarabObject.java"/>
                <include name="**/map/*MapBuilder.java"/>
                <include name="report.scarab.om.generation"/>
            </fileset>
        </delete>
        <delete dir="${src.java.dir.scarab}/org/tigris/scarab/om/map"/>
    </target>

    <!-- ================================================================== -->
    <!-- Compiles the source directory                                      -->
    <!-- ================================================================== -->
    <target name="compile" depends="om-peer,prepare">
        <mkdir dir="${build.dest.scarab}"/>
        <javac srcdir="${build.src.scarab}"
            destdir="${build.dest.scarab}"
            excludes="**/package.html,torque/**"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}">

            <classpath refid="classpath"/>
        </javac>
    </target>

    <!-- ================================================================== -->
    <!-- jars the source directory                                          -->
    <!-- ================================================================== -->
    <target name="jarsrc" depends="prepare">
        <jar jarfile="${build.dir}/${final.name}.src.jar"
            basedir="${build.src.scarab}"
            excludes="**/package.html"/>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Tomcat easily                               -->
    <!-- ================================================================== -->
    <target name="upgrade-tomcat">
        <copy todir="${tomcat.dist.dir}/bin" filtering="no">
            <fileset dir="${tomcat.cvs.dir}/build/bin"/>
        </copy>
        <copy todir="${tomcat.dist.dir}/common" filtering="no">
            <fileset dir="${tomcat.cvs.dir}/build/common"/>
        </copy>
        <copy todir="${tomcat.dist.dir}/lib" filtering="no">
            <fileset dir="${tomcat.cvs.dir}/build/lib">
                <include name="**/namingfactory.jar"/>
            </fileset>
        </copy>
        <copy todir="${tomcat.dist.dir}/server" filtering="no">
            <fileset dir="${tomcat.cvs.dir}/build/server">
                <exclude name="**/warp.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Turbine easily                                -->
    <!-- ================================================================== -->
    <target name="build-turbine">
        <exec executable="ant" dir="${turbine.dir}/build"/>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Torque easily                                -->
    <!-- ================================================================== -->
    <target name="build-torque">
        <exec executable="ant" dir="${torque.dir}/build">
            <arg line="dist"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Turbine easily                              -->
    <!-- ================================================================== -->
    <target name="upgrade-turbine" depends="build-turbine">
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${turbine.dir}/bin">
                <include name="**/turbine*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Torque easily                               -->
    <!-- ================================================================== -->
    <target name="upgrade-torque" depends="build-torque">
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${torque.dir}/bin">
                <include name="**/torque.zip"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Torque and Turbine easily                   -->
    <!-- ================================================================== -->
    <target name="upgrade-torque-turbine" 
            depends="upgrade-torque,upgrade-turbine">
    </target>

    <!-- ================================================================== -->
    <!-- Creates the API documentation                                      -->
    <!-- ================================================================== -->
    <target name="javadocs" depends="prepare">
        <mkdir dir="${javadoc.destdir}"/>
        <javadoc
            sourcepath="${build.src.scarab}"
            packagenames="org.tigris.scarab.*"
            destdir="${javadoc.destdir}"
            author="true"
            private="true"
            version="true"
            use="true"
            windowtitle="${Name} ${version} API"
            doctitle="${Name} ${version} API"
          bottom="Copyright &amp;copy; ${year} CollabNet. All Rights Reserved."
        >
            <classpath refid="classpath"/>
    </javadoc>
    </target>

    <!-- ================================================================== -->
    <!-- Creates the Usecase documentation                                  -->
    <!-- ================================================================== -->
    <target name="usecases" depends="prepare">
        <ant antfile="build.xml" 
                dir="${src.usecases.dir}" target="docs">
        </ant>
    </target>
    
    <!-- ================================================================== -->
    <!-- Cleans up the build directory                                      -->
    <!-- ================================================================== -->
    <target name="clean" depends="prepare-build-dir">
        <delete dir="${build.project}"/>
    </target>
    <target name="clean-all" depends="prepare-build-dir">
        <delete dir="${build.dir}"/>
    </target>

<!-- ============================================================= -->
<!-- Targets beyond this point are currently considered broken or  -->
<!-- experimental - User Beware!                                  -->
<!-- ============================================================= -->

    <!-- ================================================================== -->
    <!-- Dump data from DB into xml                                         -->
    <!-- ================================================================== -->
    <target name="datadump" depends="compile">
        <copy file="${src.sql.dir}/${project}-schema.xml"
            todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.conf.dir}/torque.props" overwrite="true"
            tofile="${torque.dir.scarab}/build.properties"/>
        <ant antfile="build.xml" dir="${torque.dir.scarab}"
            target="project-datadump">
            <property name="torque.home" value="${torque.dir.scarab}"/>
        </ant>
        <move file="${src.java.dir.scarab}/${project}-default-all-data.xml"
            tofile="${src.sql.dir}/${project}-default-all-data.xml"/>
    </target>

    <!-- ================================================================== -->
    <!-- Package                                                            -->
    <!-- ================================================================== -->
    <!--
    <target name="package" depends="javadocs">
        <mkdir dir="${final.dir}"/>
        <mkdir dir="${final.dir}/src/java"/>

        <copy todir="${final.dir}/src/java">
            <fileset dir="${build.dir}/src"/>
        </copy>

        <copy todir="${final.dir}/build">
            <fileset dir="../build"/>
        </copy>

        <copy todir="${final.dir}/lib">
            <fileset dir="../lib"/>
        </copy>

        <copy file="${build.dir}/${final.name}.jar" 
            tofile="${final.dir}/${final.name}.jar"/>
    </target>
    -->

    <!-- ================================================================== -->
    <!-- Packages the distribution with ZIP                                 -->
    <!-- ================================================================== -->
    <!--
    <target name="package-zip" depends="package">
        <delete file="../${Name}-${version}.zip"/>
        <zip zipfile="../${Name}-${version}.zip" 
             basedir="../" includes="**/${final.name}/**"/>
    </target>
    -->

    <!-- ================================================================== -->
    <!-- Packages the distribution with TAR-GZIP                            -->
    <!-- ================================================================== -->
    <!--
    <target name="package-tgz" depends="package">
        <delete file="../${Name}-${version}.tar"/>
        <delete file="../${Name}-${version}.tar.gz"/>
        <tar tarfile="../${Name}-${version}.tar" 
             basedir="../" includes="**/${final.name}/**"/>
        <gzip zipfile="../${Name}-${version}.tar.gz" 
                  src="../${Name}-${version}.tar"/>
    </target>
    -->

    <!-- ================================================================== -->
    <!-- Packages the distribution with ZIP and TAG-GZIP                    -->
    <!-- ================================================================== -->
    <!--
    <target name="package-all" depends="package-zip, package-tgz">
    </target>
    -->

    <!-- ================================================================== -->
    <!-- Same as package-all. It is just here for compatibility.            -->
    <!-- ================================================================== -->
    <!--
    <target name="dist" depends="package-all">
    </target>
    -->

</project>

