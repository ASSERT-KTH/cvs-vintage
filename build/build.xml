<?xml version="1.0"?>

<!-- Build file for Scarab -->

<project name="Scarab" default="compile" basedir=".">

    <!-- Give user a chance to override without editing this file
         (and without using -D arguments each time they build) -->
    <property file="${user.home}/scarab.build.properties" /> 
    <property file="${user.home}/build.properties" />
    <property file="${basedir}/build.properties" />
    <property file="${basedir}/default.properties" />

    <property name="ant.home" value="."/>

    <property name="final.name" value="${project}-${version}"/>
    <property name="final.dir" value="${basedir}/../${final.name}/"/>

    <property name="src.conf.dir" value="${src.dir}/conf"/>
    <property name="www.dir" value="${src.dir}/../www"/>
    <property name="src.html.dir" value="${src.dir}/html"/>
    <property name="src.dtd.dir" value="${src.dir}/dtd"/>
    <property name="src.i18n.dir" value="${src.dir}/i18n"/>
    <property name="src.images.dir" value="${src.dir}/images"/>
    <property name="src.java.dir.scarab" value="${src.dir}/java"/>
    <property name="src.sql.dir" value="${src.dir}/sql"/>
    <property name="src.templates.dir" value="${src.dir}/templates"/>
    <property name="src.test.dir" value="${src.dir}/test"/>
    <property name="src.usecases.dir" value="${src.dir}/usecases"/>
    
    <property name="tomcat.dist.dir" value="${src.dir}/tomcat-4.0"/>

    <property name="torque.dir.scarab" value="${build.src.scarab}/torque"/>
    <property name="javadoc.destdir" value="${build.project}/api"/>
    <property name="scarab.war.file" value="${build.webapps}/${scarab.context}.war"/>

    <!-- Build classpath -->
    <path id="classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
            <exclude name="**/xalan*.jar"/>
        </fileset>
        <fileset dir="${ant.home}/lib">
            <include name="**/ant*.jar"/>
        </fileset>
    </path>

    <!-- ================================================================== -->
    <!-- Check to see what optional dependencies are available              -->
    <!-- ================================================================== -->
    <target name="check_for_optional_packages">
        <available property="lucene.present"
                   classname="org.apache.lucene.document.Document">
            <classpath refid="classpath"/>
        </available>
        <available property="junit.present"
           classname="junit.framework.TestCase">
            <classpath refid="classpath"/>
        </available>
    </target>

    <!-- ================================================================== -->
    <!-- Prepares the Build directory                                       -->
    <!-- ================================================================== -->
    <target name="prepare-build-dir">

        <echo message="Build Dir: ${build.dir}"/>
        <mkdir dir="${build.dir}"/>
        <tstamp/>
    <echo>
 #####
#     #   ####     ##    #####     ##    #####
#        #    #   #  #   #    #   #  #   #    #
 #####   #       #    #  #    #  #    #  #####
      #  #       ######  #####   ######  #    #
#     #  #    #  #    #  #   #   #    #  #    #
 #####    ####   #    #  #    #  #    #  #####
           [${version}-${DSTAMP}${TSTAMP}]
    </echo>
    </target>

    <!-- ================================================================== -->
    <!-- Prepares the Tomcat directory                                      -->
    <!-- ================================================================== -->
    <target name="prepare-tomcat" depends="prepare-build-dir">

        <!-- copy over tomcat -->
        <mkdir dir="${build.dir}"/>
        <copy todir="${build.dir}/bin" filtering="no">
            <fileset dir="${tomcat.dist.dir}/bin"/>
        </copy>
        <copy todir="${build.dir}/common" filtering="no">
            <fileset dir="${tomcat.dist.dir}/common"/>
        </copy>
        <filter token="SCARAB_CONTEXT" value="${scarab.context}"/>
        <filter token="TOMCAT_SHUTDOWN_PORT" value="${scarab.tomcat.shutdown.port}"/>
        <filter token="TOMCAT_HTTP_PORT" value="${scarab.tomcat.http.port}"/>
        <filter token="SCARAB_EMAIL_REGISTER_FROMNAME" value="${scarab.email.register.fromName}"/>
        <filter token="SCARAB_EMAIL_REGISTER_FROMADDRESS" value="${scarab.email.register.fromAddress}"/>
        <filter token="SCARAB_EMAIL_MODIFYISSUE_FROMNAME" value="${scarab.email.modifyissue.fromName}"/>
        <filter token="SCARAB_EMAIL_MODIFYISSUE_FROMADDRESS" value="${scarab.email.modifyissue.fromAddress}"/>
        <filter token="SCARAB_EMAIL_APPROVAL_FROMNAME" value="${scarab.email.approval.fromName}"/>
        <filter token="SCARAB_EMAIL_APPROVAL_FROMADDRESS" value="${scarab.email.approval.fromAddress}"/>
        <filter token="SCARAB_EMAIL_REQUIREAPPROVAL_FROMNAME" value="${scarab.email.requireapproval.fromName}"/>
        <filter token="SCARAB_EMAIL_REQUIREAPPROVAL_FROMADDRESS" value="${scarab.email.requireapproval.fromAddress}"/>
        <filter token="SCARAB_EMAIL_FORGOTPASSWORD_FROMNAME" value="${scarab.email.forgotpassword.fromName}"/>
        <filter token="SCARAB_EMAIL_FORGOTPASSWORD_FROMADDRESS" value="${scarab.email.forgotpassword.fromAddress}"/>
        <filter token="SCARAB_EMAIL_ASSIGNISSUE_FROMNAME" value="${scarab.email.assignissue.fromName}"/>
        <filter token="SCARAB_EMAIL_ASSIGNISSUE_FROMADDRESS" value="${scarab.email.assignissue.fromAddress}"/>
        <filter token="SCARAB_EMAIL_MOVEISSUE_FROMNAME" value="${scarab.email.moveissue.fromName}"/>
        <filter token="SCARAB_EMAIL_MOVEISSUE_FROMADDRESS" value="${scarab.email.moveissue.fromAddress}"/>
        <copy todir="${build.dir}/conf" filtering="yes">
            <fileset dir="${tomcat.dist.dir}/conf"/>
        </copy>
        <copy todir="${build.dir}/lib" filtering="no">
            <fileset dir="${tomcat.dist.dir}/lib"/>
        </copy>
        <copy todir="${build.dir}/server" filtering="no">
            <fileset dir="${tomcat.dist.dir}/server"/>
        </copy>
        <copy todir="${build.dir}" filtering="no">
            <fileset dir="${tomcat.dist.dir}">
                <include name="scarab.sh"/>
            </fileset>
        </copy>
        <!-- use same xerces.jar for scarab and tomcat -->
        <copy todir="${build.dir}/common/lib" filtering="no">
             <fileset dir="${lib.dir}">
                 <include name="**/xerces*.jar"/>
             </fileset>
        </copy>
        <!-- no need to have two copies of this checked into CVS -->
        <copy todir="${build.dir}/server/lib" filtering="no">
             <fileset dir="${lib.dir}">
                <include name="**/jakarta-regexp*.jar"/>
            </fileset>
        </copy>
        <!-- no need to have two copies of this checked into CVS -->
        <copy todir="${build.dir}/server/lib" filtering="no">
             <fileset dir="${lib.dir}">
                <include name="**/commons-logging*.jar"/>
            </fileset>
        </copy>

        <chmod dir="${build.dir}" perm="ug+rx" includes="**/*.sh" />

        <mkdir dir="${build.dir}/logs"/>
        <mkdir dir="${build.dir}/work"/>
        <mkdir dir="${build.dir}/webapps"/>
    </target>

    <!-- ================================================================== -->
    <!-- Prepare style.tigris.org for action                                -->
    <!-- ================================================================== -->
    <target name="style-expanded-check">
        <!-- we can check that style.zip is upToDate in order to know if
             the archive has already been expanded because it is expanded
             in the same target as it is copied to the directory -->
        <mkdir dir="${build.project}/style"/>
        <uptodate property="style.is.not.expanded"
            targetfile="${src.html.dir}/${tigris-style}.zip">
            <srcfiles dir="${build.project}/style" includes="**/*.css"/>
        </uptodate>    
    </target>

    <target name="style-init" depends="style-expanded-check"
            if="style.is.not.expanded">
        <unzip src="${src.html.dir}/${tigris-style}.zip" dest="${build.dir}"/>

        <filter token="SCARAB_CONTEXT" value="${scarab.context}"/>
        <filter token="SCARAB_HTML_REDIRECT" value="${scarab.html.redirect}"/>

        <copy todir="${build.project}/style" filtering="yes">
            <fileset dir="${build.dir}/${tigris-style}/css"
                     includes="**/*.css" />
        </copy>

        <copy todir="${build.project}/style" filtering="yes">
            <fileset dir="${src.html.dir}"
                     includes="**/*.css" />
            <fileset dir="${src.html.dir}"
                     includes="**/*.dtd" />
        </copy>

        <copy todir="${build.project}/images" filtering="no">
            <fileset dir="${src.images.dir}" />
            <fileset dir="${build.dir}/${tigris-style}/images"
                     includes="*.gif,*.png" />
        </copy>
        <delete dir="${build.dir}/${tigris-style}" quiet="true"/>
    </target>

    <!-- ================================================================== -->
    <!-- Prepares the build directory                                       -->
    <!-- ================================================================== -->
    <target name="prepare" depends="prepare-tomcat, style-init">

        <!-- things to go into the project directory -->
        
        <filter token="SCARAB_CONTEXT" value="${scarab.context}"/>
        <copy todir="${build.project}" filtering="yes">
            <fileset dir="${src.html.dir}">
                <include name="**/*.html"/>
                <include name="**/*.js"/>
            </fileset>
        </copy>

        <copy todir="${build.project}/dtd" filtering="yes">
            <fileset dir="${src.dtd.dir}">
                <include name="**/scarab.dtd"/>
                <include name="**/scarab-settings.dtd"/>
            </fileset>
        </copy>

        <!-- Conditionally copy templates -->
        <antcall target="copy-templates" />

        <copy todir="${build.project.webinf}" filtering="yes">
            <fileset dir="${src.conf.dir}/">
                <include name="web.xml"/>
            </fileset>
        </copy>

        <condition property="template.path" value="/WEB-INF">
            <equals arg1="${scarab.copy.templates}" arg2="true"/>
        </condition>
        <condition property="template.path" value="file://${src.dir}">
            <not>
                <equals arg1="${scarab.copy.templates}" arg2="true"/>
            </not>
        </condition>

        <!-- things to go into the web-inf directory -->
        <filter token="VERSION" value="${version}"/>
        <tstamp/>
        <filter token="BUILD_DATE" value="${DSTAMP}${TSTAMP}"/>
        <filter token="TEMPLATE_PATH" value="${template.path}"/>
        <filter token="PIPELINE_DESCRIPTOR"
            value="${scarab.default.pipeline.descriptor}"/>
        <filter token="ADMIN_USERNAME" value="${scarab.user.username}"/>
        <filter token="ADMIN_PASSWORD" value="${scarab.user.password}"/>
        <filter token="ADMIN_FIRSTNAME" value="${scarab.user.firstname}"/>
        <filter token="ADMIN_LASTNAME" value="${scarab.user.lastname}"/>
        <filter token="ADMIN_EMAIL" value="${scarab.user.email}"/>
        <filter token="DATABASE_PROP_NAME" value="${scarab.database.prop.name}"/>
        <filter token="DATABASE_TYPE" value="${scarab.database.type}"/>
        <filter token="DATABASE_NAME" value="${scarab.database.name}"/>
        <filter token="DATABASE_DRIVER" value="${scarab.database.jdbc.driver}"/>
        <filter token="DATABASE_URL" value="${scarab.database.url}"/>
        <filter token="DATABASE_HOST" value="${scarab.database.host}"/>
        <filter token="DATABASE_PORT" value="${scarab.database.port}"/>
        <filter token="DATABASE_USERNAME" value="${scarab.database.username}"/>
        <filter token="DATABASE_PASSWORD" value="${scarab.database.password}"/>
        <filter token="DATABASE_LOADORDER" value="${scarab.database.loadorder}"/>
        <filter token="DATABASE_VALIDATION_QUERY" value="${scarab.database.validationQuery}"/>
        <filter token="SYSTEM_MAIL_HOST" value="${scarab.system.mail.host}"/>
        <filter token="TURBINE_MODE" value="${scarab.mode}"/>
        <filter token="SESSION_VALIDATOR" value="${scarab.sessionvalidator}"/>
        <filter token="USER_SERVICE" value="${scarab.user.service}"/>
        <filter token="MODULE_SERVICE" value="${scarab.module.service}"/>
        <filter token="SCARAB_AUTOMATIC_ROLE_APPROVAL" value="${scarab.automatic.role.approval}"/>
        <filter token="SCARAB_LINK" value="${scarab.pull.link}"/>
        <filter token="SCARAB_STATIC_LINK" value="${scarab.pull.staticlink}"/>
        <filter token="SESSION_TIMEOUT" value="${scarab.session.timeout}"/>
        <filter token="LUCENE_INDEX_PATH" value="${scarab.lucene.index.path}"/>
        <filter token="ATTACHMENTS_PATH" value="${scarab.attachments.path}"/>
        <filter token="INTAKE_SERIALIZE_FILE" value="${scarab.intake.serialize.file}"/>
        <filter token="INTAKE_OPTIONAL_GROUPS" value="${intake.optional.groups}"/>
        <filter token="FILE_UPLOAD_PATH" value="${scarab.file.upload.path}"/>
        <filter token="SCARAB_REGISTER_CHECK_VALID_A" value="${scarab.register.email.checkValidA}"/>
        <filter token="SCARAB_REGISTER_BAD_EMAILS" value="${scarab.register.email.badEmails}"/>
        <filter token="TORQUE_MANAGER_CACHE" value="${scarab.torque.manager.cache}"/>
        <filter token="EXTRA_TR_PROPERTIES" 
            value="${scarab.extra.tr.properties}"/>
        <filter token="TIMEZONE" value="${scarab.timezone}"/>
        <filter token="LOG_PATTERN" value="${scarab.log.pattern}"/>
        <filter token="LOG_LEVEL_SCARAB" value="${scarab.log.level.scarab}"/>
        <filter token="LOG_FILE_SCARAB" value="${scarab.log.file.scarab}"/>
        <filter token="LOG_APPEND_SCARAB" value="${scarab.log.append.scarab}"/>
        <filter token="LOG_LEVEL_TURBINE" value="${scarab.log.level.turbine}"/>
        <filter token="LOG_FILE_TURBINE" value="${scarab.log.file.turbine}"/>
        <filter token="LOG_APPEND_TURBINE" value="${scarab.log.append.turbine}"/>
        <filter token="LOG_LEVEL_FULCRUM" value="${scarab.log.level.fulcrum}"/>
        <filter token="LOG_FILE_FULCRUM" value="${scarab.log.file.fulcrum}"/>
        <filter token="LOG_APPEND_FULCRUM" value="${scarab.log.append.fulcrum}"/>
        <filter token="LOG_LEVEL_TORQUE" value="${scarab.log.level.torque}"/>
        <filter token="LOG_FILE_TORQUE" value="${scarab.log.file.torque}"/>
        <filter token="LOG_APPEND_TORQUE" value="${scarab.log.append.torque}"/>
        <filter token="LOG_LEVEL_STRATUM" value="${scarab.log.level.stratum}"/>
        <filter token="LOG_FILE_STRATUM" value="${scarab.log.file.stratum}"/>
        <filter token="LOG_APPEND_STRATUM" value="${scarab.log.append.stratum}"/>
        <filter token="LOG_LEVEL_JCS" value="${scarab.log.level.jcs}"/>
        <filter token="LOG_FILE_JCS" value="${scarab.log.file.jcs}"/>
        <filter token="LOG_APPEND_JCS" value="${scarab.log.append.jcs}"/>
        <filter token="LOG_FILE_VELOCITY" value="${scarab.log.file.velocity}"/>
        <filter token="TEMPLATE_CACHE" value="${scarab.template.cache}"/>
        
        <copy todir="${build.project.webinf}/conf" filtering="yes" overwrite="true">
            <fileset dir="${src.conf.dir}/">
                <include name="*.properties"/>
                <include name="*.xml"/>
            </fileset>
        </copy>

        <copy todir="${build.project.webinf}/lib" filtering="no">
            <fileset dir="${lib.dir}/">
                <exclude name="**/servlet*.jar"/>
                <exclude name="**/xalan*.jar"/>
                <exclude name="**/${torque.zip}"/>
                <include name="**/*.jar"/>
            </fileset>
        </copy>

        <!-- clean out any accidentally left over generated .sql 
             files which should not be in the src.sql.dir -->
        <delete file="${src.sql.dir}/${project}-schema.sql" quiet="true" />
        <delete file="${src.sql.dir}/turbine-schema.sql" quiet="true" />
        <delete file="${src.sql.dir}/scheduler-schema.sql" quiet="true" />
        <delete file="${src.sql.dir}/id-table-schema.sql" quiet="true" />

        <!-- the SQL data population scripts directory -->
        <copy todir="${build.sql.scarab}" filtering="yes">
            <fileset dir="${src.sql.dir}">
                <include name="**/*.sql"/>
                <include name="**/*.sh"/>
                <include name="**/*.lst"/>
                <include name="**/dbsettings.props"/>
            </fileset>
        </copy>
        <chmod perm="+x">
            <fileset dir="${src.sql.dir}" includes="**/*.sh"/>
            <fileset dir="${build.sql.scarab}" includes="**/*.sh"/>
        </chmod>

        <!-- express the type of database we are generating -->
        <touch file="${build.sql.scarab}/${scarab.database.type}" />

        <!-- the source code directory -->
        <filter token="OM" value="org.tigris.scarab.om"/>
        <copy todir="${build.src.scarab}/org" filtering="yes">
            <fileset dir="${src.java.dir.scarab}/org">
                <include name="**/*.java"/>
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
                <include name="**/package.html"/>
                <exclude name="**/*Lucene*.java"/>
            </fileset>
        </copy>

        <!-- copy l18n stuff into classpath -->
        <mkdir dir="${build.dest.scarab}"/>
        <copy todir="${build.dest.scarab}" filtering="no">
            <fileset dir="${src.i18n.dir}">
                <include name="**/*.properties"/>
            </fileset>
        </copy>

        <!-- copy JCS configuration into classpath -->
        <copy todir="${build.dest.scarab}" filtering="no">
            <fileset dir="${src.conf.dir}/">
                <include name="cache.ccf"/>
            </fileset>
        </copy>

        <!-- add Lucene code to source directory -->
        <antcall target="copy-lucene"/>
        
        <mkdir dir="${build.project}/logs"/>
    </target>

    <!-- ================================================================== -->
    <!-- Copies templates to WEB-INF directory, if specified                -->
    <!-- ================================================================== -->
    <target name="copy-templates" if="scarab.copy.templates">
        <copy todir="${build.project.webinf}/templates" filtering="no">
            <fileset dir="${src.templates.dir}"/>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Adds Lucene adaptor code to source directory                       -->
    <!-- ================================================================== -->
    <target name="copy-lucene" depends="check_for_optional_packages"
        if="lucene.present">

        <copy todir="${build.src.scarab}/org" filtering="yes">
            <fileset dir="${src.java.dir.scarab}/org">
                <include name="**/*Lucene*.java"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Prepare Torque for action                                          -->
    <!-- ================================================================== -->
    <target name="torque-expanded-check">
        <!-- we can check that torque.zip is upToDate in order to know if
             the archive has already been expanded because it is expanded
             in the same target as it is copied to the directory -->
        <uptodate property="torque.is.expanded"
            targetfile="${build.src.scarab}/${torque.zip}">
            <srcfiles dir="${lib.dir}" includes="${torque.zip}"/>
        </uptodate>    
    </target>

    <target name="torque-init" depends="prepare,torque-expanded-check"
            unless="torque.is.expanded">
        <copy file="${lib.dir}/${torque.zip}" todir="${build.src.scarab}"/>
        <unzip  src="${build.src.scarab}/${torque.zip}"
               dest="${build.src.scarab}" />
        <copy todir="${build.project.webinf.lib}">
            <fileset dir="${torque.dir.scarab}/lib">
                <include name="torque*.jar"/>
            </fileset>
        </copy>
    </target>
 
    <!-- ================================================================== -->
    <!-- Generate SQL from Torque                                           -->
    <!-- ================================================================== -->
    <target name="schema-check">
        <echo message="checking: ${build.sql.scarab}/${project}.sql"/>
        <uptodate property="schema.uptodate"
            targetfile="${build.sql.scarab}/${project}.sql">
            <srcfiles dir="${src.sql.dir}" includes="turbine-schema.xml"/>
            <srcfiles dir="${src.sql.dir}" includes="id-table-schema.xml"/>
            <srcfiles dir="${src.sql.dir}" includes="scheduler-schema.xml"/>
            <srcfiles dir="${src.sql.dir}" includes="${project}-schema.xml"/>
            <srcfiles dir="${user.home}" includes="scarab.build.properties"/>
            <srcfiles dir="${user.home}" includes="build.properties"/>
            <srcfiles dir="${basedir}" includes="build.properties"/>
        </uptodate>
    </target>

    <target name="sql" depends="prepare-build-dir,schema-check,torque-init" 
            unless="schema.uptodate">

        <!-- removing sample schema that comes packaged with torque -->
        <delete file="${torque.dir.scarab}/schema/project-schema.xml"/>
        <filter token="DATABASE_PROP_NAME" value="${scarab.database.prop.name}"/>
        <filter token="DATABASE_TYPE" value="${scarab.database.type}"/>
        <filter token="DATABASE_URL" value="${scarab.database.url}"/>
        <filter token="DATABASE_ADMIN_URL" 
                value="${scarab.database.admin.url}"/>
        <filter token="DATABASE_DRIVER" value="${scarab.database.jdbc.driver}"/>
        <filter token="DATABASE_USER" value="${scarab.database.username}"/>
        <filter token="DATABASE_PASSWORD" value="${scarab.database.password}"/>
        <!-- copy the schema's to the torque directory -->
        <copy file="${src.sql.dir}/${project}-schema.xml" 
              todir="${torque.dir.scarab}/schema"
              filtering="true" overwrite="true"/>
        <copy file="${src.sql.dir}/id-table-schema.xml" 
              todir="${torque.dir.scarab}/schema"
              filtering="true" overwrite="true"/>
        <copy file="${src.sql.dir}/turbine-schema.xml" 
              todir="${torque.dir.scarab}/schema"
              filtering="true" overwrite="true"/>
        <copy file="${src.sql.dir}/scheduler-schema.xml" 
              todir="${torque.dir.scarab}/schema"
              filtering="true" overwrite="true"/>
        <!-- copy the scarab specific build.properties over -->
        <copy file="${src.conf.dir}/torque.props" 
              tofile="${torque.dir.scarab}/build.properties"
              filtering="true" overwrite="true"/>

        <!-- move the generated .sql files into the target directory -->
        <ant antfile="build-torque.xml"
             dir="${torque.dir.scarab}" target="sql"
             inheritAll="false">
            <property name="torque.home" value="${torque.dir.scarab}"/>
            <property name="lib.dir" value="${build.project.webinf.lib}"/>
            <property name="build.properties"
                      value="${torque.dir.scarab}/build.properties"/>
            <property name="idTableXMLFile" value=""/>
        </ant>

        <move file="${src.sql.dir}/${project}-schema.sql"
            tofile="${build.sql.scarab}/${project}.sql"/>
        <move file="${src.sql.dir}/turbine-schema.sql"
            tofile="${build.sql.scarab}/turbine.sql"/>
        <move file="${src.sql.dir}/scheduler-schema.sql"
            tofile="${build.sql.scarab}/scheduler.sql"/>
        <move file="${src.sql.dir}/id-table-schema.sql"
            tofile="${build.sql.scarab}/id-table.sql"/>
    </target>

    <!-- ================================================================== -->
    <!-- Generate OM/Peer classes from Torque                               -->
    <!-- ================================================================== -->
    <target name="generated-check" depends="prepare">
        <echo message="checking: ${torque.dir.scarab}/report.scarab.om.generation"/>
        <uptodate property="gen.uptodate"
            targetfile=
               "${torque.dir.scarab}/report.scarab.om.generation">
            <srcfiles dir="${src.sql.dir}" includes="scarab-schema.xml"/>
        </uptodate>
    </target>

    <target name="om-peer" depends="generated-check,torque-init,sql" 
            unless="gen.uptodate">

        <!-- we don't want to generate the OM objects for Turbine 
             tables because they already exists in the fulcrum.jar -->
        <delete file="${torque.dir.scarab}/schema/turbine-schema.xml"/>
        <delete file="${torque.dir.scarab}/schema/scheduler-schema.xml"/>

        <ant antfile="build-torque.xml" dir="${torque.dir.scarab}" 
                target="om" inheritAll="false">
            <property name="torque.home" value="${torque.dir.scarab}"/>
            <property name="lib.dir" value="${build.project.webinf.lib}"/>
            <property name="build.properties" value="${torque.dir.scarab}/build.properties"/>
        </ant>

        <move todir="${build.src.scarab}/org/tigris/scarab/om" filtering="yes">
            <fileset dir="${src.java.dir.scarab}/org/tigris/scarab/om">
                <include name="**/Base*.java"/>
                <exclude name="**/BaseScarabObject.java"/>
                <include name="**/map/*MapBuilder.java"/>
                <include name="report.scarab.om.generation"/>
            </fileset>
        </move>

        <copy file="${src.java.dir.scarab}/report.scarab.om.generation" 
              overwrite="true" todir="${torque.dir.scarab}"/>

        <delete dir="${src.java.dir.scarab}/org/tigris/scarab/om/map"/>
    </target>

    <!-- ================================================================== -->
    <!-- Check for databases that could require alternate or more complex   -->
    <!-- methods for schema creation                                        -->
    <!-- ================================================================== -->
    <target name="db-type-check" depends="sql">
        <condition property="auto.create.db">
        <not>
            <or>
                <equals arg1="${scarab.database.type}" arg2="oracle"/>
                <equals arg1="${scarab.database.type}" arg2="db2"/>
            </or>
        </not>
        </condition>
    </target>

    <!-- ================================================================== -->
    <!-- Create database if not bypassed in "db-type-check"                 -->
    <!-- ================================================================== -->
    <target name="create-db-schema" depends="db-type-check,sql" 
            if="auto.create.db">

        <filter token="DATABASE_NAME" value="${scarab.database.name}"/>
        <copy file="${src.sql.dir}/create-${scarab.database.type}-db.sql" 
              todir="${build.src.scarab}"
              filtering="true" overwrite="true"/>
        <echo message="Connecting to ${scarab.database.type} at ${scarab.database.admin.url}"/>
        <sql
            driver="${scarab.database.jdbc.driver}"
            url="${scarab.database.admin.url}"
            userid="${scarab.database.admin.username}"
            password="${scarab.database.admin.password}">
            <classpath refid="classpath"/>
            <transaction 
                src="${build.src.scarab}/create-${scarab.database.type}-db.sql"/>
        </sql>

    </target>

    <!-- ================================================================== -->
    <!-- Load default data                                                  -->
    <!-- ================================================================== -->
    <target name="load-default-data" depends="create-db-schema">
        <echo message=
            "Connecting to ${scarab.database.type} at ${scarab.database.url}"/>
        <property name="file.prefix" value="${build.sql.scarab}/"/>
        <sql
            driver="${scarab.database.jdbc.driver}"
            url="${scarab.database.url}"
            userid="${scarab.database.admin.username}"
            password="${scarab.database.admin.password}">
            <classpath refid="classpath"/>

            <transaction src="${file.prefix}turbine.sql"/>
            <transaction src="${file.prefix}${project}.sql"/>
            <transaction src="${file.prefix}scheduler.sql"/>
            <transaction src="${file.prefix}id-table.sql"/>
            <transaction src="${file.prefix}turbine-id-table-init.sql"/>
            <transaction src="${file.prefix}${project}-id-table-init.sql"/>
            <transaction src="${file.prefix}${project}-required-data.sql"/>
            <transaction src="${file.prefix}${project}-default-data.sql"/>
            <transaction src="${file.prefix}${project}-security.sql"/>
        </sql>
    </target>

    <!-- ================================================================== -->
    <!-- Generate Data DTD from Torque                                      -->
    <!-- ================================================================== -->
    <!-- Load seed data unless bypassed by setting "skip.seed.data"         -->
    <!-- to any value in "build.properties"                                 -->
    <!-- ================================================================== -->
    <target name="load-seed-data" depends="load-default-data"
            unless="skip.seed.data">
        <!-- ============================================================== -->
        <!-- Alternate initial data file may be specified                   -->
        <!-- in "build.properties" by setting "seed.data.sql"               -->
        <!-- to an alternate file.                                          -->
        <!-- ============================================================== -->
        <property name="seed.data.sql"
            value="${file.prefix}${project}-sample-data.sql"/>
        <sql
            driver="${scarab.database.jdbc.driver}"
            url="${scarab.database.url}"
            userid="${scarab.database.admin.username}"
            password="${scarab.database.admin.password}">
            <classpath refid="classpath"/>
            <transaction src="${seed.data.sql}"/>
        </sql>
    </target>

    <!-- ================================================================== -->
    <!-- Create DB from Torque                                              -->
    <!-- ================================================================== -->
    <target name="create-db" depends="load-seed-data"/>

    <!-- ================================================================== -->
    <target name="datadtd-check">
        <echo message="checking: ${src.sql.dir}/${project}-data.dtd"/>
        <uptodate property="datadtd.uptodate"
            targetfile="${src.sql.dir}/${project}-data.dtd">
            <srcfiles dir="${src.sql.dir}" includes="scarab-schema.xml"/>
        </uptodate>
    </target>

    <target name="datadtd" depends="datadtd-check,torque-init,compile"
            unless="datadtd.uptodate">
        <copy file="${src.sql.dir}/${project}-schema.xml"
              todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.conf.dir}/torque.props"
              overwrite="true" tofile="${torque.dir.scarab}/build.properties"/>
        <ant antfile="build.xml"
                dir="${torque.dir.scarab}" target="project-datadtd" inheritAll="false">
            <property name="torque.home" value="${torque.dir.scarab}"/>
            <property name="databaseName" value="default"/>
            <property name="lib.dir" value="${build.project.webinf.lib}"/>
            <property name="build.properties" value="${torque.dir.scarab}/build.properties"/>
        </ant>

        <move file="${src.java.dir.scarab}/${project}-data.dtd"
            tofile="${src.sql.dir}/${project}-data.dtd"/>
    </target>

    <!-- ================================================================== -->
    <!-- Generate SQL from data XML                                         -->
    <!-- ================================================================== -->
    <target name="datasql" depends="datadtd,compile">
        <copy file="${src.sql.dir}/${project}-schema.xml"
            todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.sql.dir}/${project}-data.xml"
            todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.sql.dir}/${project}-data.dtd"
            todir="${torque.dir.scarab}/schema"/>
        <copy file="${src.conf.dir}/torque.props" overwrite="true"
            tofile="${torque.dir.scarab}/build.properties"/>
        <ant antfile="build.xml" dir="${torque.dir.scarab}"
            target="project-datasql" inheritAll="false">
            <property name="torque.home" value="${torque.dir.scarab}"/>
            <property name="lib.dir" value="${build.project.webinf.lib}"/>
            <property name="build.properties" value="${torque.dir.scarab}/build.properties"/>
        </ant>
        <move file="${src.java.dir.scarab}/${project}-data.sql"
            tofile="${src.sql.dir}/${project}-data.sql"/>
    </target>

    <!-- ================================================================== -->
    <!-- Compiles the source directory                                      -->
    <!-- ================================================================== -->
    <target name="compile" depends="om-peer,prepare">
        <mkdir dir="${build.dest.scarab}"/>
        <javac srcdir="${build.src.scarab}"
            destdir="${build.dest.scarab}"
            excludes="**/package.html,torque/**"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}">

        <classpath refid="classpath"/>

        <classpath>
            <fileset dir="${build.project.webinf.lib}">
                <include name="**/torque*.jar"/>
            </fileset>
        </classpath>

        </javac>

        <copy todir="${build.dest.scarab}/org" filtering="no">
            <fileset dir="${build.src.scarab}/org">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
            </fileset>
        </copy>

    </target>

    <target name="compile-tests" depends="compile">
        <javac srcdir="${src.test.dir}"
            destdir="${build.dest.scarab}"
            excludes="**/package.html,torque/**"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}">

        <classpath refid="classpath"/>

        <classpath>
            <fileset dir="${build.project.webinf.lib}">
                <include name="**/torque*.jar"/>
            </fileset>
        </classpath>

        </javac>
    </target>

    <!-- ================================================================== -->
    <!-- Runs the test suite                                                -->
    <!-- ================================================================== -->
    <target name="tests" depends="compile-tests">
        <exec executable="ant" dir="${basedir}">
            <arg line="-buildfile run-tests.xml"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- jars the source directory                                          -->
    <!-- ================================================================== -->
    <target name="jarsrc" depends="prepare">
        <jar jarfile="${build.dir}/${final.name}.src.jar"
            basedir="${build.src.scarab}"
            excludes="**/package.html"/>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Tomcat easily                               -->
    <!-- ================================================================== -->
    <target name="upgrade-tomcat-cvs">
        <echo>
        Upgrading Tomcat from: ${tomcat.cvs.dir}
        </echo>

        <copy todir="${tomcat.dist.dir}/bin" filtering="no">
            <fileset dir="${tomcat.cvs.dir}/build/bin"/>
        </copy>
        <copy todir="${tomcat.dist.dir}/common/lib" filtering="no">
            <fileset dir="${tomcat.cvs.dir}/build/common/lib">
                <include name="**/naming-common.jar"/>
                <include name="**/naming-resources.jar"/>
                <include name="**/servlet.jar"/>
            </fileset>
       </copy>
       <copy todir="${tomcat.dist.dir}/lib" filtering="no">
            <fileset dir="${tomcat.cvs.dir}/build/lib">
                <include name="**/naming-factory.jar"/>
            </fileset>
        </copy>
        <copy todir="${tomcat.dist.dir}/server/lib" filtering="no">
            <fileset dir="${tomcat.cvs.dir}/build/server/lib">
                <include name="**/servlets-common.jar"/>
                <include name="**/servlets-default.jar"/>
                <include name="**/servlets-invoker.jar"/>
                <include name="**/servlets-manager.jar"/>
                <include name="**/catalina.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="upgrade-tomcat-bin">
        <echo>
        Upgrading Tomcat from: ${tomcat.binary.dir}
        </echo>
    
        <copy todir="${tomcat.dist.dir}/bin" filtering="no">
            <fileset dir="${tomcat.binary.dir}/bin"/>
        </copy>
        <copy todir="${tomcat.dist.dir}/common/lib" filtering="no">
            <fileset dir="${tomcat.binary.dir}/common/lib">
                <include name="**/naming-common.jar"/>
                <include name="**/naming-resources.jar"/>
                <include name="**/servlet.jar"/>
            </fileset>
       </copy>
       <copy todir="${tomcat.dist.dir}/lib" filtering="no">
            <fileset dir="${tomcat.binary.dir}/lib">
                <include name="**/naming-factory.jar"/>
            </fileset>
        </copy>
        <copy todir="${tomcat.dist.dir}/server/lib" filtering="no">
            <fileset dir="${tomcat.binary.dir}/server/lib">
                <include name="**/servlets-common.jar"/>
                <include name="**/servlets-default.jar"/>
                <include name="**/servlets-invoker.jar"/>
                <include name="**/servlets-manager.jar"/>
                <include name="**/catalina.jar"/>
                <include name="**/tomcat-coyote.jar"/>
                <include name="**/tomcat-http11.jar"/>
                <include name="**/tomcat-util.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="upgrade-tomcat-coyote">
        <property name="coyote.base.url" 
                 value="http://jakarta.apache.org/builds/jakarta-tomcat-connectors/coyote/release"/>
        <property name="coyote.version" value="v1.0-rc2"/>
        <property name="coyote.url" value="${coyote.base.url}/${coyote.version}"/>
        <get src="${coyote.url}/tomcat-coyote.jar" 
            dest="${tomcat.dist.dir}/server/lib/tomcat-coyote.jar"/>
        <get src="${coyote.url}/tomcat-http11.jar" 
            dest="${tomcat.dist.dir}/server/lib/tomcat-http11.jar"/>
        <get src="${coyote.url}/tomcat-util.jar" 
            dest="${tomcat.dist.dir}/server/lib/tomcat-util.jar"/>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Turbine easily                                -->
    <!-- ================================================================== -->
    <target name="build-turbine">
        <exec executable="ant" dir="${turbine.dir}">
            <arg line="-f build-legacy.xml maven:clean"/>
        </exec>
        <exec executable="ant" dir="${turbine.dir}">
            <arg line="-f build-legacy.xml maven:install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Torque easily                                 -->
    <!-- ================================================================== -->
    <target name="build-torque">
        <exec executable="ant" dir="${torque.dir}">
            <arg line="-f build-legacy.xml clean"/>
        </exec>
        <exec executable="ant" dir="${torque.dir}">
            <arg line="-f build-legacy.xml update-jars"/>
        </exec>
        <exec executable="ant" dir="${torque.dir}">
            <arg line="-f build-legacy.xml dist-lite"/>
        </exec>
        <exec executable="ant" dir="${torque.dir}">
            <arg line="-f build-legacy.xml install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Fulcrum easily                                -->
    <!-- ================================================================== -->
    <target name="build-fulcrum">

<echo>
<![CDATA[
!!!!!!!!!!!!!!!!!!!!!!!! Important !!!!!!!!!!!!!!!!!!!!!!!! 
You must make sure to patch the fulcrum project.xml file as 
shown to work with xerces-1.4.4, if the fulcrum jar is to be
used with scarab

Index: project.xml
===================================================================
RCS file: /home/cvs/jakarta-turbine-fulcrum/project.xml,v
retrieving revision 1.26
diff -u -r1.26 project.xml
--- project.xml 18 Apr 2002 17:17:17 -0000  1.26
+++ project.xml 26 Apr 2002 19:23:56 -0000
@@ -210,14 +210,8 @@
     <dependency>
       <name>xml-xerces</name>
       <type>required</type>
-      <version>2.0.0</version>
-      <jar>xercesImpl-2.0.0.jar</jar>
-    </dependency>
-    <dependency>
-      <name>xml-apis</name>
-      <type>required</type>
-      <version>2.0.0</version>
-      <jar>xmlParserAPIs-2.0.0.jar</jar>
+      <version>1.4.4</version>
+      <jar>xerces-1.4.4.jar</jar>
     </dependency>
     <dependency>
       <name>xml-rpc</name>
]]>
</echo>

        <exec executable="ant" dir="${fulcrum.dir}">
            <arg line="maven:clean"/>
        </exec>
        <exec executable="ant" dir="${fulcrum.dir}">
            <arg line="-Dsecurity.database.name=${scarab.database.prop.name} -Dscheduler.database.name=${scarab.database.prop.name} maven:install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Stratum easily                                -->
    <!-- ================================================================== -->
    <target name="build-stratum">
        <exec executable="ant" dir="${stratum.dir}">
            <arg line="maven:clean"/>
        </exec>
        <exec executable="ant" dir="${stratum.dir}">
            <arg line="maven:install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of JCS easily                                    -->
    <!-- ================================================================== -->
    <target name="build-jcs">

<echo>
<![CDATA[
!!!!!!!!!!!!!!!!!!!!!!!!!! Important !!!!!!!!!!!!!!!!!!!!!!!!!! 
You must make sure to patch the JCS project.xml and build.xml 
files as shown to remove test configuration which causes logging
errors in jcs when used in an application, if the jcs jar is 
to be used with scarab


Index: build.xml
===================================================================
RCS file: /home/cvs/jakarta-turbine-jcs/build.xml,v
retrieving revision 1.5
diff -u -r1.5 build.xml
--- build.xml   19 Apr 2002 08:27:09 -0000  1.5
+++ build.xml   26 Apr 2002 19:37:26 -0000
@@ -46,12 +46,12 @@
   </target>
 
   <target
-    name="maven:jar" depends="jcs:test-prepare">
+    name="maven:jar">
     <ant antfile="${maven.home}/build-maven.xml" target="jar"/>
   </target>
 
   <target
-    name="maven:install-jar" depends="jcs:test-prepare">
+    name="maven:install-jar">
     <ant antfile="${maven.home}/build-maven.xml" target="install-jar"/>
   </target>
 
Index: project.xml
===================================================================
RCS file: /home/cvs/jakarta-turbine-jcs/project.xml,v
retrieving revision 1.5
diff -u -r1.5 project.xml
--- project.xml 19 Apr 2002 08:26:27 -0000  1.5
+++ project.xml 26 Apr 2002 19:37:27 -0000
@@ -139,14 +139,6 @@
     <sourceDirectories>
       <sourceDirectory>src/java</sourceDirectory>
     </sourceDirectories>
-    <unitTestSourceDirectory>src/test</unitTestSourceDirectory>
-    <aspectSourceDirectories></aspectSourceDirectories>
-    <unitTestPatterns>
-      <unitTestPattern>include = **/TestJCS.java</unitTestPattern>
-      <unitTestPattern>include = **/TestSimpleLoad.java</unitTestPattern>
-      <unitTestPattern>include = **/TestDiskCache.java</unitTestPattern>
-      <unitTestPattern>include = **/TestDiskCacheConcurrent.java</unitTestPattern>
-    </unitTestPatterns>
     <jarResources></jarResources>
     <jars></jars>
   </build>
]]>
</echo>

        <exec executable="ant" dir="${jcs.dir}">
            <arg line="maven:clean"/>
        </exec>
        <exec executable="ant" dir="${jcs.dir}">
            <arg line="maven:install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Commons-Collections easily                    -->
    <!-- There is a dependency on stuff in here in fulcrum                  -->
    <!-- ================================================================== -->
    <target name="build-commons-collections">
        <exec executable="ant" dir="${commons-collections.dir}">
            <arg line="clean"/>
        </exec>
        <exec executable="ant" dir="${commons-collections.dir}">
            <arg line="dist"/>
        </exec>
        <copy todir="${lib.repo}">
            <fileset dir="${commons-collections.dir}">
                <include name="**/commons-collections*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Commons-Sandbox-Configuration easily          -->
    <!-- There is a dependency on stuff in here in fulcrum                  -->
    <!-- ================================================================== -->
    <target name="build-commons-sandbox-configuration">
        <exec executable="ant" dir="${commons-sandbox-configuration.dir}">
            <arg line="maven:clean"/>
        </exec>
        <exec executable="ant" dir="${commons-sandbox-configuration.dir}">
            <arg line="maven:install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Commons-Sandbox-Xo easily          -->
    <!-- There is a dependency on stuff in here in fulcrum                  -->
    <!-- ================================================================== -->
    <target name="build-commons-sandbox-xo">
        <exec executable="ant" dir="${commons-sandbox-xo.dir}">
            <arg line="maven:clean"/>
        </exec>
        <exec executable="ant" dir="${commons-sandbox-xo.dir}">
            <arg line="maven:install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Commons-Sandbox-Util easily                   -->
    <!-- There is a dependency on stuff in here in fulcrum                  -->
    <!-- ================================================================== -->
    <target name="build-commons-sandbox-util">
        <exec executable="ant" dir="${commons-sandbox-util.dir}">
            <arg line="maven:clean"/>
        </exec>
        <exec executable="ant" dir="${commons-sandbox-util.dir}">
            <arg line="maven:install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Commons-Sandbox-Email easily                  -->
    <!-- ================================================================== -->
    <target name="build-commons-sandbox-email">
        <exec executable="ant" dir="${commons-sandbox-email.dir}">
            <arg line="maven:clean"/>
        </exec>
        <exec executable="ant" dir="${commons-sandbox-email.dir}">
            <arg line="maven:install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Commons-Sandbox-Codec easily                  -->
    <!-- ================================================================== -->
    <target name="build-commons-sandbox-codec">
        <exec executable="ant" dir="${commons-sandbox-codec.dir}">
            <arg line="clean"/>
        </exec>
        <exec executable="ant" dir="${commons-sandbox-codec.dir}">
            <arg line="install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Commons-Sandbox-Lang easily                   -->
    <!-- ================================================================== -->
    <target name="build-commons-sandbox-lang">
        <exec executable="ant" dir="${commons-sandbox-lang.dir}">
            <arg line="clean"/>
        </exec>
        <exec executable="ant" dir="${commons-sandbox-lang.dir}">
            <arg line="install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Build our version of Commons-Beanutils easily                      -->
    <!-- ================================================================== -->
    <target name="build-commons-beanutils">
        <exec executable="ant" dir="${commons-beanutils.dir}">
            <arg line="clean"/>
        </exec>
        <exec executable="ant" dir="${commons-beanutils.dir}">
            <arg line="install-jar"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Turbine easily                              -->
    <!-- ================================================================== -->
    <target name="upgrade-turbine" depends="build-turbine">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/turbine*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${turbine.dir}/target">
                <include name="**/turbine*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Torque easily                               -->
    <!-- ================================================================== -->
    <target name="upgrade-torque" depends="build-torque">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/${torque.zip}"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${torque.dir}/target">
                <include name="**/${torque.zip}"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Fulcrum easily                              -->
    <!-- ================================================================== -->
    <target name="upgrade-fulcrum" depends="build-fulcrum">

        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/fulcrum*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${fulcrum.dir}/target">
                <include name="**/fulcrum*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Stratum easily                              -->
    <!-- ================================================================== -->
    <target name="upgrade-stratum" depends="build-stratum">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/stratum*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${stratum.dir}/target">
                <include name="**/stratum*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of JCS easily                              -->
    <!-- ================================================================== -->
    <target name="upgrade-jcs" depends="build-jcs">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/jcs*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${jcs.dir}/target">
                <include name="**/jcs*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Commons-Collections easily                  -->
    <!-- ================================================================== -->
    <target name="upgrade-commons-collections" depends="build-commons-collections">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/commons-collections*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${commons-collections.dir}/dist">
                <include name="**/commons-collections*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Commons-Sandbox-Configuration easily        -->
    <!-- ================================================================== -->
    <target name="upgrade-commons-sandbox-configuration" depends="build-commons-sandbox-configuration">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/commons-configuration*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${commons-sandbox-configuration.dir}/target">
                <include name="**/commons-configuration*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Commons-Sandbox-Xo easily        -->
    <!-- ================================================================== -->
    <target name="upgrade-commons-sandbox-xo" depends="build-commons-sandbox-xo">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/commons-xo*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${commons-sandbox-xo.dir}/target">
                <include name="**/commons-xo*.jar"/>
            </fileset>
        </copy>
    </target>


    <!-- ================================================================== -->
    <!-- Upgrade our version of Commons-Sandbox-Util easily                 -->
    <!-- ================================================================== -->
    <target name="upgrade-commons-sandbox-util" depends="build-commons-sandbox-util">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/commons-util*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${commons-sandbox-util.dir}/target">
                <include name="**/commons-util*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Commons-Sandbox-Email easily                -->
    <!-- ================================================================== -->
    <target name="upgrade-commons-sandbox-email" depends="build-commons-sandbox-email">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/commons-email*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${commons-sandbox-email.dir}/target">
                <include name="**/commons-email*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Commons-Sandbox-Codec easily                -->
    <!-- ================================================================== -->
    <target name="upgrade-commons-sandbox-codec" depends="build-commons-sandbox-codec">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/commons-codec*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${commons-sandbox-codec.dir}/dist">
                <include name="**/commons-codec*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our version of Commons-Sandbox-Lang easily                -->
    <!-- ================================================================== -->
    <target name="upgrade-commons-sandbox-lang" depends="build-commons-sandbox-lang">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/commons-lang*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${commons-sandbox-lang.dir}/dist">
                <include name="**/commons-lang*.jar"/>
            </fileset>
        </copy>
    </target>

   <!-- ================================================================== -->
    <!-- Upgrade our version of Commons-Beanutils easily                    -->
    <!-- ================================================================== -->
    <target name="upgrade-commons-beanutils" depends="build-commons-beanutils">
        <delete>
            <fileset dir="${lib.dir}">
                <include name="**/commons-beanutils*.jar"/>
            </fileset>
        </delete>
        <copy todir="${lib.dir}" filtering="no">
            <fileset dir="${commons-beanutils.dir}/dist">
                <include name="**/commons-beanutils.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our dependencies easily                                    -->
    <!-- These are in dependency order for themselves                       -->
    <!-- ================================================================== -->
    <target name="upgrade-jakarta" 
            depends="upgrade-commons-collections,
                     upgrade-commons-sandbox-util,
                     upgrade-commons-sandbox-configuration,
                     upgrade-commons-sandbox-xo,
                     upgrade-commons-sandbox-email,
                     upgrade-commons-sandbox-codec,
                     upgrade-commons-sandbox-lang,
                     upgrade-commons-beanutils,
                     upgrade-torque,upgrade-fulcrum,upgrade-stratum,
                     upgrade-turbine,upgrade-jcs
                     ">
    </target>

    <!-- ================================================================== -->
    <!-- Upgrade our cvs dependencies easily                                -->
    <!-- ================================================================== -->
    <target name="upgrade-jakarta-cvs">
        <echo>${fulcrum.dir}</echo>
        <cvs dest="${fulcrum.dir}" command="update"/>
        <echo>${stratum.dir}</echo>
        <cvs dest="${stratum.dir}" command="update"/>
        <echo>${jcs.dir}</echo>
        <cvs dest="${jcs.dir}" command="update"/>
        <echo>${torque.dir}</echo>
        <cvs dest="${torque.dir}" command="update"/>
        <echo>${turbine.dir}</echo>
        <cvs dest="${turbine.dir}" command="update"/>
        <echo>${commons-beanutils.dir}</echo>
        <cvs dest="${commons-beanutils.dir}" command="update"/>
        <echo>${commons-sandbox-util.dir}</echo>
        <cvs dest="${commons-sandbox-util.dir}" command="update"/>
        <echo>${commons-sandbox-configuration.dir}</echo>
        <cvs dest="${commons-sandbox-configuration.dir}" command="update"/>
        <echo>${commons-sandbox-xo.dir}</echo>
        <cvs dest="${commons-sandbox-xo.dir}" command="update"/>
        <echo>${commons-sandbox-email.dir}</echo>
        <cvs dest="${commons-sandbox-email.dir}" command="update"/>
        <echo>${commons-sandbox-codec.dir}</echo>
        <cvs dest="${commons-sandbox-codec.dir}" command="update"/>
    </target>

    <!-- ================================================================== -->
    <!-- Creates the API documentation                                      -->
    <!-- ================================================================== -->
    <target name="javadocs" depends="om-peer,prepare">
        <mkdir dir="${javadoc.destdir}"/>
        <javadoc
            sourcepath="${build.src.scarab}"
            packagenames="org.tigris.scarab.*"
            destdir="${javadoc.destdir}"
            author="true"
            private="true"
            version="true"
            use="true"
            windowtitle="${Name} ${version} API"
            doctitle="${Name} ${version} API"
          bottom="Copyright &amp;copy; ${year} CollabNet. All Rights Reserved."
        >
            <classpath refid="classpath"/>
            <classpath>
                <fileset dir="${build.project.webinf.lib}">
                    <include name="**/torque*.jar"/>
                </fileset>
            </classpath>
        </javadoc>
    </target>

    <!-- ================================================================== -->
    <!-- Creates the Usecase documentation                                  -->
    <!-- ================================================================== -->
    <target name="usecases" depends="prepare">
        <ant antfile="build.xml" 
                dir="${src.usecases.dir}" target="docs">
        </ant>
    </target>
    
    <!-- ================================================================== -->
    <!-- Cleans up the build directory                                      -->

    <!-- ================================================================== -->
    <target name="clean" depends="prepare-build-dir">
        <delete dir="${build.project}" quiet="true"/>
    </target>
    <target name="clean-all" depends="prepare-build-dir">
        <delete file="${scarab.log.file.scarab}" quiet="true"/>
        <delete file="${scarab.log.file.turbine}" quiet="true"/>
        <delete file="${scarab.log.file.torque}" quiet="true"/>
        <delete file="${scarab.log.file.fulcrum}" quiet="true"/>
        <delete file="${scarab.log.file.stratum}" quiet="true"/>
        <delete file="${scarab.log.file.velocity}" quiet="true"/>
        <delete file="${scarab.log.file.jcs}" quiet="true"/>
        <delete dir="${build.dir}" quiet="true"/>
        <delete quiet="true">
            <fileset dir="..">
                <include name="${final.name}*"/>
            </fileset>
        </delete>
    </target>

    <!-- ================================================================== -->
    <!-- Package (creates a .zip and .tar.gz)                               -->
    <!-- ================================================================== -->
    <target name="package" depends="package-zip,package-tgz">
    </target>

    <!-- ================================================================== -->
    <!-- Packages the distribution with ZIP                                 -->
    <!-- ================================================================== -->
    <target name="package-zip" depends="dist">
        <delete file="../${final.name}.zip" quiet="true" />
        <zip zipfile="../${final.name}.zip" 
             basedir="../" includes="**/${final.name}/**"/>
    </target>

    <!-- ================================================================== -->
    <!-- Packages the distribution with TAR-GZIP                            -->
    <!-- ================================================================== -->
    <target name="package-tgz" depends="dist">
        <delete file="../${final.name}.tar" quiet="true"/>
        <delete file="../${final.name}.tar.gz" quiet="true" />
        <tar longfile="gnu" tarfile="../${final.name}.tar" 
             basedir="../" includes="**/${final.name}/**"/>
        <gzip zipfile="../${final.name}.tar.gz" 
                  src="../${final.name}.tar"/>
        <delete file="../${final.name}.tar"/>
    </target>

    <!-- ================================================================== -->
    <!-- Creates the Binary distribution directory                          -->
    <!-- ================================================================== -->
    <target name="dist">
        <delete dir="${final.dir}" quiet="true" />
        <mkdir dir="${final.dir}"/>

        <copy todir="${final.dir}" preservelastmodified="true"
              includeEmptyDirs="false">
            <fileset dir="../">
                <exclude name="**/build/nightly.sh"/>
                <exclude name="**/build/run-tests*"/>
                <exclude name="**/build/velocity.log*"/>
                <exclude name="**/src/sql/${scarab.database.type}-scarab.sql"/>
                <exclude name="**/src/sql/report.scarab.sql.generation"/>
                <exclude name="**/src/sql/project-schema.sql"/>
                <exclude name="**/src/sql/sqldb.map"/>
                <exclude name="**/src/sql/id-table-schema.sql"/>
                <exclude name="**/src/sql/*.DM1"/>
                <exclude name="**/src/sql/*.jpg"/>
                <exclude name="**/src/sql/schema-design-notes.txt"/>
                <exclude name="**/src/sql/sql_questions.txt"/>
                <exclude name="**/src/test/**"/>
                <exclude name="**/src/usecases/**"/>
                <exclude name="**/target/**"/>
                <exclude name="**/www/**"/>
            </fileset>
        </copy>

        <!-- In the distribution, turn on Velocity template caching -->
        <replace file="${final.dir}/build/default.properties">
            <replacetoken><![CDATA[scarab.template.cache=false]]></replacetoken>
            <replacevalue><![CDATA[scarab.template.cache=true]]></replacevalue>
        </replace>

        <!-- In the distribution, turn on template copying so that 
             paths are relative -->
        <replace file="${final.dir}/build/default.properties">
            <replacetoken><![CDATA[#scarab.copy.templates=true]]></replacetoken>
            <replacevalue><![CDATA[scarab.copy.templates=true]]></replacevalue>
        </replace>

    </target>

    <!-- ================================================================== -->
    <!-- Check to ensure that templates are in the war file                 -->
    <!-- ================================================================== -->
    <target name="war-requirements-check" depends="prepare">
        <condition property="cannot.build.war" value="true">
          <not>
            <equals arg1="${scarab.copy.templates}" arg2="true"/>
          </not>
        </condition>
    </target>

    <target name="war-requirements-failure" depends="war-requirements-check"
            if="cannot.build.war">
        <fail message="In order to create a war file, the property scarab.copy.templates must be set to true"/>
    </target>

    <!-- ================================================================== -->
    <!-- Create a war file                                                  -->
    <!-- ================================================================== -->
    <target name="war" depends="war-requirements-failure,compile">

        <war warfile="${scarab.war.file}"
              webxml="${build.project.webinf}/web.xml">

          <fileset dir="${build.project}">
            <exclude name="WEB-INF/**"/>
          </fileset>
          <lib dir="${build.project.webinf.lib}">
            <include name="*.jar"/>
          </lib>
          <classes dir="${build.dest.scarab}">
            <include name="**"/>
          </classes>
          <webinf dir="${build.project.webinf}">
            <exclude name="web.xml"/>
            <exclude name="classes/**"/>
            <exclude name="lib/**"/>
          </webinf>
        </war>
        <chmod dir="${final.dir}" perm="ug+rx" includes="**/*.sh" />
    </target>

<!-- ============================================================= -->
<!-- Targets beyond this point are currently considered broken or  -->
<!-- experimental - User Beware!                                  -->
<!-- ============================================================= -->

    <!-- ================================================================== -->
    <!-- Tool to create proper import statements                            -->
    <!-- ==================================================================
    <target name="scrub" depends="om-peer,prepare">
        <taskdef name="scrub" 
          classname="org.apache.tools.ant.taskdefs.optional.importscrubber.ImportScrubberTask"/>

        <property name="tmp.dir" value="tmp"/>

        <delete dir="${tmp.dir}" quiet="true"/>

        <copy todir="${tmp.dir}/org">
          <fileset dir="${build.src.scarab}/org"/>
        </copy>

        <javac srcdir="${tmp.dir}"
            destdir="${tmp.dir}"
            excludes="**/package.html,torque/**"
            debug="true">

          <classpath refid="classpath"/>

          <classpath>
            <fileset dir="${build.project.webinf.lib}">
              <include name="**/torque*.jar"/>
            </fileset>
          </classpath>
        </javac>
        
        <scrub root="${tmp.dir}" format="nobreaks" recurse="true"/>

        <delete>
          <fileset dir="${tmp.dir}" includes="**/*.class"/>
        </delete>

        <copy todir="${src.java.dir.scarab}/org" overwrite="true">
          <fileset dir="${tmp.dir}/org"/>
        </copy>

    </target>
    -->


    <!-- ================================================================== -->
    <!-- Dump data from DB into xml                                         -->
    <!-- ================================================================== -->
    <target name="datadump" depends="sql,compile">
        <ant antfile="build-torque.xml" dir="${torque.dir.scarab}"
            target="project-datadump">
            <property name="torque.home" value="${torque.dir.scarab}"/>
            <property name="lib.dir" value="${build.project.webinf}/lib"/>
            <property name="build.properties"
                      value="${torque.dir.scarab}/build.properties"/> 
            <property name="outputDirectory" value="schema"/> 
        </ant>
        <move file="${torque.dir.scarab}/schema/${project}-${project}-all-data.xml"
            tofile="${src.sql.dir}/${project}-${project}-all-data.xml"/>
    </target>

    <!-- ================================================================== -->
    <!-- Generates an Html description of the DB schema                     -->
    <!-- This should be integrated with torque, so effort to integrate      -->
    <!-- into the build has not been done                                   -->
    <!-- ================================================================== -->
    <target name="html-schema">
        <echo message="This task expects you to have xalan-j_2_3_1 binary
                       distribution located at ${lib.repo}/xalan-j_2_3_1"/>
        <java classname="org.apache.xalan.xslt.Process" fork="yes"
              args="-XSL ${src.dir}/dtd/XMLSchemaToHTML.xsl 
                    -IN  ${src.sql.dir}/scarab-schema.xml 
                    -OUT ${src.sql.dir}/scarab-schema.html">
           <!-- it seems ant is treating these as jvmarg ??
           <arg value="-XSL ${src.dir}/dtd/XMLSchemaToHTML.xsl"/>
           <arg value="-IN  ${src.sql.dir}/scarab-schema.xml"/>
           <arg value="-OUT ${src.sql.dir}/scarab-schema.html"/>
           -->
           <classpath>
               <fileset dir="${lib.repo}/xalan-j_2_3_1/bin">
                   <include name="xalan.jar"/>
                   <include name="xml-apis.jar"/>
                   <include name="xercesImpl.jar"/>
               </fileset>
           </classpath>
        </java>

        <copy file="${src.sql.dir}/scarab-schema.html"
            tofile="${www.dir}/generated-scarab-schema.html"/>

    </target>


</project>

