<?xml version="1.0" encoding="UTF-8"?>
<!--
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 - Copyright (C) 1999,2005 - INRIA (www.inria.fr)
 -
 - CAROL: Common Architecture for RMI ObjectWeb Layer
 -
 - This library is developed inside the ObjectWeb Consortium,
 - http://www.objectweb.org
 -
 - This library is free software; you can redistribute it and/or
 - modify it under the terms of the GNU Lesser General Public
 - License as published by the Free Software Foundation; either
 - version 2.1 of the License, or any later version.
 -
 - This library is distributed in the hope that it will be useful,
 - but WITHOUT ANY WARRANTY; without even the implied warranty of
 - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 - Lesser General Public License for more details.
 -
 - You should have received a copy of the GNU Lesser General Public
 - License along with this library; if not, write to the Free Software
 - Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
 - USA
 -
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 - $Id: carol_double.xml,v 1.22 2005/03/10 10:08:21 benoitf Exp $
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 -->

<project name="carol.tests" default="all">
  <!--
   - Compilation directive for testing a basic server with carol over sun jrmp
   - this test create 5 jvm (name server 1, name sever 2,  server 1, server 1, junit-client 1, junit client 2)
   - for carol multi rmi unit testing
   -
   - to call this projecrt set the properties :
   -                      stub.jar.name1, stub.jar.name2,
   -                      client.properties.file.name1,  client.properties.file.name2,
   -                      server.properties.file.name,
   -                      name.server.class.name1, name.server.option1
   -                      name.server.class.name2, name.server.option2
   -                      test.client.jvm.xtra1,    test.client.jvm.xtra2
   -->

  <!-- test result location -->
  <property name="report.dir" value="${test.dist.results}/${test.name}" />
  <property name="parallel.report.dir1" value="${report.dir}/parallel1" />
  <property name="parallel.report.dir2" value="${report.dir}/parallel2" />

  <!-- test tmp location -->
  <property name="test.tmp.client1" value="${test.tmp}/client/1" />
  <property name="test.tmp.client2" value="${test.tmp}/client/2" />
  <property name="test.tmp.server" value="${test.tmp}/server" />
  <property name="test.multi.jvmargs"
            value="-Djava.security.policy=${test.ext}/java.policy" />
  <property name="test.client.jvmarg1" value="${test.client.jvm.xtra1}" />
  <property name="test.client.jvmarg2" value="${test.client.jvm.xtra2}" />
  <property name="trace.properties.file.name" value="trace.properties" />
  <property name="basic.server.exit.stamp"
            location="${build}/build/BasicServerExit.stamp" />

  <condition property="n.concurrent.clients" value="2">
    <isset property="stub.jar.name2" />
  </condition>

  <property name="n.concurrent.clients" value="1" />

  <path id="test.client.classpath1">
    <fileset dir="${carol.dist}/lib">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${test.dist.lib}">
      <include name="**/carol_test.jar" />
      <include name="**/${stub.jar.name1}" />
    </fileset>
    <fileset dir="${externals}">
      <include name="**/*.jar" />
    </fileset>
    <pathelement location="${test.tmp.client1}" />
  </path>

  <path id="test.client.classpath2">
    <fileset dir="${carol.dist}/lib">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${test.dist.lib}">
      <include name="**/carol_test.jar" />
      <include name="**/${stub.jar.name2}" />
    </fileset>
    <fileset dir="${externals}">
      <include name="**/*.jar" />
    </fileset>
    <pathelement location="${test.tmp.client2}" />
  </path>

  <path id="test.server.classpath">
    <fileset dir="${carol.dist}/lib">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${test.dist.lib}">
      <include name="**/carol_test.jar" />
      <include name="**/${stub.jar.name1}" />
      <include name="**/${stub.jar.name2}" />
    </fileset>
    <fileset dir="${externals}">
      <include name="**/*.jar" />
    </fileset>
    <pathelement location="${test.tmp.server}" />
  </path>


  <!--
   ======================================================================
   BEGIN properties and paths needed by those tests that use the registry
   ======================================================================
  -->
  <property name="test.tmp.registry1" value="${test.tmp}/registry/1" />
  <property name="test.tmp.registry2" value="${test.tmp}/registry/2" />

  <path id="test.name.server.classpath1">
    <fileset dir="${carol.dist}/lib">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${externals}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${test.dist.lib}">
      <include name="**/carol_test.jar" />
      <include name="**/${stub.jar.name1}" />
    </fileset>
  </path>

  <path id="test.name.server.classpath2">
    <fileset dir="${externals}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${carol.dist}/lib">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${test.dist.lib}">
      <include name="**/carol_test.jar" />
      <include name="**/${stub.jar.name2}" />
    </fileset>
  </path>
  <!--
   ======================================================================
   END properties and paths needed by those tests that use the registry
   ======================================================================
  -->

  <target name="all">
    <antcall target="rebuild.tmp.dirs" />
    <antcall target="launch.test" />
  </target>

  <!-- launching directories purge and creation -->
  <target name="rebuild.tmp.dirs" depends="_rebuild.tmp.registry.dirs">
    <delete dir="${test.tmp.server}" />
    <mkdir dir="${test.tmp.server}" />

    <copy file="${test.ext}/${trace.properties.file.name}"
          tofile="${test.tmp.server}/trace.properties" />
    <copy file="${server.properties.file.name}"
          tofile="${test.tmp.server}/carol.properties" />

    <antcall target="_rebuild.tmp.dir1" />
    <antcall target="_rebuild.tmp.dir2" />
  </target>

  <target name="_rebuild.tmp.dir1">
    <delete dir="${test.tmp.client1}" />
    <mkdir dir="${test.tmp.client1}" />

    <copy file="${client.properties.file.name1}"
          tofile="${test.tmp.client1}/carol.properties" />
  </target>

  <target name="_rebuild.tmp.dir2" if="client.properties.file.name2">
    <delete dir="${test.tmp.client2}" />
    <mkdir dir="${test.tmp.client2}" />

    <copy file="${client.properties.file.name2}"
          tofile="${test.tmp.client2}/carol.properties" />
  </target>

  <target name="process.stopper">
    <java classname="org.objectweb.carol.jtests.conform.util.ProcessStopper"
          classpath="${build}/build/classes">

      <arg value="${process.runner.tcp.port}" />
    </java>
  </target>

  <target name="process.runner">
    <java classname="org.objectweb.carol.jtests.conform.util.ProcessRunner"
          fork="true">

      <jvmarg value="-Dprocess.runner.tcp.port=${process.runner.tcp.port}" />
      <jvmarg value="-Dprocess.runner.exit.stamp=${process.runner.exit.stamp}" />
      <jvmarg value="-Dprocess.runner.n.shutdowns=${process.runner.n.shutdowns}" />
      <jvmarg line="${process.runner.jvm.args}" />

      <arg value="${process.runner.target.class}" />
      <arg line="${process.runner.target.args}" />

      <classpath refid="${process.runner.target.classpath}" />
    </java>
  </target>


  <target name="runtests1">
    <waitfor maxwait="1000" maxwaitunit="second" checkevery="200">
      <socket server="localhost" port="10101" />
    </waitfor>

    <mkdir dir="${parallel.report.dir1}" />
    <property name="test.mode" value="parallel1" />
    <junit printsummary="yes" haltonfailure="no" haltonerror="no" fork="yes">
      <classpath refid="test.client.classpath1" />
      <formatter classname="org.objectweb.carol.ant.JunitFormatter"
                 extension=".xml" />
      <batchtest fork="yes" todir="${parallel.report.dir1}">
        <fileset dir="${test.src}">
          <include name="org/objectweb/carol/jtests/conform/basic/clients/*Tests.java" />
        </fileset>
      </batchtest>
    </junit>

    <antcall target="process.stopper">
      <param name="process.runner.tcp.port" value="30303" />
    </antcall>
    <antcall target="maybe.stop.nameserver1" />
  </target>

  <target name="maybe.runtests2" if="stub.jar.name2">
    <waitfor maxwait="1000" maxwaitunit="second" checkevery="200">
      <socket server="localhost" port="10101" />
    </waitfor>

    <property name="test.mode" value="parallel2" />
    <mkdir dir="${parallel.report.dir2}" />
    <junit printsummary="yes" haltonfailure="no" haltonerror="no" fork="yes">
      <classpath refid="test.client.classpath2" />
      <formatter classname="org.objectweb.carol.ant.JunitFormatter"
                 extension=".xml" />
      <batchtest fork="yes" todir="${parallel.report.dir2}">
        <fileset dir="${test.src}">
          <include name="org/objectweb/carol/jtests/conform/basic/clients/*Tests.java" />
        </fileset>
      </batchtest>
    </junit>

    <antcall target="process.stopper">
      <param name="process.runner.tcp.port" value="30303" />
    </antcall>
    <antcall target="maybe.stop.nameserver2" />
  </target>

  <target name="start.server">
    <antcall target="maybe.wait.for.ns1" />
    <antcall target="maybe.wait.for.ns2" />

    <antcall target="process.runner">
      <param name="process.runner.tcp.port" value="30303" />
      <param name="process.runner.exit.stamp"
             value="${basic.server.exit.stamp}" />
      <param name="process.runner.n.shutdowns"
             value="${n.concurrent.clients}" />
      <param name="process.runner.target.class"
             value="org.objectweb.carol.jtests.conform.basic.server.BasicServer" />
      <param name="process.runner.target.args" value="10101" />
      <param name="process.runner.jvm.args" value="${test.multi.jvmargs}" />
      <param name="process.runner.target.classpath"
             value="test.server.classpath" />
    </antcall>
  </target>

  <target name="launch.test">
    <parallel failonany="true">
      <antcall target="maybe.start.nameserver1" />
      <antcall target="maybe.start.nameserver2" />

      <antcall target="start.server" />

      <antcall target="runtests1" />
      <antcall target="maybe.runtests2" />
    </parallel>
  </target>


  <!--
   ======================================================================
   The following targets are only executed by those tests that use a registry.
  -->

  <target name="_rebuild.tmp.registry.dirs"
          depends="_rebuild.tmp.registry.dir1,_rebuild.tmp.registry.dir2" />

  <target name="_rebuild.tmp.registry.dir1">
    <delete dir="${test.tmp.registry1}" />
    <mkdir dir="${test.tmp.registry1}" />
  </target>

  <target name="_rebuild.tmp.registry.dir2" if="test.tmp.registry2">
    <delete dir="${test.tmp.registry2}" />
    <mkdir dir="${test.tmp.registry2}" />
  </target>

  <target name="maybe.start.nameserver1" if="name.server.class.name1">
    <antcall target="process.runner">
      <param name="process.runner.tcp.port" value="20201" />
      <param name="process.runner.exit.stamp" value="" />
      <param name="process.runner.n.shutdowns" value="1" />
      <param name="process.runner.target.class"
             value="${name.server.class.name1}" />
      <param name="process.runner.target.args" value="${name.server.option1}" />
      <param name="process.runner.jvm.args"
             value="-Djava.security.policy=${test.ext}/java.policy" />
      <param name="process.runner.target.classpath"
             value="test.name.server.classpath1" />
    </antcall>
  </target>

  <target name="maybe.start.nameserver2" if="name.server.class.name2">

    <antcall target="process.runner">
      <param name="process.runner.tcp.port" value="20202" />
      <param name="process.runner.exit.stamp" value="" />
      <param name="process.runner.n.shutdowns" value="1" />
      <param name="process.runner.target.class"
             value="${name.server.class.name2}" />
      <param name="process.runner.target.args" value="${name.server.option2}" />
      <param name="process.runner.jvm.args"
             value="-Djava.security.policy=${test.ext}/java.policy" />
      <param name="process.runner.target.classpath"
             value="test.name.server.classpath2" />
    </antcall>
  </target>

  <target name="maybe.wait.for.ns1" if="name.server.port1">
    <waitfor maxwait="3" maxwaitunit="second" checkevery="200">
      <socket server="localhost" port="${name.server.port1}" />
    </waitfor>
  </target>

  <target name="maybe.wait.for.ns2" if="name.server.port2">
    <waitfor maxwait="3" maxwaitunit="second" checkevery="200">
      <socket server="localhost" port="${name.server.port2}" />
    </waitfor>
  </target>

  <target name="maybe.stop.nameserver1" if="name.server.port1">
    <waitfor maxwait="2" maxwaitunit="second" checkevery="200">
      <available file="${basic.server.exit.stamp}" />
    </waitfor>

    <antcall target="process.stopper">
      <param name="process.runner.tcp.port" value="20201" />
    </antcall>
  </target>

  <target name="maybe.stop.nameserver2" if="name.server.port2">
    <waitfor maxwait="2" maxwaitunit="second" checkevery="200">
      <available file="${basic.server.exit.stamp}" />
    </waitfor>

    <antcall target="process.stopper">
      <param name="process.runner.tcp.port" value="20202" />
    </antcall>
  </target>

</project>
