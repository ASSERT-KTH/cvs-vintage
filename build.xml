<?xml version="1.0"?>

<project name="columba" default="build">
<description>
This is the whole build file for Columba. This build file is separated into any buildfiles which
are dependent on this buildfile. Build Columba and try it.
Have fun ... your Columba Team!
</description>
  <property name="basedir" value="${user.dir}"/>
	<property name="src" value="${basedir}"/>
	<property name="build" value="build"/>
	<property name="user.name" value="The Columba Team"/>
	<!-- here we should use the cvs-version info to automatically replace the version -->
	<property name="version" value="1.0-M2"/>
	<property name="dest" value="${basedir}/classes"/>
	<property name="test-dest" value="${basedir}/test-classes"/>
	<property name="ownclasspath" value="${dest}:${src}/lib/lucene-1.3-final.jar:${src}/lib/junit.jar:${src}/lib/jargs.jar:${src}/lib/jwizz-0.1.2.jar:${src}/lib/plastic-1.2.0.jar:${src}/lib/jhall.jar:${src}/lib/forms-1.0.4.jar:${src}/lib/ristretto-1.0_RC2.jar:${src}/lib/jscf-0.1.jar:${src}/lib/macchiato-1.0pre1.jar:${src}/lib/frappucino-1.0pre1.jar:${src}/lib/jniwrap-2.4.jar:${src}/lib/winpack.jar:${src}/lib/jdom.jar:${src}/lib/jpim.jar:${src}/lib/je.jar"/>
	<property name="java-src-dir" value="${src}\src\addressbook\core:${src}\src\columba\core:${src}\src\mail\core"/>
	<property name="java-test-src-dir" value="${src}\src\columba\test:${src}\src\mail\test"/>

	<!-- definition of the task to check the style of the java-code -->
	<taskdef name="checkstyle" classname="com.puppycrawl.tools.checkstyle.CheckStyleTask">
		<classpath>
			<pathelement location="${src}/lib/checkstyle-all-2.1.jar"/>
		</classpath>
	</taskdef>
	
	<!-- the task that really checks the style -->
	<target name="verify" description="checks the style of the java-code">
		<checkstyle lcurlyType="nlow"
								lcurlyMethod="nlow"
								lcurlyOther="nlow"
								maxLineLen="160"
								allowTabs="true"
								ignoreWhitespace="true"
								ignoreCastWhitespace="true"
								failOnViolation="false">
		<fileset dir="${src}" includes="**/*.java"/>
		</checkstyle>
	</target>

	<target name="update" description="updates columba via cvs">
		<cvs command="update"/>
	</target>

	<target name="init" description="creates all required output-folders">
		<echo message="you are running java version ${ant.java.version}"/>
		<mkdir dir="${dest}"/>
	</target>

	<target name="document" depends="init" description="creates the javadocs for the columba sources">
		<delete dir="${dest}/docs/api/"/>
		<mkdir dir="${dest}/docs/api/"/>
		<javadoc destdir="${dest}/docs/api/" classpath="${ownclasspath}" doctitle="Columba ${version} API Documentation" windowtitle="Columba API Documentation" link="http://java.sun.com/products/jdk/1.3/docs/api">
			<packageset dir="${src}/src/addressbook/core/"/>
			<!--<packageset dir="${src}/src/addressbook/independent/"/>-->
			<packageset dir="${src}/src/columba/core/"/>
			<packageset dir="${src}/src/mail/core/"/>
			<!--<packageset dir="${src}/src/mail/independent/"/>-->
			<group title="Addressbook" packages="org.columba.addressbook*"/>
			<group title="Core" packages="org.columba.core*"/>
			<group title="Mail" packages="org.columba.mail*"/>
		</javadoc>
	</target>

	<!-- copy required files for later tasks into the dest directory -->
	<target name="copy-required" description="copy later required files to the output folder">
		<copy todir="${dest}">
			<fileset dir="${src}">
				<include name="**/*.xml"/>
				<include name="**/*.dtd"/>
				<include name="**/*.gif"/>
				<include name="**/*.ico"/>
				<include name="**/*.jpeg"/>
				<include name="**/*.png"/>
				<include name="**/*.wav"/>
				<include name="**/*.properties"/>
				<include name="**/*.jar"/>
				<include name="**/*.py"/>
				<include name="README"/>
				<include name="LICENSE"/>
				<include name="CHANGES"/>
				<include name="AUTHORS"/>
				<include name="run.bat"/>
				<include name="run.sh"/>
				<include name="run_source.bat"/>
				<include name="run_source.sh"/>
				<!--
				<include name="run_source_jdk13.bat"/>
				<include name="run_source_jdk13.sh"/>
				-->
				<include name="native/**"/>
				<include name="plugins/**"/>
				<exclude name="build.xml"/>
				<exclude name="ant.dtd"/>
				<exclude name="lib/**"/>
				<exclude name="res/**"/>
				<exclude name="classes/**"/>
			</fileset>
		</copy>
	</target>

	<target name="validate-xml-resources" description="validates the xml-files for columba">
		<xmlvalidate failonerror="no" warn="yes">
			<fileset dir="${src}/res/" includes="**/*.xml"/>
		</xmlvalidate>
	</target>

	<target name="copy-resources" description="copy all resources to the destination folder">
		<copy todir="${dest}">
			<fileset dir="${src}/res/">
			 <include name="**"/>
			</fileset>
		</copy>
	</target>

	<!-- compile the classes -->
	<target name="compile" depends="init, copy-resources"
	description="compiles columba. Here are the other buildfiles in the subdirectories needed">
		<echo message="the classes are going to ${dest} "/>
		<ant dir="${src}/src/addressbook" target="compile-classes" inheritall="false">
			<property name="dest" value="${dest}"/>
			<property name="ownclasspath" value="${ownclasspath}"/>
			<property name="src" value="${java-src-dir}"/>
		</ant>
		<ant dir="${src}/src/columba" target="compile-classes">
			<property name="dest" value="${dest}"/>
			<property name="ownclasspath" value="${ownclasspath}"/>
			<property name="src" value="${java-src-dir}"/>
		</ant>
		<ant dir="${src}/src/mail" target="compile-classes">
			<property name="dest" value="${dest}"/>
			<property name="ownclasspath" value="${ownclasspath}"/>
			<property name="src" value="${java-src-dir}"/>
		</ant>
	</target>
	
	<!-- compile the test classes -->
	<target name="compile-tests" depends="compile"
	description="compiles test for columba. Here are the other buildfiles in the subdirectories needed">
		<mkdir dir="${test-dest}"/>
		<echo message="the classes are going to ${test-dest} "/>
		<ant dir="${src}/src/columba" target="compile-tests">
			<property name="dest" value="${test-dest}"/>
			<property name="ownclasspath" value="${ownclasspath}"/>
			<property name="src" value="${java-test-src-dir}"/>
		</ant>
		<ant dir="${src}/src/mail" target="compile-tests">
			<property name="dest" value="${test-dest}"/>
			<property name="ownclasspath" value="${ownclasspath}"/>
			<property name="src" value="${java-test-src-dir}"/>
		</ant>
	</target>	
	
	<!-- pack the files into one jar file with automatic manifest file -->
	<target name="jar" depends="compile" description="creates the columba.jar file">
		<delete file="columba.jar"/>
		<echo message="the jar file is going to be columba.jar "/>
		<jar basedir="${dest}" jarfile="columba.jar">
			<include name="**"/>
			<exclude name="columba.jar"/>
			<exclude name="README"/>
			<exclude name="CHANGES"/>
			<exclude name="AUTHORS"/>
			<include name="res/ACKNOWLEDGEMENT"/>
			<include name="res/CONTRIBUTORS"/>
			<include name="res/LICENSE"/>
			<exclude name="run.bat"/>
			<exclude name="run.sh"/>
			<exclude name="run_source.bat"/>
			<exclude name="run_source.sh"/>
			<!--
			<exclude name="run_source_jdk13.bat"/>
			<exclude name="run_source_jdk13.sh"/>
			-->
			<exclude name="**/*.zip"/>
			<exclude name="docs/**"/>
			<exclude name="plugins/**"/>
			<exclude name="lib/**"/>
			<exclude name="native/**"/>
			<manifest>
				<attribute name="Main-Class" value="org.columba.core.main.Main"/>
				<attribute name="Class-Path" value="lib/junit.jar lib/lucene-1.3-final.jar lib/jargs.jar lib/jwizz-0.1.2.jar lib/plastic-1.2.0.jar lib/jhall.jar lib/usermanual.jar lib/forms-1.0.4.jar lib/ristretto-1.0_RC2.jar lib/jscf-0.1.jar lib/macchiato-1.0pre1.jar lib/frappucino-1.0pre1.jar lib/winpack.jar lib/jniwrap-2.4.jar lib/jdom.jar lib/jpim.jar lib/je.jar"/>
				<attribute name="Sealed" value="false"/>
			</manifest>
		</jar>
	</target>
	
	<target name="run-script" depends="init" description="creates the run-script for columba">
		<!-- echo file="${dest}/run.sh" >#!/bin/sh
echo "starting columba ..."
echo "from path: `pwd`"
if test -f "`pwd`/columba.jar" ; then java -jar `pwd`/columba.jar ;
else echo "cannot find columba.jar in `pwd`"; fi
		</echo -->
		<echo message="at the moment there are no dynamic runscripts required"/>
	</target>

	<!-- convert line-endings -->
	<target name="linefeeds-win32" description="converts the line-endings in the sources to crlf">
	<fixcrlf srcdir="${dest}"
       eol="crlf"
       includes="README, AUTHORS, LICENSE, CHANGES, RUN, run.bat, run_source.bat"
  	/>
  	</target>

  	<!-- convert line-endings -->
	<target name="linefeeds-unix" description="converts the line-endings in the sources to lf">
	<fixcrlf srcdir="${dest}"
       eol="lf"
       includes="README, AUTHORS, LICENSE, CHANGES, RUN, run.sh, run_source.sh"
  	/>
  	</target>
	
	<!-- run test for all defined testcases -->
	<target name="test" depends="compile-tests" 
	description="runs all tests for columba. Failures only reported on console.">
		<junit fork="no" haltonfailure="yes">
			<classpath>
				<pathelement path="${ownclasspath}"/>
				<pathelement path="${test-dest}"/>
			</classpath>
			<formatter type="plain" usefile="false" />
			<batchtest>
				<fileset dir="${src}/src/mail/test">
					<include name="**/*Test*.java"/>
					<exclude name="**/AllTests.java"/>
				</fileset>
				<fileset dir="${src}/src/columba/test">
					<include name="**/*Test*.java"/>
					<exclude name="**/AllTests.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>


	<!-- create a release zip file for linux and unix flavors, containing the jar file and README, LICENSE, CHANGES, AUTHORS -->
	<!-- this task is for a binary release -->
	<target name="zip-bin-unix" depends="jar,run-script, linefeeds-unix"
	description="create a release zip file for linux and unix flavors containing the jar file and README, LICENSE, CHANGES, AUTHORS">
		<echo message="the zipfile is going to columba-unix-${version}-bin.zip "/>
		<zip zipfile="columba-unix-${version}-bin.zip" update="true">
			<zipfileset dir="." prefix="columba-unix-${version}-bin">
				<include name="README"/>
				<include name="AUTHORS"/>
				<include name="LICENSE"/>
				<include name="CHANGES"/>
				<include name="run.sh"/>
				<include name="columba.jar"/>
				<include name="**/*.jar"/>
				<!--
				<include name="plugins/**/*.py"/>
				<include name="plugins/**/*.jar"/>
				<include name="plugins/**/plugin.xml"/>
				-->
				<exclude name="lib/checkstyle-all-2.1.jar"/>
				<exclude name="lib/jcoverage.jar"/>
				<exclude name="lib/jniwrap-2.4.jar"/>
				<exclude name="lib/winpack.jar"/>
				<exclude name="lib/junit.jar"/>
				<exclude name="plugins/**" />
				<exclude name="classes/**"/>
			</zipfileset>
		</zip>
	</target>

	<!-- create a release zip file for windows flavors, containing the jar file and README, LICENSE, CHANGES, AUTHORS -->
	<!-- this task is for a binary release -->
	<target name="zip-bin-win32" depends="jar,run-script, linefeeds-win32"
	description="create a release zip file for windows flavors, containing the jar file and README, LICENSE, CHANGES, AUTHORS">
		<echo message="the zipfile is going to columba-win32-${version}-bin.zip "/>
		<zip zipfile="columba-win32-${version}-bin.zip" update="true">
			<zipfileset dir="." prefix="columba-win32-${version}-bin">
				<include name="README"/>
				<include name="AUTHORS"/>
				<include name="LICENSE"/>
				<include name="CHANGES"/>
				<include name="run.bat"/>
				<include name="columba.jar"/>
				<include name="**/*.jar"/>
				<include name="**/*.dll"/>
				<!--
				<include name="plugins/**/*.py"/>
				<include name="plugins/**/*.jar"/>
				<include name="plugins/**/plugin.xml"/>
				-->
				<exclude name="lib/checkstyle-all-2.1.jar"/>
				<exclude name="lib/jcoverage.jar"/>
				<exclude name="lib/junit.jar"/>
				<exclude name="plugins/**" />
				<exclude name="classes/**"/>
			</zipfileset>
			<zipfileset dir="." includes="native/win32/launcher/Columba.exe" fullpath="columba-win32-${version}-bin/Columba.exe"/>
			<zipfileset dir="." includes="native/win32/launcher/Columba.lap" fullpath="columba-win32-${version}-bin/Columba.lap"/>
		</zip>
	</target>

	<!-- create a source zip file for linux and unix flavors containing all sources and README, LICENSE, CHANGES, AUTHORS -->
	<!-- this task is for a source release -->
	<target name="zip-source-unix" depends="init,run-script,linefeeds-unix"
	description="create an source zip file for linux and unix flavors containing all sources and README, LICENSE, CHANGES, AUTHORS">
		<echo message="the zipfile is going to columba-${version}-src.zip "/>
		<zip zipfile="columba-unix-${version}-src.zip" update="true">
			<zipfileset dir="." prefix="columba-unix-${version}-src">
				<include name="**/*.java"/>
				<include name="**/*.jar"/>
				<include name="**/*.xml"/>
				<include name="**/*.dtd"/>
				<include name="**/*.gif"/>
				<include name="**/*.jpeg"/>
				<include name="**/*.png"/>
				<include name="**/*.wav"/>
				<include name="**/*.properties"/>
				<include name="README"/>
				<include name="LICENSE"/>
				<include name="CHANGES"/>
				<include name="AUTHORS"/>
				<include name="run_source.sh"/>
				<!--
				<include name="run_source_jdk13.sh"/>
				-->
				<include name="plugins/**/*.py"/>
				<include name="plugins/**/*.java"/>
				<include name="plugins/**/*.xml"/>
				<!--<exclude name="plugins/**/*.jar"/>-->
				<exclude name="columba.jar"/>
				<exclude name="lib/jniwrap-2.4.jar"/>
				<exclude name="lib/winpack.jar"/>
				<exclude name="classes/**"/>
			</zipfileset>
		</zip>
	</target>

	<!-- create a source zip file for windows flavors, containing all sources and README, LICENSE, CHANGES, AUTHORS -->
	<!-- this task is for a source release -->
	<target name="zip-source-win32" depends="init,run-script,linefeeds-win32"
	description="create a source zip file for windows flavors containing all sources and README, LICENSE, CHANGES, AUTHORS">
		<echo message="the zipfile is going to columba-${version}-src.zip "/>
		<zip zipfile="columba-win32-${version}-src.zip" update="true">
			<zipfileset dir="." prefix="columba-win32-${version}-src">
				<include name="**/*.java"/>
				<include name="**/*.jar"/>
				<include name="**/*.xml"/>
				<include name="**/*.dtd"/>
				<include name="**/*.gif"/>
				<include name="**/*.jpeg"/>
				<include name="**/*.png"/>
				<include name="**/*.wav"/>
				<include name="**/*.properties"/>
				<include name="README"/>
				<include name="LICENSE"/>
				<include name="CHANGES"/>
				<include name="AUTHORS"/>
				<include name="run_source.bat"/>
				<!-- 
				<include name="run_source_jdk13.bat"/>
				-->
				<include name="plugins/**/*.py"/>
				<include name="plugins/**/*.java"/>
				<include name="plugins/**/*.xml"/>
				<include name="**/*.dll"/>
				<!--<exclude name="plugins/**/*.jar"/>-->
				<exclude name="columba.jar"/>
				<exclude name="classes/**"/>
			</zipfileset>
		</zip>
	</target>

	<!-- this target creates two zip-files, one for binary release and one for the source stuff -->
	<target name="zip" depends="zip-bin-unix,zip-bin-win32,zip-source-unix,zip-source-win32"
	description="this target creates two zip-files, one for binary release and one for the source stuff"/>

	<!-- this target creates two zip-files, one for binary release and one for the source stuff -->
	<!-- this is also the release target ;-0 -->
	<target name="release" depends="zip-bin-unix,zip-bin-win32,zip-source-unix,zip-source-win32,test"
	description=" this target creates two zip-files, one for binary release and one for the source stuff"/>

	<!-- signing jar-files for Java WebStart -->
        <!-- all libs and columba.jar need to be signed -->
        <!-- you need to specify the alias and the passwords on the commandline -->
	<property name="alias" value="TheColumbaProject" description="signing jar-files for Java WebStart"/>
        <property name="storepass" value="columba"/>
        <property name="keypass" value="columba"/>

        <target name="webstart">
         <signjar alias="${alias}" storepass="${storepass}" keypass="${keypass}">
          <fileset dir="${src}">
           <include name="columba.jar"/>
           <include name="lib/lucene-1.3-final.jar"/>
           <include name="lib/junit.jar"/>
           <include name="lib/jargs.jar"/>
           <include name="lib/plastic-1.2.0.jar"/>
           <include name="lib/forms-1.0.4.jar"/>
	   	   <include name="lib/jwizz-0.1.2.jar"/>
           <include name="lib/jscf-0.1.jar"/>
           <include name="lib/jdom.jar"/>
           <include name="lib/ristretto-1.0_RC2.jar" />
           <include name="lib/usermanual.jar"/>
           <include name="lib/frappucino-1.0pre1.jar"/>
           <include name="lib/macchiato-1.0pre1.jar"/>
          	
	       <!-- never sign JavaHelp, its already signed by SUN -->
	       <!--<include name="lib/jhall.jar"/>-->
	   	   
           <!-- never sign jniwrapper, its already signed by jniwrapper.com -->
           <!-- <include name="lib/jniwrap-2.4.jar"/> -->
           <!-- <include name="lib/winpack.jar"/> -->
          	
           <!-- jar encapsulates the win32 dll's -->
           <include name="lib/jniwraplib.jar"/>
          	
          </fileset>
         </signjar>
        </target>

	<!-- only for build the class-files -->
	<target name="build" depends="compile" description="only for build the class-files"/>

	<target name="doc" depends="document"/>

	<!-- to run the application via ant, this is good for testing and coding in xemacs -->
	<target name="run" depends="jar" description="to run the application via ant, this is good for testing and coding in xemacs">
		<java jar="${src}/columba.jar" fork="yes">
			<arg value="--debug"/>
		</java>
	</target>

	<!-- to clean up the dest-directory -->
	<target name="clean" description="to clean up the dest-directory">
		<delete dir="${dest}"/>
		<delete dir="${test-dest}"/>
	</target>

	<!-- create default package for translators -->
	<target name="i18n" description="create default package for translators">
 	<zip zipfile="default_i18n.zip" basedir="res" update="true">
		<include name="**/*.properties"/>
	</zip>
	</target>
</project>
