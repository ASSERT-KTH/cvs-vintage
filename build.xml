<?xml version="1.0" encoding="UTF-8"?>
<!--
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - The contents of this file are subject to the LGPL Licence 
 - 
 - Autor:               <a href="sebastien.chassande@inriaples.fr">Sebastien Chassande</a>
 - Carol Modifications :<a href="Guillaume.Riviere@inrialpes.fr">Guillaume RIVIERE</a>
 -
 - Compilation directive for Common Architecture for RMI ObjectWeb Layer (CAROL)  
 - 
 -->

<project name="carol" default="dist">


  <!-- directories source definition -->
  <property name="src" 		  value="${basedir}/src"/>
  <property name="doc" 		  value="${basedir}/doc"/>
  <property name="jdoc" 	  value="${basedir}/jdoc"/>
  <property name="config" 	  value="${basedir}/config"/>
  <property name="archive" 	  value="${basedir}/archive"/>
  <property name="test" 	  value="${basedir}/test"/>
  <property name="externals" 	  value="${basedir}/externals"/>
  <property name="ext" 	          value="${basedir}/ext"/>
  <property name="build"	value="${basedir}/output"/>
  <!--======================================================
  load the following user properties from a file:
  - build.compiler: Wich compiler do you want use ? (optional)
  - build: Where do you want generate compilate object ?
  - dist: Where do you want put the distribution ?
  - testResult: Where do you want put the test results ?
  =======================================================-->
  <property file="${config}/configure.properties"/>

  <!-- directories target definition -->
  <property name="dist.lib"        value="${dist}/lib"/>
  <property name="dist.jdoc"  	   value="${dist}/jdoc"/>
  <property name="dist.config"     value="${dist}/config"/>
  <property name="dist.doc"  	   value="${dist}/doc"/> 
  <property name="tmp"  	   value="${dist}/tmp"/> 


  <!-- joanthan jar properties -->
  <property name="jonathan.jar"   value="${externals}/jonathan.jar"/> 
  <property name="compiler.jeremie" value="org.objectweb.jeremie.tools.jrmic.JRMICompiler" />
  <property name="jonathan.jvmarg"  value="-Xbootclasspath/p:${test.externals}/jonathan.jar:${test.externals}/kilim.jar:${test.externals}/kilim-tools.jar:${test.externals}/nanoxml-lite-2.2.1.jar:${test.build}/classes:${test.ext}/jonathan.xml"/>

  <!-- externals classpath -->
  <path id="externals.classpath">
    <fileset dir="${externals}">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement location="${build}/classes"/>   
  </path>

  <!-- Building of carol compilation classpath (no externals needed) -->
  <path id="carol.classpath">
    <fileset dir="${externals}">
      <include name="**/*.jar"/>
    </fileset>   
    <pathelement location="${build}/classes"/>
  </path>

  <taskdef name="multipleAnt"
    classname="org.objectweb.util.ant.MultipleAnt"
    classpath="${config}/ow_util_ant_tasks.jar"/>
  
  <!-- **********************************-->
  <!-- *********    COMPILE    **********-->
  <!-- **********************************-->
  <!-- compile all -->
  <target name="compile" description="Compiles carol">
    <condition property="jonathan.jar.present">
      <available file="${jonathan.jar}"/>
    </condition>   
    <antcall target="compile.base"/>
    <antcall target="compile.stub"/> 
    <antcall target="compile.jonathan"/>
    <antcall target="compile.jvm.daemon"/>
    <antcall target="compile.cmi"/>
  </target>

  <!-- Compile base file -->
  <target name="compile.base" description="Compiles the CAROL base classes">
    <mkdir dir="${build}/classes"/>
    <javac 
      srcdir="${src}"
      destdir="${build}/classes"
      deprecation="${deprecation}"
      debug="${compile.debug}"
      nowarn="${compile.nowarn}"
      optimize="${compile.optimize}">
      <classpath refid="carol.classpath"/>
      <include name="**/*.java"/>
      <!-- exclude specific jonathan interception features -->
      <exclude name="**/org/objectweb/carol/rmi/jonathan/**/*.java"/>
      <!-- we didn'nt exclude the iiop and jrmp features because existed in all java 2 jdk (> 1.3)--> 
    </javac>     
  </target>

  <target name="compile.jvm.daemon">
    <rmic base="${build}/classes" compiler="sun"
      classname="org.objectweb.carol.util.bootstrap.ProcessesManager">
    <classpath refid="carol.classpath"/>
    </rmic>     
  </target>

  <target name="compile.stub"> 
    
    <!-- for sun jrmp  -->
    <rmic base="${build}/classes" compiler="sun"
      classname="org.objectweb.carol.jndi.wrapping.JNDIResourceWrapper">
      <classpath refid="carol.classpath"/>
    </rmic> 
    <rmic base="${build}/classes" compiler="sun"
      classname="org.objectweb.carol.jndi.wrapping.JNDIReferenceWrapper">
      <classpath refid="carol.classpath"/>
    </rmic>
    
     <!-- for sun iiop  -->
    <rmic base="${build}/classes" iiop="true" compiler="sun"
      classname="org.objectweb.carol.jndi.wrapping.JNDIResourceWrapper">
      <classpath refid="carol.classpath"/>
    </rmic> 
    <rmic base="${build}/classes" iiop="true" compiler="sun"
      classname="org.objectweb.carol.jndi.wrapping.JNDIReferenceWrapper">
      <classpath refid="carol.classpath"/>
    </rmic>
    <javac 
      srcdir="${src}"
      destdir="${build}/classes"
      deprecation="${deprecation}"
      debug="${compile.debug}"
      nowarn="${compile.nowarn}"
      optimize="${compile.optimize}">
      <classpath refid="carol.classpath"/>
      <include name="**/org/objectweb/carol/jndi/iiop/_*.java"/>
    </javac> 
    
    <!-- for jeremie -->
      <java classname="${compiler.jeremie}" fork="true" failonerror="true">
      <jvmarg line="${jonathan.jvmarg}"/>
      <arg value="-opt"/>
      <arg value="-owext"/>
      <arg value="-d"/>
      <arg path="${build}/classes"/>
      <arg value="org.objectweb.carol.jndi.wrapping.JNDIResourceWrapper"/>
      <arg value="org.objectweb.carol.jndi.wrapping.JNDIReferenceWrapper"/>
      <classpath refid="carol.classpath"/>
    </java>
   
    
  </target>

  <target name="compile.jonathan" if="jonathan.jar.present">
    <javac 
      srcdir="${src}"
      destdir="${build}/classes"
      deprecation="${deprecation}"
      debug="${compile.debug}"
      nowarn="${compile.nowarn}"
      optimize="${compile.optimize}">
      <classpath refid="externals.classpath"/>
      <!-- include specific rmi iiop interception features -->
      <include name="**/org/objectweb/carol/rmi/jonathan/**/*.java"/>
    </javac> 
  </target>

  <target name="compile.cmi">
    <rmic base="${build}/classes" classname="org.objectweb.carol.cmi.ClusterRegistryImpl">
    <classpath refid="carol.classpath"/>
    </rmic>
    <rmic base="${build}/classes" classname="org.objectweb.carol.cmi.jndi.ReferenceImpl">
    <classpath refid="carol.classpath"/>
    </rmic>
  </target>

  <!-- **************************************-->
  <!-- *********        DIST       **********-->
  <!-- **************************************-->
  <target name="dist" description="Make a carol distribution in ${dist} directory (default)">
    <antcall target="jar"/>
    <!--<antcall target="jdoc"/>-->
    <antcall target="doc"/>
    <antcall target="config"/>
  </target>

  <target name="build.test" depends="dist" description="Make a test distribution (carol jar is needed)">
    <ant antfile="${test}/build.xml" dir="${test}" target="dist"/>
  </target>

  <target name="run.tests" depends="build.test" description="Run Test the carol distribution">
    <ant antfile="${test}/build.xml" dir="${test}" target="run.tests"/>
  </target> 

  <!-- *************************************-->
  <!-- *********        JAR       **********-->
  <!-- *************************************-->
  <!-- This target call every default target of each xml file
       present in ${archive} directory -->
  <target name="jar" depends="compile" description="Build carol jar">
    <mkdir dir="${dist.lib}"/>
    <!-- copy default file in the compile base -->
    <copy file="${ext}/carol-defaults.properties" tofile="${build}/classes/carol-defaults.properties"/>
    <multipleAnt dir="${archive}" />
    <copy file="${externals}/commons-cli.jar" tofile="${dist.lib}/commons-cli.jar"/>  
  </target>


  <!-- *************************************-->
  <!-- *********        JDOC      **********-->
  <!-- *************************************-->
  <!-- This target call every default target of each xml file
  present in ${jdoc} directory -->
  <target name="jdoc" description="Build carol java documentation (javadoc)"> 
    <mkdir dir="${dist.jdoc}"/>
    <condition property="interceptor.classes.presents">
      <available classname="org.omg.PortableInterceptor.ORBInitInfo">
	<classpath refid="externals.classpath"/>
      </available>
    </condition>
    <javadoc
      packagenames="org.objectweb.*"
      defaultexcludes="yes"
      destdir="${dist.jdoc}"
      windowtitle="Objectweb Common Architecture for RMI ObjectWeb Layer API"
      doctitle="Objectweb Common Architecture for RMI ObjectWeb Layer "
      author="true" version="true" use="true">
      <sourcepath>
	<pathelement path="${src}"/>
	<pathelement path="${build}/classes"/>
      </sourcepath>
      <classpath refid="externals.classpath"/>
    </javadoc>
  </target>

  <!-- *************************************-->
  <!-- *********        DOC      **********-->
  <!-- *************************************-->
  <!-- This target simply copy the present in ${doc} directory  -->
  <target name="doc" description="Build carol documentation">
    <mkdir dir="${dist.doc}/usermanual"/>  
    <copy todir="${dist.doc}/usermanual">
      <fileset dir="${doc}/usermanual"/>
    </copy>
  </target>

  <!-- *************************************-->
  <!-- *********      CONFIG    ************-->
  <!-- *************************************-->
  <!-- This target simply copy the present ext 
  in ${dist.config} directory and copy the ext/README 
  in the ${dist} directory -->
  <target name="config" description="Build carol configuration directory">
    <mkdir dir="${dist.config}"/>
    <copy file="${ext}/carol.properties" tofile="${dist.config}/carol.properties"/>  
  </target>


  <!-- ************************************-->
  <!-- *********     CLEAN       **********-->
  <!-- ************************************-->
  <target name="clean" description="Make a clean (carol and carol tests)">
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>

  <!-- ***********************************************-->
  <!-- *********     PACKAGE (thanks Jeff!)      *******-->
  <!-- ***********************************************-->
  <target name="packages" depends="clean,package.src,package.jar"
    if="version"
    description="--> create two packages (source and binaries)
    (version is specified by -Dversion=x.y.z)"/>
  
  <target name="package.jar" depends="dist" if="version">
    <mkdir dir="${tmp}" />
    <copy todir="${tmp}/carol-${version}" includeEmptyDirs="no">
      <fileset dir="${dist}" />
    </copy>
    <tar tarfile="${tmp}/carol-${version}.tar"
      longfile="gnu"
      basedir="${tmp}/"
      includes="carol-${version}/**" />
    <gzip zipfile="${dist}/../carol-${version}.tgz"
      src="${tmp}/carol-${version}.tar" />
    <delete dir="${tmp}"/>
  </target>
  
  <target name="package.src" depends="clean" if="version">
    <mkdir dir="${tmp}" />
    <copy todir="${tmp}/carol-${version}-src" includeEmptyDirs="no">
      <fileset dir="${basedir}" />
    </copy>
    <tar tarfile="${tmp}/carol-${version}-src.tar"
      longfile="gnu"
      basedir="${tmp}/"
      includes="carol-${version}-src/**" />
    <gzip zipfile="${dist}/../carol-${version}-src.tgz"
      src="${tmp}/carol-${version}-src.tar" />
    <delete dir="${tmp}"/>
  </target>


  <!-- **********************************-->
  <!-- *********     HELP       **********-->
  <!-- **********************************-->
  <!-- print the usage of this ant file -->
  <target name="help">
    <echo message="The available target is the following:"/>
    <echo message="  compile: compiles the product into ${build}"/>
    <echo message="  dist: creates all distributions of the product into ${dist}"/>
    <echo message="  clean: removes all produced files (carol and test)"/>
    <echo message="  jar: creates all jars ${dist.lib}"/>
    <echo message="The available test building target is the following:"/>
    <echo message="  build.test: creates all distributions of the product into ${dist.test}"/>
    <echo message="  dist.test:  launch all tests distributions of the product into ${dist.test}"/>
  </target>

</project>
