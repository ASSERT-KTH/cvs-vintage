<?xml version="1.0"?>

<project name="columba" basedir="." default="build">
	<description> 
		This is the Columba build system. 
		The buildfiles ars separated into this file and a 
		buildfile for each component's core and test.  
		
		Quickstart:
		ant run	

		Have fun ... your Columba Team!	
	</description>	

	<!-- external definitions -->
	<property file="lib.properties" />	
	<property file="src.properties" />

	<!-- definition of the checkstyle task (checkstyle.sf.net) -->
	<taskdef resource="checkstyletask.properties" classpath="${lib.checkstyle}"/>
	
	
	<!-- definition of the jreleasinfo task (jreleasinfo.sf.net) -->
	<taskdef 
	   name="jreleaseinfo" 
	   classname="ch.oscg.jreleaseinfo.anttask.JReleaseInfoAntTask" >
	   <classpath>
	      <pathelement location="${lib.jreleaseinfo}"/>
	   </classpath>
	</taskdef>	
	
	
	<target name="checkstyle" description="Checks the sources against our coding guidelines">
		<checkstyle config="${basedir}/sun_checks.xml" >
			<fileset dir="${src.base}" includes="**/*.java"/>
		</checkstyle>
	</target>

	
	<!-- validates the xml resources -->
	<target name="validate-xml-resources" description="Valdidates the XML resources">
		<xmlvalidate failonerror="no" warn="yes">
			<fileset dir="${res.base}" includes="**/*.xml"/>
		</xmlvalidate>
	</target>
	
	
	<target name="init" description="Initialises the build system">
		
		<echo message="you are running java version ${ant.java.version}"/>

		<mkdir dir="${dest}"/>
		<mkdir dir="${report.base}"/>
		<mkdir dir="${doc.base}" />
		
		<property name="debugbuild" value="true" />
		
		<tstamp/>
		<property name="version" value="${DSTAMP}" />
		
		<!-- Define the Classpaths -->
		<path id="compile.classpath" >
			<pathelement path="${lib.forms}"/>
			<pathelement path="${lib.jscf}"/>
			<pathelement path="${lib.jargs}"/>
			<pathelement path="${lib.jwizz}"/>
			<pathelement path="${lib.jhall}"/>
			<pathelement path="${lib.ristretto}"/>
			<pathelement path="${lib.macchiato}"/>
			<pathelement path="${lib.frappucino}"/>
			<pathelement path="${lib.lucene}"/>			
			<pathelement path="${lib.plastic}"/>			
			<pathelement path="${lib.jniwrap}"/>
			<pathelement path="${lib.winpack}"/>			
			<pathelement path="${lib.jdom}"/>			
			<pathelement path="${lib.jpim}"/>			
			<pathelement path="${lib.je}"/>						
		</path>
		<path id="run.classpath" >
			<path refid="compile.classpath" />
			<pathelement path="${manual.jar}" />
			<pathelement path="${dest}"/>
		</path>			
		
		
	</target>

	<target name="init-test" depends="init" description="Initialises the build system for Unit testing">
		<mkdir dir="${test.dest}"/>

		<path id="compile.test.classpath" >
			<path refid="compile.classpath"/>
			<pathelement path="${dest}"/>
			<pathelement path="${lib.junit}"/>
		</path>
		<path id="run.test.classpath" >
			<path refid="compile.test.classpath" />
			<pathelement path="${dest}"/>
			<pathelement path="${test.dest}"/>
		</path>			
	</target>
	
	<target name="init-rpm" description="Initialises the RPM directories">
		<mkdir dir="${dist.rpm}/BUILD" />
		<mkdir dir="${dist.rpm}/SRPMS" />
		<mkdir dir="${dist.rpm}/RPMS" />
		<mkdir dir="${dist.rpm}/SOURCES" />
		<mkdir dir="${dist.rpm}/SPECS" />
	</target>
	
	
	<target name="init-webstart" depends="init" description="Initialises the build system for Webstart">
		<!-- signing jar-files for Java WebStart -->
		<!-- all libs and columba.jar need to be signed -->
		<!-- you need to specify the alias and the passwords on the commandline -->
		<property name="alias" value="TheColumbaProject" description="signing jar-files for Java WebStart"/>
		<property name="storepass" value="columba"/>
		<property name="keypass" value="columba"/>

		<fileset dir="${basedir}" id="sign.jars" >
			<include name="${basedir}\columba.jar"/>
			<include name="${lib.forms}"/>
			<include name="${lib.jscf}"/>
			<include name="${lib.jargs}"/>
			<include name="${lib.jwizz}"/>
			<include name="${lib.ristretto}"/>
			<include name="${lib.macchiato}"/>
			<include name="${lib.frappucino}"/>
			<include name="${lib.lucene}"/>			
			<include name="${lib.plastic}"/>			
			<include name="${lib.jniwraplib}"/>
			<include name="${lib.jdom}"/>			
			<include name="${lib.jpim}"/>			
			<include name="${lib.je}"/>	
			<!-- never sign JavaHelp, its already signed by SUN -->
			<!-- never sign jniwrapper, its already signed by jniwrapper.com -->
		</fileset>			
	</target>
	
	<target name="version" depends="init" description="Tags Columba with the version info">
			
		<jreleaseinfo
		   className="ColumbaVersionInfo" 
		   packageName="org.columba.core.main"
		   targetDir="${src.columba.core}"
		   version="${version}" >
		</jreleaseinfo>
		
		<javac srcdir="${src.columba.core}/org/columba/core/main/" includes="ColumbaVersionInfo.java" destdir="${dest}" />
		
		<delete file="${src.columba.core}/org/columba/core/main/ColumbaVersionInfo.java"/>
	</target>
	
	<target name="update" description="Updates the sources when checked out via CVS">
		<cvs command="update"/>
		
		<!-- Run clean to ensure that everything is build correctly after the update! (tstich) -->
		<ant target="clean" />
	</target>

	<target name="doc" depends="init" description="Creates the JavaDocs of the Columba API in doc/">
		<javadoc destdir="${doc.api}" doctitle="Columba ${version} API Documentation" windowtitle="Columba API Documentation" link="http://java.sun.com/products/jdk/1.4/docs/api">
			<classpath refid="compile.classpath" />
			<packageset dir="${src.columba.core}"/>
			<packageset dir="${src.mail.core}"/>
			<packageset dir="${src.addressbook.core}"/>
			<group title="Addressbook" packages="org.columba.addressbook*"/>
			<group title="Core" packages="org.columba.core*"/>
			<group title="Mail" packages="org.columba.mail*"/>
		</javadoc>
	</target>

	
	<target name="copy-resources" description="Copies all resources to the classes folder">
		<copy todir="${dest}">
			<fileset dir="${res.base}">
				<include name="**"/>
			</fileset>
		</copy>
	</target>

	<!-- compile the classes -->
	<target name="compile" depends="init, copy-resources, version"  description="Compiles the Columba core components">
		<echo message="the classes are going to ${dest} "/>
		<javac destdir="${dest}">
			<src path="${src.columba.core}"/>
			<src path="${src.mail.core}"/>
			<src path="${src.addressbook.core}"/>
			<exclude name="**/*.html"/>
			<exclude name="**/*.xml"/>
			<classpath refid="compile.classpath" />
		</javac>
		
		<!-- This will be the way to compile each component separately 
			after they are completetly separated through API Interfaces (tstich) 
		
		<ant dir="${src.columba.core}" target="compile" inheritrefs="true" />
		<ant dir="${src.mail.core}" target="compile" inheritrefs="true" />
		<ant dir="${src.addressbook.core}" target="compile" inheritrefs="true" />
		-->
	</target>

	
	<!-- compile the test classes -->
	<target name="compile-test" depends="compile, init-test"  description="Compiles the Unit tests">
		<echo message="the classes are going to ${test.dest} "/>
		<ant dir="${src.columba.test}" target="compile" inheritrefs="true"/>
		<ant dir="${src.mail.test}" target="compile" inheritrefs="true"/>
		<ant dir="${src.addressbook.test}" target="compile" inheritrefs="true"/>
	</target>

	<!-- pack the files into one jar file with automatic manifest file -->
	<target name="jar" depends="compile" description="Creates the Columba.jar file.">
		<echo message="the jar file is going to be columba.jar " />
		<jar basedir="${dest}" jarfile="columba.jar">
			<include name="**"/>
			<exclude name="columba.jar"/>
			<exclude name="README"/>
			<exclude name="CHANGES"/>
			<exclude name="AUTHORS"/>
			<include name="res/ACKNOWLEDGEMENT"/>
			<include name="res/CONTRIBUTORS"/>
			<include name="res/LICENSE"/>
			<exclude name="run.bat"/>
			<exclude name="run.sh"/>
			<exclude name="run_source.bat"/>
			<exclude name="run_source.sh"/>
			<exclude name="**/*.zip"/>
			<exclude name="docs/**"/>
			<exclude name="plugins/**"/>
			<exclude name="lib/**"/>
			<exclude name="native/**"/>
			<manifest>
				<attribute name="Main-Class" value="org.columba.core.main.Main" />
				<attribute name="Class-Path" value=" ${manual.jar} ${lib.junit} ${lib.lucene} ${lib.jargs} ${lib.jwizz} ${lib.plastic} ${lib.jhall} ${lib.forms} ${lib.ristretto} ${lib.jscf} ${lib.macchiato} ${lib.frappucino} ${lib.winpack} ${lib.jniwrap} ${lib.jdom} ${lib.jpim} ${lib.je}"/>
				<attribute name="Sealed" value="false"/>
			</manifest>
		</jar>
	</target>

	<!-- convert line-endings -->
	<target name="linefeeds-win32" description="Converts the line-endings">
		<fixcrlf srcdir="${dest}"
       eol="crlf"
       includes="README, AUTHORS, LICENSE, CHANGES, RUN, run.bat, run_source.bat"
  	/>
	</target>

	<!-- convert line-endings -->
	<target name="linefeeds-unix" description="Converts the line-endings">
		<fixcrlf srcdir="${dest}"
       eol="lf"
       includes="README, AUTHORS, LICENSE, CHANGES, RUN, run.sh, run_source.sh"
  	/>
	</target>

	<!-- run test for all defined testcases -->
	<target name="test" depends="compile-test"  description="Runs all Unit tests. XML reports in report/">
		<ant dir="${src.columba.test}" target="test" inheritrefs="true"/>		
		<ant dir="${src.mail.test}" target="test" inheritrefs="true"/>		
		<ant dir="${src.addressbook.test}" target="test" inheritrefs="true"/>		
	</target>

	<target name="test-report" depends="test" description="Runs all Unit tests. Html-report in report/">
		<junitreport todir="${report.base}">
		  <fileset dir="${report.base}">
		    <include name="TEST-*.xml"/>
		  </fileset>
		  <report format="frames" todir="${report.base}/html"/>
		</junitreport>		
	</target>	

	<!-- create a release zip file for linux and unix flavors, containing the jar file and README, LICENSE, CHANGES, AUTHORS -->
	<!-- this task is for a binary release -->
	<target name="zip-bin-unix" depends="jar, linefeeds-unix"
	description="Creates packaged Columba release">
		<echo message="the zipfile is going to columba-unix-${version}-bin.zip "/>
		<zip zipfile="columba-unix-${version}-bin.zip" update="true">
			<zipfileset dir="." prefix="columba-unix-${version}-bin">
				<include name="README"/>
				<include name="AUTHORS"/>
				<include name="LICENSE"/>
				<include name="CHANGES"/>
				<include name="run.sh"/>
				<include name="columba.jar"/>
				<include name="**/*.jar"/>
				<exclude name="lib/checkstyle-all-2.1.jar"/>
				<exclude name="lib/jcoverage.jar"/>
				<exclude name="lib/jniwrap-2.4.jar"/>
				<exclude name="lib/winpack.jar"/>
				<exclude name="lib/junit.jar"/>
				<exclude name="plugins/**" />
				<exclude name="classes/**"/>
			</zipfileset>
		</zip>
	</target>

	<!-- create a release zip file for windows flavors, containing the jar file and README, LICENSE, CHANGES, AUTHORS -->
	<!-- this task is for a binary release -->
	<target name="zip-bin-win32" depends="jar, linefeeds-win32"
	description="Creates packaged Columba release">
		<echo message="the zipfile is going to columba-win32-${version}-bin.zip "/>
		<zip zipfile="columba-win32-${version}-bin.zip" update="true">
			<zipfileset dir="." prefix="columba-win32-${version}-bin">
				<include name="README"/>
				<include name="AUTHORS"/>
				<include name="LICENSE"/>
				<include name="CHANGES"/>
				<include name="run.bat"/>
				<include name="columba.jar"/>
				<include name="**/*.jar"/>
				<include name="**/*.dll"/>
				<!--
				<include name="plugins/**/*.py"/>
				<include name="plugins/**/*.jar"/>
				<include name="plugins/**/plugin.xml"/>
				-->
				<exclude name="lib/checkstyle-all-2.1.jar"/>
				<exclude name="lib/jcoverage.jar"/>
				<exclude name="lib/junit.jar"/>
				<exclude name="plugins/**" />
				<exclude name="classes/**"/>
			</zipfileset>
			<zipfileset dir="." includes="native/win32/launcher/Columba.exe" fullpath="columba-win32-${version}-bin/Columba.exe"/>
			<zipfileset dir="." includes="native/win32/launcher/Columba.lap" fullpath="columba-win32-${version}-bin/Columba.lap"/>
		</zip>
	</target>

	<!-- create a source zip file for linux and unix flavors containing all sources and README, LICENSE, CHANGES, AUTHORS -->
	<!-- this task is for a source release -->
	<target name="zip-source-unix" depends="init,linefeeds-unix"
	description="Creates packaged Columba release">
		<echo message="the zipfile is going to columba-${version}-src.zip "/>
		<zip zipfile="columba-unix-${version}-src.zip" update="true">
			<zipfileset dir="." prefix="columba-unix-${version}-src">
				<include name="**/*.java"/>
				<include name="**/*.jar"/>
				<include name="**/*.xml"/>
				<include name="**/*.dtd"/>
				<include name="**/*.gif"/>
				<include name="**/*.jpeg"/>
				<include name="**/*.png"/>
				<include name="**/*.wav"/>
				<include name="**/*.properties"/>
				<include name="README"/>
				<include name="LICENSE"/>
				<include name="CHANGES"/>
				<include name="AUTHORS"/>
				<include name="run_source.sh"/>
				<!--
				<include name="run_source_jdk13.sh"/>
				-->
				<include name="plugins/**/*.py"/>
				<include name="plugins/**/*.java"/>
				<include name="plugins/**/*.xml"/>
				<!--<exclude name="plugins/**/*.jar"/>-->
				<exclude name="columba.jar"/>
				<exclude name="lib/jniwrap-2.4.jar"/>
				<exclude name="lib/winpack.jar"/>
				<exclude name="classes/**"/>
			</zipfileset>
		</zip>
	</target>

	<!-- create a source zip file for windows flavors, containing all sources and README, LICENSE, CHANGES, AUTHORS -->
	<!-- this task is for a source release -->
	<target name="zip-source-win32" depends="init,linefeeds-win32"
	description="Creates packaged Columba release">
		<echo message="the zipfile is going to columba-${version}-src.zip "/>
		<zip zipfile="columba-win32-${version}-src.zip" update="true">
			<zipfileset dir="." prefix="columba-win32-${version}-src">
				<include name="**/*.java"/>
				<include name="**/*.jar"/>
				<include name="**/*.xml"/>
				<include name="**/*.dtd"/>
				<include name="**/*.gif"/>
				<include name="**/*.jpeg"/>
				<include name="**/*.png"/>
				<include name="**/*.wav"/>
				<include name="**/*.properties"/>
				<include name="README"/>
				<include name="LICENSE"/>
				<include name="CHANGES"/>
				<include name="AUTHORS"/>
				<include name="run_source.bat"/>
				<!-- 
				<include name="run_source_jdk13.bat"/>
				-->
				<include name="plugins/**/*.py"/>
				<include name="plugins/**/*.java"/>
				<include name="plugins/**/*.xml"/>
				<include name="**/*.dll"/>
				<!--<exclude name="plugins/**/*.jar"/>-->
				<exclude name="columba.jar"/>
				<exclude name="classes/**"/>
			</zipfileset>
		</zip>
	</target>

	<!-- this target creates two zip-files, one for binary release and one for the source stuff -->
	<!-- this is also the release target ;-0 -->
	<target name="release" depends="test-report, zip-bin-unix,zip-bin-win32,zip-source-unix,zip-source-win32"
	description="Builds a complete Columba rellease"/>

	<target name="webstart" depends="init-webstart, jar" description="Signs all jars for use with Java Webstart">
		<signjar alias="${alias}" storepass="${storepass}" keypass="${keypass}">
			<fileset refid="sign.jars" />
		</signjar>
	</target>

	<!-- only for build the class-files -->
	<target name="build" depends="compile" description="Compiles Columba"/>

	<!-- to run the application via ant, this is good for testing and coding in xemacs -->
	<target name="run" depends="compile"  description="Starts Columba">
		<java classname="org.columba.core.main.Main" fork="yes">
			<classpath refid="run.classpath" />
		</java>
	</target>

	<target name="run-debug" depends="compile"  description="Starts Columba with the --debug option">
		<java classname="org.columba.core.main.Main" fork="yes">
			<arg value="--debug"/>
			<classpath refid="run.classpath" />
		</java>
	</target>

	<!-- to clean up the dest-directory -->
	<target name="clean"  description="Cleans the build system">
		<delete dir="${dest}"/>
		<delete dir="${test.dest}"/>
		<delete dir="${report.base}"/>
		<delete dir="${doc.base}" />
		<delete dir="${dist.rpm}/BUILD" />
		<delete dir="${dist.rpm}/SRPMS" />
		<delete dir="${dist.rpm}/RPMS" />
		<delete dir="${dist.rpm}/SOURCES" />
		<delete dir="${dist.rpm}/SPECS" />
		<delete file="columba.jar"/>		
	</target>

	<!-- create default package for translators -->
	<target name="i18n"  description="Creates the default package for translations">
		<zip zipfile="default_i18n.zip" basedir="${res.base}" update="true">
			<include name="**/*.properties"/>
		</zip>
	</target>
	
	<target name="rpm" depends="init-rpm, jar" description="Creates the RPM package">
		<copy toDir="${dist.rpm}/SPECS/" file="${dist.rpm}/columba.spec"/>
		<replace file="${dist.rpm}/SPECS/columba.spec" token="@version@" value="${version}"/>
		
		<mkdir dir="${dist.rpm}/SOURCES/columba-${version}" />
		<copy todir="${dist.rpm}/SOURCES/columba-${version}" >
			<fileset dir="${basedir}" >
				<include name="README"/>
				<include name="AUTHORS"/>
				<include name="LICENSE"/>
				<include name="CHANGES"/>
				<include name="columba.jar"/>
				<include name="${lib.forms}"/>
				<include name="${lib.jscf}"/>
				<include name="${lib.jargs}"/>
				<include name="${lib.jwizz}"/>
				<include name="${lib.jhall}"/>
				<include name="${lib.ristretto}"/>
				<include name="${lib.macchiato}"/>
				<include name="${lib.frappucino}"/>
				<include name="${lib.lucene}"/>			
				<include name="${lib.plastic}"/>			
				<include name="${lib.jdom}"/>			
				<include name="${lib.jpim}"/>			
				<include name="${lib.je}"/>									
			</fileset>
		</copy>

		<copy toDir="${dist.rpm}/SOURCES/columba-${version}/" file="${dist.rpm}/run.sh"/>
		<replace file="${dist.rpm}/SOURCES/columba-${version}/run.sh" token="@version@" value="${version}"/>
		<chmod file="${dist.rpm}/SOURCES/columba-${version}/run.sh" perm="a+x" />
		
		<tar destfile="${dist.rpm}/SOURCES/columba-${version}.tar" >
			<tarfileset dir="${dist.rpm}/SOURCES/columba-${version}" prefix="columba-${version}">
				<include name="**" />
			</tarfileset>
		</tar>
		
		<rpm specFile="columba.spec" command="-bb --target noarch" topDir="${dist.rpm}" error="${dist.rpm}/error.txt" output="${dist.rpm}/output.txt" />
	</target>
</project>
