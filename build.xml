<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id: build.xml,v 1.14 2001/08/27 09:01:37 user57 Exp $ -->

<project default="main">

  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->

  <!-- Load Buildmagic extention tasks. -->
  <taskdef name="taskdef" classname="planet57.tools.buildmagic.task.Taskdef"/>
  <taskdef resource="planet57/tools/buildmagic/task/autoload.properties"/>

  <!-- Setup the basic project roots. -->
  <path id="project.root"><pathelement location=".."/></path>
  <property name="project.root" refid="project.root"/>
  <property name="control.root" value="${project.root}/build"/>
  
  <!-- Include user and project property overrides. -->
  <property file="${user.home}/.buildmagic.properties"/>
  <property file="${user.home}/.ant.properties"/>
  <property file="${control.root}/local.properties"/>

  <!-- Setup the basic environment for a project build module. -->
  <property name="project.output" value="${control.root}/output"/>
  <property name="project.release" value="${project.output}"/>
  <property name="tools.root" value="${project.root}/tools"/>
  <property name="thirdparty.root" value="${project.root}/thirdparty"/>

  <!-- Setup the basic environment for a source module. -->
  <property name="module.root" value="${basedir}"/>
  <property name="module.source" value="${module.root}/src"/>
  <property name="module.output" value="${module.root}/output"/>
  <property name="module.build" value="${module.output}"/>
  <property name="module.release" value="${module.output}"/>
  <property file="${module.root}/local.properties"/>

  <!-- Initialize the build system. -->
  <target name="init" unless="initialized-already" depends="init-buildlog">
    <tstamp>
      <format property="build.number" pattern="yyyyMMddHHmm"/>
    </tstamp>
    <property name="build.id" value="DEV"/>

    <property resource="planet57/tools/buildmagic/common.properties"/>
    <property resource="planet57/tools/buildmagic/task.properties"/>

    <moduleinfo/>
    <resolver force="${buildmagic.resolveproperties.force}"/>
    <propertyfilter all="${buildmagic.propertyfilter.all}"/>
    <property name="initialized-already" value="true"/>
  </target>

  <target name="init-buildlog" unless="buildlog-disabled">
    <record name="${basedir}/build.log" append="no" loglevel="info"/>
  </target>


  <!-- ================================================================== -->
  <!-- Module Configuration                                               -->
  <!-- ================================================================== -->

  <!-- Module name(s) & version -->
  <property name="module.name" value="server"/>
  <property name="module.Name" value="JBoss Server"/>
  <property name="module.version" value="2.5alpha"/>


  <!-- ================================================================== -->
  <!-- Tool Configuration                                                 -->
  <!-- ================================================================== -->

  <!-- No non-standard tools are required for this module. -->


  <!-- ================================================================== -->
  <!-- Library Configuration                                              -->
  <!-- ================================================================== -->

  <!-- Java Naming and Directory Interface (JNDI) -->
  <property name="sun.jndi.root" value="${thirdparty.root}/sun/jndi"/>
  <property name="sun.jndi.lib" value="${sun.jndi.root}/lib"/>
  <path id="sun.jndi.classpath">
    <pathelement path="${sun.jndi.lib}/jndi.jar"/>
  </path>

  <!-- Java Management Extensions (JMX) -->
  <property name="sun.jmx.root" value="${thirdparty.root}/sun/jmx"/>
  <property name="sun.jmx.lib" value="${sun.jmx.root}/lib"/>
  <path id="sun.jmx.classpath">
    <pathelement path="${sun.jmx.lib}/jmxri.jar"/>
  </path>

  <!-- Java API for XML Processing (JAXP) -->
  <property name="sun.jaxp.root" value="${thirdparty.root}/sun/jaxp"/>
  <property name="sun.jaxp.lib" value="${sun.jaxp.root}/lib"/>
  <path id="sun.jaxp.classpath">
    <fileset dir="${sun.jaxp.lib}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- Java Authentication and Authorization Service (JAAS) -->
  <property name="sun.jaas.root" value="${thirdparty.root}/sun/jaas"/>
  <property name="sun.jaas.lib" value="${sun.jaas.root}/lib"/>
  <path id="sun.jaas.classpath">
    <pathelement path="${sun.jaas.lib}/jaas.jar"/>
  </path>

  <!-- JavaBeans Activation Framework (JAF) -->
  <property name="sun.jaf.root" value="${thirdparty.root}/sun/jaf"/>
  <property name="sun.jaf.lib" value="${sun.jaf.root}/lib"/>
  <path id="sun.jaf.classpath">
    <pathelement path="${sun.jaf.lib}/activation.jar"/>
  </path>

  <!-- JavaMail -->
  <property name="sun.javamail.root" value="${thirdparty.root}/sun/javamail"/>
  <property name="sun.javamail.lib" value="${sun.javamail.root}/lib"/>
  <path id="sun.javamail.classpath">
    <pathelement path="${sun.javamail.lib}/mail.jar"/>
  </path>

  <!-- Java Transaction Service (JTS) -->
  <property name="sun.jts.root" value="${thirdparty.root}/sun/jts"/>
  <property name="sun.jts.lib" value="${sun.jts.root}/lib"/>
  <path id="sun.jts.classpath">
    <pathelement path="${sun.jts.lib}/jts.jar"/>
  </path>

  <!-- Log4j -->
  <property name="apache.log4j.root" value="${thirdparty.root}/apache/log4j"/>
  <property name="apache.log4j.lib" value="${apache.log4j.root}/lib"/>
  <path id="apache.log4j.classpath">
    <pathelement path="${apache.log4j.lib}/log4j.jar"/>
  </path>

  <!-- EDU.oswego.cs.dl.util.concurrent -->
  <property name="oswego.concurrent.root" value="${thirdparty.root}/oswego/concurrent"/>
  <property name="oswego.concurrent.lib" value="${oswego.concurrent.root}/lib"/>
  <path id="oswego.concurrent.classpath">
    <pathelement path="${oswego.concurrent.lib}/concurrent.jar"/>
  </path>

  <!-- JPL-Util -->
  <property name="gjt.jpl-util.root" value="${thirdparty.root}/gjt/jpl-util"/>
  <property name="gjt.jpl-util.lib" value="${gjt.jpl-util.root}/lib"/>
  <path id="gjt.jpl-util.classpath">
    <fileset dir="${gjt.jpl-util.lib}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- JUnit -->
  <property name="junit.junit.root" value="${thirdparty.root}/junit/junit"/>
  <property name="junit.junit.lib" value="${junit.junit.root}/lib"/>
  <path id="junit.junit.classpath">
    <pathelement path="${junit.junit.lib}/junit.jar"/>
  </path>

  <!-- JavaGroups -->
  <property name="javagroups.javagroups.root" value="${thirdparty.root}/javagroups/javagroups"/>
  <property name="javagroups.javagroups.lib" value="${javagroups.javagroups.root}/lib"/>
  <path id="javagroups.javagroups.classpath">
    <pathelement path="${javagroups.javagroups.lib}/JavaGroups.jar"/>
  </path>

  <!-- JSR 77 -->
  <property name="sun.jsr77.root" value="${thirdparty.root}/sun/jsr77"/>
  <property name="sun.jsr77.lib" value="${sun.jsr77.root}/lib"/>
  <path id="sun.jsr77.classpath">
    <pathelement path="${sun.jsr77.lib}/jsr77.jar"/>
  </path>

  <!-- The combined library classpath -->
  <path id="library.classpath">
    <path refid="sun.jndi.classpath"/>
    <path refid="sun.jmx.classpath"/>
    <path refid="sun.jaxp.classpath"/>
    <path refid="sun.jaas.classpath"/>
    <path refid="sun.jaf.classpath"/>
    <path refid="sun.javamail.classpath"/>
    <path refid="sun.jts.classpath"/>
    <path refid="apache.log4j.classpath"/>
    <path refid="gjt.jpl-util.classpath"/>
    <path refid="oswego.concurrent.classpath"/>
    <path refid="junit.junit.classpath"/>
    <path refid="sun.jsr77.classpath"/>
  </path>


  <!-- ================================================================== -->
  <!-- Dependent Module Configuration                                     -->
  <!-- ================================================================== -->
 
  <!-- J2EE -->
  <property name="jboss.j2ee.root" value="${project.root}/j2ee/output"/>
  <property name="jboss.j2ee.lib" value="${jboss.j2ee.root}/lib"/>
  <path id="jboss.j2ee.classpath">
    <pathelement path="${jboss.j2ee.lib}/jboss-j2ee.jar"/>
  </path>

  <!-- Naming -->
  <property name="jboss.naming.root" value="${project.root}/naming/output"/>
  <property name="jboss.naming.lib" value="${jboss.naming.root}/lib"/>
  <path id="jboss.naming.classpath">
    <pathelement path="${jboss.naming.lib}/jnpserver.jar"/>
  </path>

  <!-- The combined depedant module classpath -->
  <path id="dependentmodule.classpath">
    <path refid="jboss.j2ee.classpath"/>
    <path refid="jboss.naming.classpath"/>
  </path>


  <!-- ================================================================== -->
  <!-- Task Configuration                                                 -->
  <!-- ================================================================== -->

  <!-- The combined thirdparty classpath -->
  <path id="thirdparty.classpath">
    <path refid="library.classpath"/>
    <path refid="dependentmodule.classpath"/>
  </path>

  <!-- This module is based on Java 1.2 -->
  <property name="javac.target" value="1.2"/>

  <!-- classpath and local.classpath must have a value using with a path -->
  <property name="classpath" value=""/>
  <property name="local.classpath" value=""/>

  <!-- The classpath required to build classes. -->
  <path id="javac.classpath">
    <pathelement path="${classpath}"/>
    <pathelement path="${local.classpath}"/>
    <path refid="thirdparty.classpath"/>
  </path>

  <!-- Packages to include when generating api documentation -->
  <property name="javadoc.packages" value="org.jboss.*"/>

  <!-- The classpath required to build javadocs. -->
  <path id="javadoc.classpath">
    <path refid="javac.classpath"/>
  </path>

  <!-- Override JUnit defaults -->
  <property name="junit.timeout" value="240000"/> <!-- 4 minutes -->
  <property name="junit.batchtest.todir" value="${build.reports}"/>
  <property name="junit.jvm.options" value="-client"/>

  <!-- RMIC should generate stubs compatible with Java 1.2+ -->
  <property name="rmic.stubVersion" value="1.2"/>

  <!-- Where source files live -->
  <property name="source.java" value="${module.source}/main"/>
  <property name="source.etc" value="${module.source}/etc"/>
  <property name="source.bin" value="${module.source}/bin"/>
  <property name="source.docs" value="${module.source}/docs"/>
  <property name="source.resources" value="${module.source}/resources"/>

  <!-- Where build generated files will go -->
  <property name="build.classes" value="${module.build}/classes"/>
  <property name="build.jars" value="${module.build}/lib"/>
  <property name="build.api" value="${module.build}/api"/>
  <property name="build.etc" value="${module.build}/etc"/>
  <property name="build.bin" value="${module.build}/bin"/>
  <property name="build.docs" value="${module.build}/docs"/>
  <property name="build.resources" value="${module.build}/resources"/>
  <property name="build.reports" value="${module.build}/reports"/>

  <!-- Where release generated files will go -->
  <property name="release.id" value="${module.name}-${module.version}-${build.id}"/>
  <property name="release.root" value="${module.release}/${release.id}"/>

  <property name="release.bin" value="${release.root}/bin"/>
  <property name="release.client" value="${release.root}/client"/>
  <property name="release.conf" value="${release.root}/conf"/>
  <property name="release.conf.default" value="${release.conf}/default"/>
  <property name="release.db" value="${release.root}/db"/>
  <property name="release.deploy" value="${release.root}/deploy"/>
  <property name="release.deploy.lib" value="${release.deploy}/lib"/>
  <property name="release.lib" value="${release.root}/lib"/>
  <property name="release.lib.ext" value="${release.lib}/ext"/>
  <property name="release.log" value="${release.root}/log"/>
  <property name="release.tmp" value="${release.root}/tmp"/>

  <!-- Documentation and examples -->
  <property name="release.docs" value="${release.root}/docs"/>
  <property name="release.examples" value="${release.docs}/examples"/>
  <property name="release.api" value="${release.docs}/api"/>
  <property name="release.module.docs" value="${release.docs}/${module.name}"/>
  <property name="release.module.api" value="${release.api}/${module.name}"/>


  <!-- ================================================================== -->
  <!-- Pretty                                                             -->
  <!-- ================================================================== -->

  <!-- 
     |  Pretty print everything.
     |
     |  This uses the jedit JavaStyle plugin via the ejbdoclet pretty ant task.
     |  cvs="true" only pretties files you have already modified.
     |  cvs="false" pretties all files.
    -->

  <target name="pretty" depends="init">
    <taskdef name="pretty" classname="pretty.Pretty"/>
    <pretty settingsDir="${control.root}/etc" cvs="true">
      <fileset dir="${source.java}">
        <include name="**/*.java"/>
      </fileset>
    </pretty>
  </target>


  <!-- ================================================================== -->
  <!-- Compile                                                            -->
  <!-- ================================================================== -->

  <!-- 
     |  Compile everything.
     |
     |  This target should depend on other compile-* targets for each 
     |  different type of compile that needs to be performed, short of
     |  documentation compiles.
    -->
  <target name="compile" 
	  depends="compile-classes, compile-rmi, compile-etc, compile-resources, compile-bin"
	  description="Compile all source files."/>

  <!-- Compile all class files -->
  <target name="compile-classes" depends="init">
    <mkdir dir="${build.classes}"/>
    <javac destdir="${build.classes}"
           optimize="${javac.optimize}"
	   target="${javac.target}"
           debug="${javac.debug}"
	   depend="${javac.depend}"
	   verbose="${javac.verbose}"
	   deprecation="${javac.deprecation}"
	   includeAntRuntime="${javac.include.ant.runtime}"
	   includeJavaRuntime="${javac.include.java.runtime}"
	   failonerror="${javac.fail.onerror}">
       <src path="${source.java}"/>
       <classpath refid="javac.classpath"/>
       <include name="${javac.includes}"/>
       <exclude name="${javac.excludes}"/>

       <!-- This is currently contains outdated package references. -->
       <exclude name="test/**"/>
    </javac>
  </target>

  <!-- Compile RMI stubs -->
  <target name="compile-rmi" depends="compile-classes">
    <rmic base="${build.classes}"
	  verify="${rmic.verify}"
	  iiop="${rmic.iiop}"
	  iiopopts="${rmic.iiopops}"
	  idl="${rmic.idl}"
	  idlopts="${rmic.idlops}"
	  debug="${rmic.debug}"
          stubVersion="${rmic.stubVersion}">
      <classpath refid="javac.classpath"/>
      <include name="${rmic.includes}"/>
      <exclude name="${rmic.excludes}"/>

      <include name="org/jboss/tm/usertx/server/UserTransactionSessionFactoryImpl.class"/>
      <include name="org/jboss/tm/usertx/server/UserTransactionSessionImpl.class"/>
      <include name="org/jboss/jmx/server/JMXAdaptorImpl.class"/>
      <include name="org/jboss/jmx/server/RMIConnectorImpl.class"/>
      <include name="org/jboss/jmx/client/RMIClientConnectorImpl*Listener.class"/>
      <include name="org/jboss/ejb/plugins/jrmp/server/JRMPContainerInvoker.class"/>
    </rmic>
  </target>

  <!-- Compile resource files -->
  <target name="compile-resources" depends="init">
    <mkdir dir="${build.resources}"/>
    <copy todir="${build.resources}" filtering="yes">
      <fileset dir="${source.resources}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- Compile etc files (manifests and such) -->
  <target name="compile-etc" depends="init">
    <mkdir dir="${build.etc}"/>
    <copy todir="${build.etc}" filtering="yes">
      <fileset dir="${source.etc}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- Compile bin scripts -->
  <target name="compile-bin" depends="init">
    <mkdir dir="${build.bin}"/>
    <copy todir="${build.bin}" filtering="yes">
      <fileset dir="${source.bin}">
         <include name="**/*"/>
      </fileset>
    </copy>

    <fixcrlf srcdir="${build.bin}"
	     eol="lf" eof="remove"
	     includes="**/*.sh"/>

    <fixcrlf srcdir="${build.bin}" 
	     eol="crlf" eof="remove"
	     includes="**/*.bat, **/*.cmd"/>

    <chmod perm="+x">
      <fileset dir="${build.bin}">
         <include name="**/*.sh"/>
      </fileset>
    </chmod>
  </target>


  <!-- ================================================================== -->
  <!-- Build Jars                                                         -->
  <!-- ================================================================== -->

  <!-- 
     |  Build all jar files.
    -->
  <target name="jars" depends="compile" description="Builds all jar files.">
    <mkdir dir="${build.jars}"/>

    <!-- Build jboss.jar -->
    <jar jarfile="${build.jars}/jboss.jar"
         manifest="${build.etc}/jboss.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/**"/>

        <!-- Exclude Main, it will go into run.jar -->
        <exclude name="org/jboss/Main*"/>
      </fileset>

      <fileset dir="${build.resources}">
        <include name="org/jboss/**"/>
        <exclude name="org/jboss/ejb/deployment/**"/>
        <exclude name="org/jboss/ejb/plugins/**"/>
        <exclude name="org/jboss/jms/ra/META-INF*"/>
      </fileset>
    </jar>

    <!-- Build jboss-client.jar -->
    <jar jarfile="${build.jars}/jboss-client.jar"
         manifest="${build.etc}/jboss-client.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/ejb/DeploymentException.class"/>
        <include name="org/jboss/proxy/**"/>
        <include name="org/jboss/ejb/plugins/jrmp/server/*Stub.class"/>
        <include name="org/jboss/ejb/plugins/jrmp/interfaces/**"/>
        <include name="org/jboss/ejb/plugins/jrmp12/interfaces/**"/>
        <include name="org/jboss/ejb/plugins/jrmp13/interfaces/**"/>
        <include name="org/jboss/ejb/CacheKey.class"/>
        <include name="org/jboss/ejb/FastKey.class"/>
        <include name="org/jboss/monitor/client/*.class"/>
        <include name="org/jboss/tm/TransactionPropagationContextFactory.class"/>
        <include name="org/jboss/tm/GlobalId.class"/>
        <include name="org/jboss/tm/usertx/client/*.class"/>
        <include name="org/jboss/tm/usertx/interfaces/*.class"/>
        <include name="org/jboss/tm/usertx/server/*Stub.class"/>
        <include name="org/jboss/util/SerializableEnumeration.class"/>
      </fileset>
    </jar>

    <!-- Build run.jar -->
    <jar jarfile="${build.jars}/run.jar"
         manifest="${build.etc}/run.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/Main*"/>
      </fileset>
    </jar>

    <!-- Build verifier.jar -->
    <jar jarfile="${build.jars}/verifier.jar"
         manifest="${build.etc}/verifier.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/verifier/**"/>
      </fileset>
      <fileset dir="${build.resources}/org/jboss/verifier"/>
    </jar>

    <!-- Build rmiconnector.jar -->
    <jar jarfile="${build.jars}/rmiconnector.jar"
         manifest="${build.etc}/rmiconnector.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/jmx/interfaces/JMXConnector**"/>
        <include name="org/jboss/jmx/interfaces/RMI**"/>
        <include name="org/jboss/jmx/server/RMIConnector**"/>
        <include name="org/jboss/jmx/server/ObjectHandler.class"/>
        <include name="org/jboss/util/Service**"/>
        <include name="org/jboss/logging/Log.class"/>
        <include name="org/jboss/logging/Log$$**"/>
        <include name="org/jboss/naming/**"/>

        <!-- why ?? -->
        <include name="test/jboss/jmx/TestServer**"/>
      </fileset>
    </jar>

    <!-- Build deploy.jar -->
    <jar jarfile="${build.jars}/deploy.jar"
         manifest="${build.etc}/deploy.mf">
      <fileset dir="${build.classes}">
         <include name="org/jboss/jmx/client/Deployer.class"/>
         <include name="org/jboss/jmx/interfaces/JMXAdaptor.class"/>
         <include name="org/jboss/jmx/server/JMXAdaptorImpl_Stub.class"/>
         <include name="org/jboss/ejb/CacheKey.class"/>
         <include name="org/jboss/util/FastKey.class"/>
      </fileset>
    </jar>

    <!-- Build stop.jar -->
    <jar jarfile="${build.jars}/stop.jar"
         manifest="${build.etc}/stop.mf">
      <fileset dir="${build.classes}">
         <include name="org/jboss/jmx/client/Stop.class"/>
         <include name="org/jboss/jmx/interfaces/JMXAdaptor.class"/>
         <include name="org/jboss/jmx/server/JMXAdaptorImpl_Stub.class"/>
         <include name="org/jboss/ejb/CacheKey.class"/>
         <include name="org/jboss/util/FastKey.class"/>
      </fileset>
    </jar>

    <!-- Build connector.jar -->
    <jar jarfile="${build.jars}/connector.jar"
         manifest="${build.etc}/connector.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/jmx/interfaces/JMXConnector.class"/>
        <include name="org/jboss/jmx/interfaces/JMXConnectorMBean.class"/>
        <include name="org/jboss/jmx/interfaces/RMIConnector.class"/>
        <include name="org/jboss/jmx/interfaces/RMINotificationListener.class"/>
        <include name="org/jboss/jmx/client/RMIClientConnectorImpl*.class"/>
        <include name="org/jboss/jmx/server/RMIConnectorImpl_Stub.class"/>
        <include name="org/jboss/jmx/server/ObjectHandler.class"/>
        <include name="org/jboss/jmx/client/ConnectorFactory*.class"/>
        <include name="org/jboss/util/Service.class"/>
        <include name="org/jboss/util/ServiceMBean*.class"/>
        <include name="org/jboss/logging/Log.class"/>
        <include name="org/jboss/logging/Log$$*.class"/>
        <include name="org/jboss/logging/LogToCategory.class"/>

        <!-- why? -->
        <include name="test/jboss/jmx/TestClient*.class"/>
      </fileset>
    </jar>

    <!-- Build jms-ra.rar -->
    <jar jarfile="${build.jars}/jms-ra.rar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/jms/ra/**"/>
      </fileset>
      <fileset dir="${build.resources}/org/jboss/jms/ra/">
        <include name="**"/>
      </fileset>
    </jar>

    <!-- HACK Build jboss-security.jar -->
    <jar jarfile="${build.jars}/jboss-security.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/security/**"/>
      </fileset>
    </jar>

    <!-- The following might not be needed any more -->

    <!-- Build jboss-metadata.jar -->
    <jar jarfile="${build.jars}/jboss-metadata.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/metadata/**"/>
        <include name="org/jboss/ejb/DeploymentException.class"/>
      </fileset>
      <fileset dir="${build.etc}/conf/default">
        <include name="standardjboss.xml"/>
      </fileset>
    </jar>

    <!-- Build jboss-util.jar -->
    <jar jarfile="${build.jars}/jboss-util.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/util/Service.class"/>
        <include name="org/jboss/util/ServiceMBean*"/>
        <include name="org/jboss/util/MBeanProxy*"/>
        <include name="org/jboss/proxy/**"/>
        <include name="org/jboss/logging/Log.class"/>
        <include name="org/jboss/logging/LogWriter.class"/>
        <include name="org/jboss/monitor/MetricsConstants.class"/>
      </fileset>
    </jar>

    <!-- Build jboss-deployer.jar -->
    <jar jarfile="${build.jars}/jboss-deployer.jar">
      <fileset dir="${build.classes}">
         <include name="org/jboss/deployment/DeployerMBean*"/>
         <include name="org/jboss/deployment/DeploymentException*"/>
      </fileset>
    </jar>
  </target>


  <!-- ================================================================== -->
  <!-- Build documents                                                    -->
  <!-- ================================================================== -->

  <!-- 
     |  Create all generated documenation.
     |
     |  This target should depend on other docs-* targets for each 
     |  different type of docuementation that is to be generated.
    -->
  <target name="docs" depends="docs-api, docs-static"
	  description="Builds all documentation."/>

  <!-- Javadocs is an exception, but provide a docs-api to conform. -->
  <target name="docs-api" depends="javadocs"/>

  <!-- 
     |  Check if we need to build javadocs 
     |
     |  Javadocs will only be generated if one or more .java source files
     |  is newer than the generated index.html.
    -->
  <target name="javadocs-check" depends="init">
    <!-- if index.html is newer than the sources we are up to date -->
    <uptodate property="javadoc-generated-already"
	      targetfile="${build.api}/index.html">
      <srcfiles dir="${source.java}" includes="**/*.java"/>
    </uptodate>

    <!-- create the directory here to prevent install/release from failing -->
    <mkdir dir="${build.api}"/>
  </target>	      

  <!-- Generate Javadoc if we are out of date -->
  <target name="javadocs" 
	  depends="javadocs-check" 
	  unless="javadoc-generated-already">
    <javadoc packagenames="${javadoc.packages}"
             sourcepath="${source.java}"
             destdir="${build.api}"
             classpathref="javadoc.classpath"
             windowtitle="${javadoc.windowtitle}"
	     splitindex="${javadoc.splitindex}"
             doctitle="${javadoc.doctitle}"
             author="${javadoc.author}"
             version="${javadoc.version}"
             public="${javadoc.public}"
             package="${javadoc.package}"
             protected="${javadoc.protected}"
             private="${javadoc.private}"
             use="${javadoc.use}"
	     verbose="${javadoc.verbose}">
      <!-- <group title="???" packages="*"/> -->
    </javadoc>
  </target>

  <!-- Compile static documents -->
  <target name="docs-static" depends="init">
    <mkdir dir="${build.docs}"/>
    <copy todir="${build.docs}" filtering="yes">
      <fileset dir="${source.docs}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>


  <!-- ================================================================== -->
  <!-- Builds a release distribution.                                     -->
  <!-- ================================================================== -->

  <target name="release" depends="all, release-dependencies"
	  description="Builds a release distribution.">
    <!-- Copy the generated libraries (lib/ext) -->
    <mkdir dir="${release.lib.ext}"/>
    <copy todir="${release.lib.ext}" filtering="no">
      <fileset dir="${build.jars}">
         <include name="jboss.jar"/>
      </fileset>
    </copy>

    <!-- Copy the generated libraries (client) -->
    <mkdir dir="${release.client}"/>
    <copy todir="${release.client}" filtering="no">
      <fileset dir="${build.jars}">
         <include name="*-client.jar"/>
         <include name="connector.jar"/>

         <!-- Shouldn't these go into bin ? -->
         <include name="stop.jar"/>
         <include name="deploy.jar"/>
      </fileset>
    </copy>

    <!-- Setup the deployment directory (deploy) -->
    <mkdir dir="${release.deploy}"/>
    <copy todir="${release.deploy}" filtering="no">
      <fileset dir="${build.etc}">
         <include name="deploy.txt"/>
      </fileset>
    </copy>

    <!-- Copy the generated deployment libraries (deploy/lib) -->
    <mkdir dir="${release.deploy.lib}"/>
    <copy todir="${release.deploy.lib}" filtering="no">
      <fileset dir="${build.jars}">
         <include name="jms-ra.rar"/>
      </fileset>
    </copy>

    <!-- Copy the generated scripts & runnable jars (bin) -->
    <mkdir dir="${release.bin}"/>
    <copy todir="${release.bin}" filtering="no">
      <fileset dir="${build.bin}">
         <include name="**/*"/>
      </fileset>
      <fileset dir="${build.jars}">
         <include name="run.jar"/>
      </fileset>
    </copy>
    <!-- since copy does not preserve permissions, do this here (again) -->
    <chmod perm="+x">
      <fileset dir="${release.bin}">
         <include name="**/*.sh"/>
      </fileset>
    </chmod>

    <!-- Copy the static documents (docs) -->
    <mkdir dir="${release.docs}"/>
    <copy todir="${release.docs}" filtering="no">
      <fileset dir="${build.docs}">
         <include name="**/*"/>
      </fileset>
    </copy>

    <!-- Copy the generated javadocs (docs/api/<module>) -->
    <mkdir dir="${release.module.api}"/>
    <copy todir="${release.module.api}" filtering="no">
      <fileset dir="${build.api}">
         <include name="**/*"/>
      </fileset>
    </copy>

    <!-- Copy the default configuration files (conf) -->
    <mkdir dir="${release.conf}"/>
    <copy todir="${release.conf}" filtering="no">
      <fileset dir="${build.etc}/conf">
         <include name="**/*"/>
      </fileset>
    </copy>

    <!-- Setup the database directory (db) -->
    <mkdir dir="${release.db}"/>
    <copy todir="${release.db}" filtering="no">
      <fileset dir="${build.etc}">
         <include name="db.properties"/>
      </fileset>
    </copy>

    <!-- Setup the log file directory (log) -->
    <mkdir dir="${release.log}"/>
    <copy todir="${release.log}" filtering="no">
      <fileset dir="${build.etc}">
         <include name="log.properties"/>
      </fileset>
    </copy>

    <!-- Setup the temporary file directory (tmp) -->
    <mkdir dir="${release.tmp}"/>
    <copy todir="${release.tmp}" filtering="no">
      <fileset dir="${build.etc}">
         <include name="tmp.properties"/>
      </fileset>
    </copy>
  </target>

  <target name="release-dependencies" depends="init">
    <mkdir dir="${release.lib}"/>
    <copy todir="${release.lib}" filtering="no">
      <fileset dir="${sun.jmx.lib}">
        <include name="jmxri.jar"/>
      </fileset>
    </copy>

    <mkdir dir="${release.lib.ext}"/>
    <copy todir="${release.lib.ext}" filtering="no">
      <fileset dir="${sun.jndi.lib}">
        <include name="jndi.jar"/>
      </fileset>
      <fileset dir="${sun.jmx.lib}">
        <include name="jmxtools.jar"/>
      </fileset>
      <fileset dir="${sun.jaxp.lib}">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${sun.jaf.lib}">
        <include name="activation.jar"/>
      </fileset>
      <fileset dir="${sun.javamail.lib}">
        <include name="mail.jar"/>
      </fileset>
      <fileset dir="${sun.jts.lib}">
        <include name="jts.jar"/>
      </fileset>
      <fileset dir="${apache.log4j.lib}">
        <include name="log4j.jar"/>
      </fileset>
      <fileset dir="${oswego.concurrent.lib}">
        <include name="concurrent.jar"/>
      </fileset>
      <fileset dir="${gjt.jpl-util.lib}">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${javagroups.javagroups.lib}">
        <include name="JavaGroups.jar"/>
      </fileset>
      <fileset dir="${sun.jsr77.lib}">
        <include name="jsr77.jar"/>
      </fileset>
    </copy>

    <mkdir dir="${release.client}"/>
    <copy todir="${release.client}" filtering="no">
      <fileset dir="${sun.jndi.lib}">
        <include name="jndi.jar"/>
      </fileset>
      <fileset dir="${apache.log4j.lib}">
        <include name="log4j.jar"/>
      </fileset>
      <fileset dir="${oswego.concurrent.lib}">
        <include name="concurrent.jar"/>
      </fileset>
    </copy>
  </target>

  <target name="release-archive-prepare" depends="release">
    <mkdir dir="${module.release}"/>
    <property name="release.archive.basename"
	      value="${module.release}/${release.id}"/>
  </target>

  <target name="release-zip" depends="release-archive-prepare"
	  description="Builds a ZIP release distribution.">
    <zip zipfile="${release.archive.basename}.zip">
      <fileset dir="${module.release}">
        <include name="${release.id}/**"/>
      </fileset>
    </zip>
  </target>

  <target name="release-tar" depends="release-archive-prepare"
	  description="Builds a TAR release distribution.">
    <tar tarfile="${release.archive.basename}.tar" longfile="gnu"
	 basedir="${module.release}"
	 includes="${release.id}/**">
    </tar>
  </target>

  <target name="release-tgz" depends="release-tar"
	  description="Builds a TAR-GZIP release distribution.">
    <gzip src="${release.archive.basename}.tar"
	  zipfile="${release.archive.basename}.tgz"/>
  </target>

  <target name="release-all" depends="release-zip, release-tgz"
	  description="Builds a distribution for each archive type."/>


  <!-- ================================================================== -->
  <!-- Run tests                                                          -->
  <!-- ================================================================== -->

  <target name="tests" depends="tests-junit"
	  description="Execute all tests."/>

  <target name="tests-junit" depends="jars">
    <mkdir dir="${build.reports}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}" 
	   haltonerror="${junit.haltonerror}" 
	   haltonfailure="${junit.haltonfailure}" 
	   fork="${junit.fork}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <!-- junit.jvm.options must have a valid value -->
      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.jars}"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <path refid="javac.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
		 haltonerror="${junit.batchtest.haltonerror}" 
		 haltonfailure="${junit.batchtest.haltonfailure}" 
		 fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/Test*.class"/>
          <include name="**/*Test.class"/>
          <include name="**/AllJUnitTests.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>


  <!-- ================================================================== -->
  <!-- Cleans up generated stuff                                          -->
  <!-- ================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean" depends="init"
	  description="Cleans up most generated files.">
    <delete dir="${module.build}"/>
    <delete dir="${module.release}"/>
    <delete dir="${module.output}"/>
  </target>

  <!-- Clean up all generated files -->
  <target name="clobber" depends="clean"
	  description="Cleans up all generated files.">
    <delete file="${module.root}/build.log"/>
  </target>


  <!-- ================================================================== -->
  <!-- Other Targets                                                      -->
  <!-- ================================================================== -->

  <target name="help">
    <projecthelp taskname="help">
      <header><![CDATA[
  The ${module.Name} module.
]]></header>
      <footer><![CDATA[
    -projecthelp for all targets
    -help for full options
]]></footer>
    </projecthelp>
  </target>

  <target name="main" depends="most"
	  description="Executes the default target (most)."/>
    
  <target name="all" depends="jars, docs"
	  description="Builds everything."/>

  <target name="most" depends="jars"
	  description="Builds almost everything."/>

  <target name="min" depends="compile"
	  description="Builds a minimal subset."/>

</project>
