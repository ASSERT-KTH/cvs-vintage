<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
  <!ENTITY buildmagic SYSTEM "resource://planet57/tools/buildmagic/common.xml">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id: build.xml,v 1.63 2002/02/16 10:37:15 user57 Exp $ -->

<project default="main" name="JBoss/Server">

  <!-- ================================================================== -->
  <!-- Setup                                                              -->
  <!-- ================================================================== -->

  <!--
     | Include the common Buildmagic elements.
     |
     | This defines several different targets, properties and paths.
     | It also sets up the basic extention tasks amoung other things.
   -->

  &buildmagic;


  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->

  <!--
     | Initialize the build system.  Must depend on '_buildmagic:init'.  
     | Other targets should depend on 'init' or things will mysteriously fail.
   -->

  <target name="init" unless="init.disable" depends="_buildmagic:init">
  </target>


  <!-- ================================================================== -->
  <!-- Configuration                                                      -->
  <!-- ================================================================== -->

  <!--
     | Configure the build system.  
     |
     | This target is invoked by the Buildmagic initialization logic and 
     | should contain module specific configuration elements.
   -->

  <target name="configure" unless="configure.disable">

    <!-- =================== -->
    <!-- Basic Configuration -->
    <!-- =================== -->

    <!-- Module name(s) & version -->
    <property name="module.name" value="server"/>
    <property name="module.Name" value="JBoss Server"/>
    <property name="module.version" value="DEV"/>

    <!-- ========= -->
    <!-- Libraries -->
    <!-- ========= -->

    <!-- Java Naming and Directory Interface (JNDI) -->
    <property name="sun.jndi.root" value="${project.thirdparty}/sun/jndi"/>
    <property name="sun.jndi.lib" value="${sun.jndi.root}/lib"/>
    <path id="sun.jndi.classpath">
      <pathelement path="${sun.jndi.lib}/jndi.jar"/>
    </path>

    <!-- Java Management Extensions (JMX) -->
    <property name="sun.jmx.root" value="${project.thirdparty}/sun/jmx"/>
    <property name="sun.jmx.lib" value="${sun.jmx.root}/lib"/>
    <path id="sun.jmx.classpath">
      <pathelement path="${sun.jmx.lib}/jmxri.jar"/>
    </path>

    <!-- Java API for XML Processing (JAXP) -->
    <property name="sun.jaxp.root" value="${project.thirdparty}/sun/jaxp"/>
    <property name="sun.jaxp.lib" value="${sun.jaxp.root}/lib"/>
    <path id="sun.jaxp.classpath">
      <fileset dir="${sun.jaxp.lib}">
        <include name="*.jar"/>
      </fileset>
    </path>

    <!-- Java Authentication and Authorization Service (JAAS) -->
    <property name="sun.jaas.root" value="${project.thirdparty}/sun/jaas"/>
    <property name="sun.jaas.lib" value="${sun.jaas.root}/lib"/>
    <path id="sun.jaas.classpath">
      <pathelement path="${sun.jaas.lib}/jaas.jar"/>
    </path>

    <!-- Java Secure Socket Extension (JSSE) -->
    <property name="sun.jsse.root" value="${project.thirdparty}/sun/jsse"/>
    <property name="sun.jsse.lib" value="${sun.jsse.root}/lib"/>
    <path id="sun.jsse.classpath">
      <fileset dir="${sun.jsse.lib}">
        <include name="**/*.jar"/>
      </fileset>
    </path>

    <!-- Java Transaction Service (JTS) -->
    <property name="sun.jts.root" value="${project.thirdparty}/sun/jts"/>
    <property name="sun.jts.lib" value="${sun.jts.root}/lib"/>
    <path id="sun.jts.classpath">
      <pathelement path="${sun.jts.lib}/jts.jar"/>
    </path>

    <!-- Log4j -->
    <property name="apache.log4j.root" value="${project.thirdparty}/apache/log4j"/>
    <property name="apache.log4j.lib" value="${apache.log4j.root}/lib"/>
    <path id="apache.log4j.classpath">
      <pathelement path="${apache.log4j.lib}/log4j.jar"/>
    </path>

    <!-- EDU.oswego.cs.dl.util.concurrent -->
    <property name="oswego.concurrent.root" value="${project.thirdparty}/oswego/concurrent"/>
    <property name="oswego.concurrent.lib" value="${oswego.concurrent.root}/lib"/>
    <path id="oswego.concurrent.classpath">
      <pathelement path="${oswego.concurrent.lib}/concurrent.jar"/>
    </path>

    <!-- JPL-Util -->
    <property name="gjt.jpl-util.root" value="${project.thirdparty}/gjt/jpl-util"/>
    <property name="gjt.jpl-util.lib" value="${gjt.jpl-util.root}/lib"/>
    <path id="gjt.jpl-util.classpath">
      <fileset dir="${gjt.jpl-util.lib}">
        <include name="*.jar"/>
      </fileset>
    </path>

    <!-- GNU Getopt -->
    <property name="gnu.getopt.root" value="${project.thirdparty}/gnu/getopt"/>
    <property name="gnu.getopt.lib" value="${gnu.getopt.root}/lib"/>
    <path id="gnu.getopt.classpath">
      <fileset dir="${gnu.getopt.lib}">
        <include name="*.jar"/>
      </fileset>
    </path>

    <!-- JUnit -->
    <property name="junit.junit.root" value="${project.thirdparty}/junit/junit"/>
    <property name="junit.junit.lib" value="${junit.junit.root}/lib"/>
    <path id="junit.junit.classpath">
      <pathelement path="${junit.junit.lib}/junit.jar"/>
    </path>

    <!-- JavaGroups -->
    <property name="javagroups.javagroups.root" value="${project.thirdparty}/javagroups/javagroups"/>
    <property name="javagroups.javagroups.lib" value="${javagroups.javagroups.root}/lib"/>
    <path id="javagroups.javagroups.classpath">
      <pathelement path="${javagroups.javagroups.lib}/javagroups-2.0.jar"/>
    </path>

    <!-- JSR 77 -->
    <property name="sun.jsr77.root" value="${project.thirdparty}/sun/jsr77"/>
    <property name="sun.jsr77.lib" value="${sun.jsr77.root}/lib"/>
    <path id="sun.jsr77.classpath">
      <pathelement path="${sun.jsr77.lib}/jsr77.jar"/>
    </path>

    <!-- The combined library classpath -->
    <path id="library.classpath">
      <path refid="sun.jndi.classpath"/>
      <path refid="sun.jmx.classpath"/>
      <path refid="sun.jaxp.classpath"/>
      <path refid="sun.jaas.classpath"/>
      <path refid="sun.jsse.classpath"/>
      <path refid="sun.jts.classpath"/>
      <path refid="apache.log4j.classpath"/>
      <path refid="gjt.jpl-util.classpath"/>
      <path refid="gnu.getopt.classpath"/>
      <path refid="oswego.concurrent.classpath"/>
      <path refid="junit.junit.classpath"/>
      <path refid="sun.jsr77.classpath"/>
    </path>

    <!-- ======= -->
    <!-- Modules -->
    <!-- ======= -->

    <!-- J2EE -->
    <property name="jboss.j2ee.root" value="${project.root}/j2ee/output"/>
    <property name="jboss.j2ee.lib" value="${jboss.j2ee.root}/lib"/>
    <path id="jboss.j2ee.classpath">
      <pathelement path="${jboss.j2ee.lib}/jboss-j2ee.jar"/>
    </path>

    <!-- Common -->
    <property name="jboss.common.root" value="${project.root}/common/output"/>
    <property name="jboss.common.lib" value="${jboss.common.root}/lib"/>
    <path id="jboss.common.classpath">
      <pathelement path="${jboss.common.lib}/jboss-common.jar"/>
    </path>

    <!-- Naming -->
    <property name="jboss.naming.root" value="${project.root}/naming/output"/>
    <property name="jboss.naming.lib" value="${jboss.naming.root}/lib"/>
    <path id="jboss.naming.classpath">
      <pathelement path="${jboss.naming.lib}/jnpserver.jar"/>
    </path>

    <!-- The combined dependant module classpath -->
    <path id="dependentmodule.classpath">
      <path refid="jboss.j2ee.classpath"/>
      <path refid="jboss.common.classpath"/>
      <path refid="jboss.naming.classpath"/>
    </path>

    <!-- ===== -->
    <!-- Tasks -->
    <!-- ===== -->

    <!-- Where source files live -->
    <property name="source.java" value="${module.source}/main"/>
    <property name="source.etc" value="${module.source}/etc"/>
    <property name="source.bin" value="${module.source}/bin"/>
    <property name="source.docs" value="${module.source}/docs"/>
    <property name="source.resources" value="${module.source}/resources"/>

    <!-- Where build generated files will go -->
    <property name="build.classes" value="${module.output}/classes"/>
    <property name="build.lib" value="${module.output}/lib"/>
    <property name="build.api" value="${module.output}/api"/>
    <property name="build.etc" value="${module.output}/etc"/>
    <property name="build.bin" value="${module.output}/bin"/>
    <property name="build.docs" value="${module.output}/docs"/>
    <property name="build.beans" value="${module.output}/beans"/>
    <property name="build.resources" value="${module.output}/resources"/>
    <property name="build.reports" value="${module.output}/reports"/>

    <!-- Install/Release structure -->
    <property name="install.id" value="${module.name}-${module.version}"/>
    <property name="release.id" value="${install.id}"/>
    <property name="install.root" value="${module.output}/${install.id}"/>

    <!-- The combined thirdparty classpath -->
    <path id="thirdparty.classpath">
      <path refid="library.classpath"/>
      <path refid="dependentmodule.classpath"/>
    </path>

    <!-- This module is based on Java 1.2 -->
    <property name="javac.target" value="1.2"/>

    <!-- RMIC should generate stubs compatible with Java 1.2+ -->
    <property name="rmic.stubVersion" value="1.2"/>

    <!-- classpath and local.classpath must have a value using with a path -->
    <property name="classpath" value=""/>
    <property name="local.classpath" value=""/>

    <!-- The classpath required to build classes. -->
    <path id="javac.classpath">
      <pathelement path="${classpath}"/>
      <pathelement path="${local.classpath}"/>
      <path refid="thirdparty.classpath"/>
    </path>

    <!-- The classpath required to build javadocs. -->
    <path id="javadoc.classpath">
      <path refid="javac.classpath"/>
    </path>

    <!-- Packages to include when generating api documentation -->
    <property name="javadoc.packages" value="org.jboss.*"/>

    <!-- Override JUnit defaults -->
    <property name="junit.timeout" value="240000"/> <!-- 4 minutes -->
    <property name="junit.batchtest.todir" value="${build.reports}"/>
    <property name="junit.jvm.options" value="-Ddummy"/>

    <!-- xdoclet -->
    <path id="xdoclet.task.classpath">
      <path refid="javac.classpath"/>
      <pathelement location="${project.tools}/lib/xdoclet.jar"/>
      <pathelement location="${project.tools}/lib/ant.jar"/>
    </path>
    <property name="xdoclet.task.classpath" 
	      refid="xdoclet.task.classpath"/>
  </target>


  <!-- ================================================================== -->
  <!-- Compile                                                            -->
  <!-- ================================================================== -->

  <!-- 
     |  Compile everything.
     |
     |  This target should depend on other compile-* targets for each 
     |  different type of compile that needs to be performed, short of
     |  documentation compiles.
    -->
  <target name="compile" 
	  depends="compile-bean-sources, 
                   compile-classes, 
                   compile-rmi, 
                   compile-etc, 
                   compile-resources, 
                   compile-bin"
	  description="Compile all source files."/>

  <!-- Compile EJB beans with XDoclet -->
  <target name="compile-bean-sources" depends="init">
    <taskdef name="xdoclet" classname="xdoclet.ejb.EjbDocletTask"/>

    <mkdir dir="${build.beans}/ejbadaptor"/>
    <xdoclet sourcepath="${source.java}"
	     destdir="${build.beans}/ejbadaptor"
	     classpath="${xdoclet.task.classpath}"
	     ejbspec="1.1"
	     excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/jmx/adaptor/ejb/*Bean.java"/>
        <exclude name="org/jboss/jmx/adaptor/ejb/*MBean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <homeinterface/>
      <session/>
      <deploymentdescriptor xmlencoding="UTF-8" destdir="${build.beans}/ejbadaptor/META-INF"/>
      <jboss xmlencoding="UTF-8" destdir="${build.beans}/ejbadaptor/META-INF"/>
    </xdoclet>

    <mkdir dir="${build.beans}/mejb"/>
    <xdoclet sourcepath="${source.java}"
	     destdir="${build.beans}/mejb"
	     classpath="${xdoclet.task.classpath}"
	     ejbspec="1.1"
	     excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/management/mejb/*Bean.java"/>
        <exclude name="org/jboss/management/mejb/*MBean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <homeinterface/>
      <session/>
      <deploymentdescriptor xmlencoding="UTF-8" destdir="${build.beans}/mejb/META-INF"/>
      <jboss xmlencoding="UTF-8" destdir="${build.beans}/mejb/META-INF"/>
    </xdoclet>
  </target>

  <!-- Compile all class files -->
  <target name="compile-classes" depends="init">
    <mkdir dir="${build.classes}"/>
    <javac destdir="${build.classes}"
           optimize="${javac.optimize}"
	   target="${javac.target}"
           debug="${javac.debug}"
	   depend="${javac.depend}"
	   verbose="${javac.verbose}"
	   deprecation="${javac.deprecation}"
	   includeAntRuntime="${javac.include.ant.runtime}"
	   includeJavaRuntime="${javac.include.java.runtime}"
	   failonerror="${javac.fail.onerror}">
       <classpath refid="javac.classpath"/>

       <src path="${source.java}"/>
       <src path="${build.beans}"/>

       <include name="${javac.includes}"/>
       <exclude name="${javac.excludes}"/>
    </javac>
  </target>

  <!-- Compile RMI stubs -->
  <target name="compile-rmi" depends="compile-classes">
    <rmic base="${build.classes}"
	  verify="${rmic.verify}"
	  iiop="${rmic.iiop}"
	  iiopopts="${rmic.iiopops}"
	  idl="${rmic.idl}"
	  idlopts="${rmic.idlops}"
	  debug="${rmic.debug}"
          stubVersion="${rmic.stubVersion}">
      <classpath refid="javac.classpath"/>
      <include name="${rmic.includes}"/>
      <exclude name="${rmic.excludes}"/>

      <include name="org/jboss/tm/usertx/server/UserTransactionSessionFactoryImpl.class"/>
      <include name="org/jboss/tm/usertx/server/UserTransactionSessionImpl.class"/>
      <include name="org/jboss/jmx/adaptor/rmi/RMIAdaptorImpl.class"/>
      <include name="org/jboss/jmx/connector/notification/RMIClientNotificationListener.class"/>
      <include name="org/jboss/invocation/jrmp/server/JRMPInvoker.class"/>
      <include name="org/jboss/management/mejb/RMIClientNotificationListener.class"/>
    </rmic>
  </target>

  <!-- Compile resource files -->
  <target name="compile-resources" depends="init">
    <mkdir dir="${build.resources}"/>
    <copy todir="${build.resources}" filtering="yes">
      <fileset dir="${source.resources}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- Compile etc files (manifests and such) -->
  <target name="compile-etc" depends="init">
    <mkdir dir="${build.etc}"/>
    <copy todir="${build.etc}" filtering="yes">
      <fileset dir="${source.etc}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- Compile bin scripts -->
  <target name="compile-bin" depends="init">
    <mkdir dir="${build.bin}"/>
    <copy todir="${build.bin}" filtering="yes">
      <fileset dir="${source.bin}">
         <include name="**/*"/>
      </fileset>
    </copy>

    <fixcrlf srcdir="${build.bin}"
	     eol="lf" eof="remove"
	     includes="**/*.sh"/>

    <fixcrlf srcdir="${build.bin}" 
	     eol="crlf" eof="remove"
	     includes="**/*.bat, **/*.cmd"/>

    <chmod perm="+x">
      <fileset dir="${build.bin}">
         <include name="**/*.sh"/>
      </fileset>
    </chmod>
  </target>


  <!-- ================================================================== -->
  <!-- Archives                                                           -->
  <!-- ================================================================== -->

  <!-- 
     |  Build all jar files.
    -->
  <target name="jars" depends="compile" description="Builds all jar files.">
    <mkdir dir="${build.lib}"/>

    <!-- jboss.jar -->
    <jar jarfile="${build.lib}/jboss.jar" manifest="${build.etc}/manifest/jboss.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/**"/>
        
        <!-- Exclude command line utilities -->
        <exclude name="org/jboss/*"/>

        <!-- Exclude JMX Connector stuff we will use the connector SAR for that -->
        <exclude name="org/jboss/jmx/**"/>
      </fileset>
      
      <!-- HACK -->
      <fileset dir="${build.classes}">
        <!-- But include this interface because the Farm needs it -->
        <include name="org/jboss/jmx/connector/RemoteMBeanServer.class"/>
        <include name="org/jboss/jmx/adaptor/rmi/RMIAdaptorImpl.class"/>
        <include name="org/jboss/jmx/adaptor/interfaces/Adaptor*.class"/>
      </fileset>

      <fileset dir="${build.resources}">
        <include name="org/jboss/**"/>
        <exclude name="org/jboss/ejb/deployment/**"/>
        <exclude name="org/jboss/ejb/plugins/**"/>
        <exclude name="org/jboss/jms/ra/META-INF*"/>
      </fileset>
    </jar>

    <!-- 
       | jboss-boot.jar
       |
       | This file is always local and contains the basic classed required
       | to start the server and setup network service loading.
     -->
    <jar jarfile="${build.lib}/jboss-boot.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/Version.class"/>
        <include name="org/jboss/system/BootstrapLogger.class"/>
        <include name="org/jboss/system/UnifiedClassLoader*.class"/>
        <include name="org/jboss/system/MBeanClassLoader*.class"/>
        <include name="org/jboss/system/ServiceLibraries*.class"/>
        <include name="org/jboss/system/Server*.class"/>
        <include name="org/jboss/deployment/DeploymentException.class"/>
      </fileset>
      <fileset dir="${build.resources}">
        <include name="org/jboss/version.properties"/>
      </fileset>

      <!-- HACK, HACK, HACK to allow core components to use these common classes -->
      <fileset dir="${jboss.common.root}/classes">
        <include name="org/jboss/util/jmx/ObjectNameFactory*.class"/>
      </fileset>
    </jar>

    <!-- jboss-spine.jar -->
    <jar jarfile="${build.lib}/jboss-spine.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/logging/**"/>
        <include name="org/jboss/system/Service.class"/>
        <include name="org/jboss/system/ServiceMBean.class"/>
        <include name="org/jboss/system/ServiceMBeanSupport.class"/>
        <include name="org/jboss/system/ServiceController*.class"/>
        <include name="org/jboss/system/ServiceCreator*.class"/>
        <include name="org/jboss/system/ServiceConfigurator.class"/>
        <include name="org/jboss/system/ServiceContext.class"/>
        <include name="org/jboss/system/ConfigurationException.class"/>
        <include name="org/jboss/system/Info*"/>
        <include name="org/jboss/deployment/MainDeployer*.class"/>
        <include name="org/jboss/deployment/SARDeployer*.class"/>
        <include name="org/jboss/deployment/DeploymentInfo.class"/>
        <include name="org/jboss/deployment/DeployerMBean*.class"/>
      </fileset>
    </jar>
	 
    <!-- jboss-client.jar -->
    <jar jarfile="${build.lib}/jboss-client.jar"
         manifest="${build.etc}/manifest/jboss-client.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/deployment/DeploymentException.class"/>
        <include name="org/jboss/proxy/**"/>
        <include name="org/jboss/invocation/Invoker.class"/>
        <include name="org/jboss/invocation/Invocation.class"/>
        <include name="org/jboss/invocation/MarshalledInvocation.class"/>
        <include name="org/jboss/invocation/jrmp/interfaces/JRMPInvokerProxy.class"/>
        <include name="org/jboss/invocation/jrmp/server/*Stub.class"/>
        <include name="org/jboss/ejb/CacheKey.class"/>
        <include name="org/jboss/ejb/ListCacheKey.class"/>
        <include name="org/jboss/ejb/FastKey.class"/>
        <include name="org/jboss/ejb/plugins/lock/ApplicationDeadlockException.class"/>
        <include name="org/jboss/logging/Logger.class"/>
        <include name="org/jboss/logging/TracePriority.class"/>
        <include name="org/jboss/monitor/client/*.class"/>
        <include name="org/jboss/tm/TransactionPropagationContextFactory.class"/>
        <include name="org/jboss/tm/GlobalId.class"/>
        <include name="org/jboss/tm/usertx/client/*.class"/>
        <include name="org/jboss/tm/usertx/interfaces/*.class"/>
        <include name="org/jboss/tm/usertx/server/*Stub.class"/>
      </fileset>
    </jar>

    <!-- run.jar -->
    <jar jarfile="${build.lib}/run.jar" manifest="${build.etc}/manifest/run.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/Main*"/>
      </fileset>
    </jar>

    <!-- shutdown.jar -->
    <jar jarfile="${build.lib}/shutdown.jar" manifest="${build.etc}/manifest/shutdown.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/Shutdown*"/>
      </fileset>
    </jar>

    <!-- verifier.jar -->
    <jar jarfile="${build.lib}/verifier.jar"
         manifest="${build.etc}/manifest/verifier.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/verifier/**"/>
      </fileset>
      <fileset dir="${build.resources}/org/jboss/verifier"/>
    </jar>

    <!-- jmx-rmi-adaptor.sar --> 
    <jar jarfile="${build.lib}/jmx-rmi-adaptor.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/jmx/adaptor/rmi/**"/>
        <include name="org/jboss/jmx/connector/notification/**"/>
        <include name="org/jboss/jmx/connector/rmi/**"/>
      </fileset>
      <fileset dir="${source.java}/org/jboss/jmx/adaptor/rmi">
        <include name="META-INF/**"/>
      </fileset>
    </jar>

    <!-- jmx-ejb-adaptor.jar --> 
    <jar jarfile="${build.lib}/jmx-ejb-adaptor.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/jmx/ObjectHandler**"/>
        <include name="org/jboss/jmx/adaptor/ejb/**"/>
        <include name="org/jboss/jmx/adaptor/interfaces/**"/>
        <include name="org/jboss/jmx/connector/RemoteMBeanServer.class"/>
      </fileset>
      <fileset dir="${build.beans}/ejbadaptor">
        <include name="META-INF/**"/>
      </fileset>
    </jar>

    <!-- ejb-management.jar --> 
    <!-- (should try to use jlink for this) -->  
    <unjar src="${sun.jsr77.lib}/jsr77.jar" dest="${build.classes}"/> 
    <jar jarfile="${build.lib}/ejb-management.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/management/mejb/**"/>
        <include name="javax/management/j2ee/Management*.class"/>
      </fileset>
      <fileset dir="${build.beans}/mejb">
        <include name="META-INF/**"/>
      </fileset>
    </jar>

    <!-- jmx-ejb-connector-client.jar -->
    <jar jarfile="${build.lib}/jmx-ejb-connector-client.jar"
         manifest="${build.etc}/manifest/ejb-connector-client.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/jmx/ObjectHandler**"/>
        <include name="org/jboss/jmx/connector/notification/**"/>
        <include name="org/jboss/jmx/connector/ejb/**"/>
        <include name="org/jboss/jmx/adaptor/ejb/*Exception.class"/>
        <include name="org/jboss/jmx/adaptor/ejb/AdaptorSession.class"/>
        <include name="org/jboss/jmx/adaptor/interfaces/**"/>
      </fileset>
    </jar>

    <!-- jmx-ejb-connector-server.sar --> 
    <jar jarfile="${build.lib}/jmx-ejb-connector-server.sar">
         <!-- manifest="${build.etc}/manifest/ejb-connector-server.mf"> -->
      <fileset dir="${build.classes}">
        <include name="org/jboss/jmx/connector/notification/**"/>
        <include name="org/jboss/jmx/connector/ejb/**Stub.class"/>
      </fileset>
      <fileset dir="${source.java}/org/jboss/jmx/connector/ejb">
        <include name="META-INF/**"/>
      </fileset>
    </jar>

    <!-- jmx-html-adaptor.sar -->
    <!-- (should try to use jlink for this) -->  
    <unjar src="${sun.jmx.lib}/jmxtools.jar" dest="${build.classes}"/>
    <jar jarfile="${build.lib}/jmx-html-adaptor.sar">
         <!-- manifest="${build.etc}/manifest/rmiconnector.mf"> -->
      <fileset dir="${build.classes}">
        <include name="org/jboss/jmx/interfaces/**"/>
        <include name="org/jboss/jmx/server/**"/>
        <include name="org/jboss/jmx/client**"/>
      </fileset>
      <fileset dir="${source.java}/org/jboss/jmx">
        <include name="META-INF/**"/>
      </fileset>
    </jar>

    <!-- jmx-rmi-adaptor.jar -->
    <jar jarfile="${build.lib}/jmx-rmi-adaptor.jar"
         manifest="${build.etc}/manifest/rmi-adaptor.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/jmx/adaptor/rmi/**"/>
        <include name="org/jboss/jmx/connector/RemoteMBeanServer**"/>
        <include name="org/jboss/jmx/connector/notification/**"/>
        <include name="org/jboss/jmx/connector/rmi/**"/>
        <include name="org/jboss/system/Service**"/>
        <include name="org/jboss/logging/**"/>
        <include name="org/jboss/naming/**"/>

        <!-- why ? AS Because it allows the user to test the JAR file by "java -jar" -->
        <include name="org/jboss/jmx/connector/rmi/TestServer**"/>
      </fileset>
    </jar>

    <!-- jmx-rmi-connector-client.jar -->
    <jar jarfile="${build.lib}/jmx-rmi-connector-client.jar"
         manifest="${build.etc}/manifest/rmi-connector-client.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/jmx/adaptor/rmi/*Stub.class"/>
        <include name="org/jboss/jmx/adaptor/rmi/RMIAdaptor*.class"/>
        <include name="org/jboss/jmx/connector/RemoteMBeanServer.class"/>
        <include name="org/jboss/jmx/connector/notification/RMI**"/>
        <include name="org/jboss/jmx/connector/notification/JMSNotificationListener.class"/>
        <include name="org/jboss/jmx/connector/rmi/**"/>
        <include name="org/jboss/system/Service.class"/>
        <include name="org/jboss/system/ServiceMBean*.class"/>
        <include name="org/jboss/logging/**"/>
      </fileset>
    </jar>

    <!-- jmx-connector-client-factory.jar -->
    <jar jarfile="${build.lib}/jmx-connector-client-factory.jar"
         manifest="${build.etc}/manifest/connector-client-factory.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/jmx/connector/ConnectorFactory*.class"/>
        <include name="org/jboss/jmx/connector/TestClient*.class"/>
        <include name="org/jboss/system/Service.class"/>
        <include name="org/jboss/system/ServiceMBean*.class"/>
        <include name="org/jboss/logging/**"/>
      </fileset>
    </jar>

    <!-- jms-ra.rar -->
    <jar jarfile="${build.lib}/jms-ra.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/jms/ra/**"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/jms-ra.rar">
      <fileset dir="${build.lib}">
        <include name="jms-ra.jar"/>
      </fileset>
      <fileset dir="${build.resources}/org/jboss/jms/ra/">
        <include name="**"/>
      </fileset>
    </jar>

    <!-- HACK jboss-security.jar -->
    <jar jarfile="${build.lib}/jboss-security.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/security/**"/>
      </fileset>
    </jar>

    <!--
       | JBoss/Testsuite Support
     -->

    <!-- deploy.jar -->
    <jar jarfile="${build.lib}/deploy.jar"
         manifest="${build.etc}/manifest/deploy.mf">
      <fileset dir="${build.classes}">
         <include name="org/jboss/deployment/**"/>
         <include name="org/jboss/jmx/service/Deployer.class"/>
         <include name="org/jboss/jmx/connector/RemoteMBeanServer**"/>
         <include name="org/jboss/jmx/connector/notification/RMI**"/>
         <include name="org/jboss/jmx/connector/rmi/RMIConnector.class"/>
         <include name="org/jboss/jmx/connector/rmi/RMINotificationListener.class"/>
         <include name="org/jboss/jmx/connector/rmi/RMIClientConnectorImpl*.class"/>
         <include name="org/jboss/jmx/connector/rmi/RMIConnectorImpl_Stub.class"/>
         <include name="org/jboss/jmx/connector/ConnectorFactory*.class"/>
         <include name="org/jboss/system/Service.class"/>
         <include name="org/jboss/system/ServiceMBean*.class"/>
         <include name="org/jboss/logging/**"/>
         <include name="org/jboss/ejb/CacheKey.class"/>
      </fileset>
    </jar>

  </target>


  <!-- ================================================================== -->
  <!-- Documents                                                          -->
  <!-- ================================================================== -->

  <!-- 
     | Create all generated documenation.
     |
     | This target should depend on other docs-* targets for each 
     | different type of docuementation that is to be generated.
   -->

  <target name="docs" depends="init, docs-static, docs-api" 
	  description="Builds all documentation.">
  </target>

  <!-- Compile static documents -->
  <target name="docs-static" depends="init">
    <mkdir dir="${build.docs}"/>
    <copy todir="${build.docs}" filtering="yes">
      <fileset dir="${source.docs}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- Javadocs is an exception, but provide a docs-api to conform. -->
  <target name="docs-api" depends="docs-javadocs"/>

  <!-- 
     | Check if we need to build javadocs 
     |
     | Javadocs will only be generated if one or more .java source files
     | is newer than the generated index.html.
   -->

  <target name="docs-javadocs-check" depends="init">
    <!-- if index.html is newer than the sources we are up to date -->
    <uptodate property="docs-javadocs.disable"
	      targetfile="${build.api}/index.html">
      <srcfiles dir="${source.java}" includes="**/*.java"/>
    </uptodate>
  </target>	      

  <!-- Generate Javadoc if we are out of date -->
  <target name="docs-javadocs" depends="docs-javadocs-check" unless="docs-javadocs.disable">
    <mkdir dir="${build.api}"/>
    <javadoc packagenames="${javadoc.packages}"
             sourcepath="${source.java}"
             destdir="${build.api}"
             classpathref="javadoc.classpath"
             windowtitle="${javadoc.windowtitle}"
	     splitindex="${javadoc.splitindex}"
             doctitle="${javadoc.doctitle}"
             author="${javadoc.author}"
             version="${javadoc.version}"
             public="${javadoc.public}"
             package="${javadoc.package}"
             protected="${javadoc.protected}"
             private="${javadoc.private}"
             use="${javadoc.use}"
	     verbose="${javadoc.verbose}"> 
      <group title="JDBC Extension" packages="javax.sql*"/>
      <group title="J2EE" packages="javax*"/>
    </javadoc>
  </target>

  <target name="javadocs" depends="docs-javadocs"/>


  <!-- ================================================================== -->
  <!-- Install & Release                                                  -->
  <!-- ================================================================== -->

  <target name="install" 
	  description="Install the structure for a release."
	  depends="all, _buildmagic:install:default"/>

  <target name="release" depends="install"/>

  <target name="release-zip" 
	  description="Builds a ZIP distribution."
	  depends="release, _buildmagic:release:zip"/>

  <target name="release-tar" 
	  description="Builds a TAR distribution."
	  depends="release, _buildmagic:release:tar"/>

  <target name="release-tgz" 
	  description="Builds a TAR-GZ distribution."
	  depends="release, _buildmagic:release:tgz"/>

  <target name="release-all"
	  description="Builds a distribution for each archive type."
	  depends="release-zip, release-tgz"/>


  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean" 
	  description="Cleans up most generated files."
	  depends="_buildmagic:clean">
  </target>

  <!-- Clean up all generated files -->
  <target name="clobber" 
	  description="Cleans up all generated files."
	  depends="_buildmagic:clobber, clean">
  </target>


  <!-- ================================================================== -->
  <!-- Misc.                                                              -->
  <!-- ================================================================== -->

  <target name="main"
	  description="Executes the default target (most)."
	  depends="most"/>
    
  <target name="all"
	  description="Builds everything."
	  depends="jars, docs"/>

  <target name="most" 
	  description="Builds almost everything."
	  depends="jars"/>

  <target name="help" 
          description="Show this help message."
	  depends="_buildmagic:help:standard"/>

</project>
