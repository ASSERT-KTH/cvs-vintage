### Disassembler messages

### disassembler
classfileformat.targetoption = Version (target {0}) 
disassembler.opentypedeclaration =\ {
disassembler.closetypedeclaration = }
disassembler.parametername = arg
disassembler.endofmethodheader = ;
disassembler.commentstart = /* 
disassembler.commentend = \ */
disassembler.begincommentline = \ *\ 
disassembler.fieldhasconstant =\ =\ 
disassembler.endoffieldheader = ;
disassembler.methodtitle = Method 
disassembler.exceptiontableheader = Exception Table:
disassembler.linenumberattributeheader = Line number attribute:
disassembler.localvariabletableattributeheader = Local variable table attribute:
disassembler.arraydimensions = []
disassembler.constructor_method_name =
disassembler.parameternameinmethodinvocation =
disassembler.constantstring = <String 
disassembler.constantinteger = <Integer 
disassembler.constantfloat = <Float 
disassembler.constantdouble = <Double 
disassembler.constantlong = <Long 
disassembler.closeconstant = >
disassembler.innerattributesheader = Inner classes attributes:
disassembler.inner_class_info_name = inner class info name:
disassembler.outer_class_info_name = outer class info name:
disassembler.inner_name = inner name:
disassembler.inner_accessflags = accessflags: 
disassembler.genericattributeheader = Attribute:
disassembler.genericattributename = Name: 
disassembler.genericattributelength =\ Length: 
disassembler.codeattributeheader = Code attribute:
disassembler.tab = \t
disassembler.constantpoolindex =\ #
disassembler.classmemberseparator = >
disassembler.space = \ 
disassembler.comma = , 
disassembler.openinnerclassentry = [
disassembler.closeinnerclassentry = ]

### classfileformat decoding
classfileformat.sourcename = // Compiled from 
classfileformat.magicnumber = - magic:\ 
classfileformat.minorversion = - minor:\ 
classfileformat.majorversion =  - major:\ 
classfileformat.acc_abstract = abstract
classfileformat.acc_final = final
classfileformat.acc_native = native
classfileformat.acc_private = private
classfileformat.acc_protected = protected
classfileformat.acc_public = public
classfileformat.acc_static = static
classfileformat.acc_strict = strict
classfileformat.acc_synchronized = synchronized
classfileformat.acc_transient = transient
classfileformat.acc_volatile = volatile
classfileformat.class = class 
classfileformat.interface = interface 
classfileformat.extends =\ extends 
classfileformat.implements =\ implements 
classfileformat.throws =\ throws 
classfileformat.methoddescriptor =\ Method descriptor 
classfileformat.fieldddescriptor =\ Field descriptor 
classfileformat.maxStack = Stack: 
classfileformat.maxLocals = Locals: 
classfileformat.superflagnotset = The ACC_SUPER bit is not set
classfileformat.clinitname = {}
### string displayed for each opcode
classfileformat.case = case 
disassembler.colon = : 
classfileformat.default =\ default: 
classfileformat.newarrayboolean = boolean
classfileformat.newarraychar = char
classfileformat.newarrayfloat = float
classfileformat.newarraydouble = double
classfileformat.newarraybyte = byte
classfileformat.newarrayshort = short
classfileformat.newarrayint = int
classfileformat.newarraylong = long
classformat.invokeinterfacemethod =\ <Interface method 
classformat.invokeinterfacemethodclose = >
classformat.invokespecialconstructor =\ <Constructor 
classformat.invokespecialconstructorclose = >
classformat.invokespecialmethod =\ <Method 
classformat.invokespecialmethodclose = >
classformat.invokestaticmethod =\ <Method 
classformat.invokestaticmethodclose = >
classformat.invokevirtualmethod =\ <Method 
classformat.invokevirtualmethodclose = >
classformat.getfield = \ <Field 
classformat.getfieldclose = >
classformat.getstatic = \ <Field 
classformat.getstaticclose = >
classformat.putstatic =\ <Field 
classformat.putstaticclose = >
classformat.putfield =\ <Field 
classformat.putfieldclose = >
classformat.nargs =\ [nargs : 
classformat.interfacemethodrefindex = ] #
classfileformat.anyexceptionhandler=any
classfileformat.fielddescriptorindex=#
classfileformat.exceptiontablefrom=[pc: 
classfileformat.exceptiontableto=, pc: 
classfileformat.exceptiontablegoto=] -> 
classfileformat.exceptiontablewhen =\ when : 
classfileformat.linenumbertablefrom=[pc: 
classfileformat.linenumbertableto=, line: 
classfileformat.linenumbertableclose=]
classfileformat.localvariabletablefrom=[pc: 
classfileformat.localvariabletableto=, pc: 
classfileformat.localvariabletablelocalname=] local: 
classfileformat.localvariabletablelocalindex=\ index: 
classfileformat.localvariabletablelocaltype=\ type: 