/******************************************************************************* * Copyright (c) 2005 IBM Corporation and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     IBM Corporation - initial API and implementation ******************************************************************************/package org.eclipse.ui.menus;import org.eclipse.core.commands.common.AbstractNamedHandleEvent;/** * <p> * An event describing changes to an <code>SActionSet</code>. * </p> * <p> * Clients may instantiate this class, but must not extend. * </p> * <p> * <strong>EXPERIMENTAL</strong>. This class or interface has been added as * part of a work in progress. There is a guarantee neither that this API will * work nor that it will remain the same. Please do not use this API without * consulting with the Platform/UI team. * </p> *  * @since 3.2 * @see IActionSetListener#actionSetChanged(ActionSetEvent) */public final class ActionSetEvent extends AbstractNamedHandleEvent {	/**	 * The bit used to represent whether the action set has changed its	 * visibility.	 */	private static final int CHANGED_VISIBLE = LAST_USED_BIT << 1;	/**	 * The bit used to represent whether the action set has changed its	 * references.	 */	private static final int CHANGED_REFERENCES = LAST_USED_BIT << 2;	/**	 * The action set that has changed; this value is never <code>null</code>.	 */	private final SActionSet actionSet;	/**	 * Creates a new instance of <code>ActionSetEvent</code>.	 * 	 * @param actionSet	 *            The instance that has changed; must not be <code>null</code>.	 * @param nameChanged	 *            <code>true</code>, iff the name property changed.	 * @param descriptionChanged	 *            <code>true</code>, iff the description property changed.	 * @param visibleChanged	 *            <code>true</code>, iff the visibility property changed.	 * @param referencesChanged	 *            <code>true</code> if the references have changed;	 *            <code>false</code> otherwise.	 * @param definedChanged	 *            <code>true</code>, iff the defined property changed.	 */	public ActionSetEvent(final SActionSet actionSet,			final boolean nameChanged, final boolean descriptionChanged,			final boolean visibleChanged, final boolean referencesChanged,			final boolean definedChanged) {		super(definedChanged, descriptionChanged, nameChanged);		if (actionSet == null)			throw new NullPointerException(					"An action set event needs an action set"); //$NON-NLS-1$		this.actionSet = actionSet;		if (visibleChanged) {			changedValues |= CHANGED_VISIBLE;		}		if (referencesChanged) {			changedValues |= CHANGED_REFERENCES;		}	}	/**	 * Returns the instance that changed.	 * 	 * @return the instance that changed. Guaranteed not to be <code>null</code>.	 */	public final SActionSet getActionSet() {		return actionSet;	}	/**	 * Returns whether or not the visibility property changed.	 * 	 * @return <code>true</code>, iff the visibility property changed.	 */	public final boolean isVisibleChanged() {		return ((changedValues & CHANGED_VISIBLE) != 0);	}	/**	 * Returns whether or not the references have changed.	 * 	 * @return <code>true</code>, iff the references property changed.	 */	public final boolean isReferencesChanged() {		return ((changedValues & CHANGED_REFERENCES) != 0);	}}