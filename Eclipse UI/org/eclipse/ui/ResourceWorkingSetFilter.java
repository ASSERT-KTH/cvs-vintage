package org.eclipse.ui;/* * (c) Copyright IBM Corp. 2000, 2002. * All Rights Reserved. */import org.eclipse.core.resources.IResource;import org.eclipse.core.runtime.IAdaptable;import org.eclipse.core.runtime.IPath;import org.eclipse.jface.viewers.Viewer;import org.eclipse.jface.viewers.ViewerFilter;/** * A resource working set filter filters resources from a view that  * are neither a parent nor children of a working set element. *  * @since 2.0 */public class ResourceWorkingSetFilter extends ViewerFilter {	private IWorkingSet workingSet = null;	private IAdaptable[] cachedWorkingSet = null;	/**	 * Returns the active working set the filter is working with.	 * 	 * @return the active working set 	 */	public IWorkingSet getWorkingSet() {		return workingSet;	}	/**	 * Sets the active working set.	 * 	 * @param workingSet the working set the filter should work with	 */	public void setWorkingSet(IWorkingSet workingSet) {		this.workingSet = workingSet;	}	/**	 * Determines if an element should be filtered out.	 * 	 * @see ViewerFilter#select(Viewer, Object, Object)	 */	public boolean select(Viewer viewer, Object parentElement, Object element) {		IResource resource = null;				if (workingSet == null) {			return true;		}					if (element instanceof IResource) {			resource = (IResource) element;		}		else								if (element instanceof IAdaptable) {			IAdaptable adaptable = (IAdaptable) element;			resource = (IResource) adaptable.getAdapter(IResource.class);		}		if (resource != null) {			return isEnclosed(resource);		}		return true;	}	/**	 * Returns whether the element is a parent or a child	 * of a working set element.	 * 	 * @param element the resource to check	 * @return 	 * 	true=the element is a parent or a child of a working 	 * 	set element.	 * 	false=the element is neither a parent nor a child of a 	 * 	working set element.	 */	private boolean isEnclosed(IResource element) {		IPath elementPath = element.getFullPath();		IAdaptable[] workingSets = cachedWorkingSet;				// working set elements won't be cached if select is called		// directly, outside filter. fixes bug 14500.		if (workingSets == null) {			workingSets = workingSet.getElements();		}				for (int i = 0; i < workingSets.length; i++) {			IAdaptable adaptable = workingSets[i];			IResource resource;						if (adaptable instanceof IResource) {				resource = (IResource) adaptable;			}			else {				resource = (IResource) adaptable.getAdapter(IResource.class);			}			if (resource != null) {				IPath resourcePath = resource.getFullPath();				if (resourcePath.isPrefixOf(elementPath))					return true;				if (elementPath.isPrefixOf(resourcePath))					return true;			}		}		return false;	}	/**	 * Filters out elements that are neither a parent nor a child of 	 * a working set element.	 * 	 * @see ViewerFilter#filter(Viewer, Object, Object[])	 */	public Object[] filter(Viewer viewer, Object parent, Object[] elements) {		Object[] result = null;		if (workingSet != null)			cachedWorkingSet = workingSet.getElements();		try {			result = super.filter(viewer, parent, elements);		} finally {			cachedWorkingSet = null;		}		return result;	}}