/*******************************************************************************
 * Copyright (c) 2003 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Common Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.eclipse.ui.internal.roles;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;

/**
 * Scrap code that nicely models a tool for defining roles 
 * (by a product manager).
 * 
 * @since 3.0
 */
public class RoleBuildingUIFactory {

    private static final String ACTIVITYID = "activityId"; //$NON-NLS-1$
    private static final String ROLE = "role"; //$NON-NLS-1$
    private static final String ROLEMAP = "roleMap"; //$NON-NLS-1$
    /**
     * @param role
     * @param activityId
     * @return
     * @since 3.0
     */
    private static boolean isActivityEnabledFor(Role role, String activityId) {
        String [] ids = role.getActivityIds();
        for (int i = 0; i < ids.length; i++) {
            if (ids[i].equals(activityId)) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * @param composite
     * @since 3.0
     */
    public static Control createRoleControl(Composite composite) {
        final Composite control = new Composite(composite, SWT.NONE);
        Map roleMap = new HashMap(17);
        control.setData(ROLEMAP, roleMap);
        Role [] roles = RoleManager.getInstance().getRoles();
        GridLayout gridLayout = new GridLayout(roles.length + 1, true);
        control.setLayout(gridLayout);
        
        // top left spacer
        Label label = new Label(control, SWT.NO_FOCUS);
        GridData data = new GridData();
        label.setLayoutData(data);
        
        for (int i = 0; i < roles.length; i++) {
            label = new Label(control, SWT.NO_FOCUS);
            label.setText(roles[i].name);
            label.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_CENTER));
            List list = new ArrayList(Arrays.asList(roles[i].getActivityIds()));
            roleMap.put(roles[i], list);
        }
        
        // listener that updates the state of the selected roles.
        SelectionListener checkListener = new SelectionListener() {
            public void widgetSelected(SelectionEvent e) {
                Button button = (Button) e.item;
                
                Role role = (Role)button.getData(ROLE);
                String activityId = (String)button.getData(ACTIVITYID);

                Map map = (Map) control.getData(ROLEMAP);
                List list = (List) map.get(role);                
                if (button.getSelection()) {
                    list.add(activityId);
                }
                else {
                    list.remove(activityId);   
                }
            }

            public void widgetDefaultSelected(SelectionEvent e) {
            }
        };
                
        Collection activities = RoleManager.getInstance().getActivities();
        for (Iterator activitiesIterator = activities.iterator(); activitiesIterator.hasNext();) {
            Activity activity = (Activity) activitiesIterator.next();
            
            label = new Label(control, SWT.NO_FOCUS);
            label.setText(activity.getName());
            
            for (int i = 0; i < roles.length; i++) {
                Button button = createActivityCombo(control, roles[i], activity.getId());
                button.addSelectionListener(checkListener);
            }
        }
        return control;    
    }

    /**
     * Updates the RoleManager instance with data in the roleControl.  This 
     * only works on Controls generated by createRoleControl(Composite).
     * 
     * @param roleControl
     * @since 3.0
     */
    public static void updateRoleManager(Control roleControl) {
        Map map = (Map) roleControl.getData(ROLEMAP);
        for (Iterator i = map.values().iterator(); i.hasNext();) {
            Map.Entry entry = (Map.Entry) i.next();
            List activities = (List) entry.getValue();
            String [] activityIds = new String[activities.size()];
            activities.toArray(activityIds);            
        }
        
    }

    /**
     * @param control
     * @param role
     * @param activityId
     * @return Button 
     * @since 3.0
     */
    private static Button createActivityCombo(Composite control, Role role, String activityId) {
        Button button = new Button(control, SWT.CHECK);
        button.setData(ROLE, role);
        button.setData(ACTIVITYID, activityId);
        button.setSelection(isActivityEnabledFor(role, activityId));
        GridData data = new GridData(GridData.HORIZONTAL_ALIGN_CENTER);
        button.setLayoutData(data);
        return button;        
    }
}
