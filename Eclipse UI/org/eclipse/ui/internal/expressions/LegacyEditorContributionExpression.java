/******************************************************************************* * Copyright (c) 2005 IBM Corporation and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     IBM Corporation - initial API and implementation ******************************************************************************/package org.eclipse.ui.internal.expressions;import org.eclipse.core.expressions.EvaluationResult;import org.eclipse.core.expressions.ExpressionInfo;import org.eclipse.core.expressions.IEvaluationContext;import org.eclipse.core.runtime.CoreException;import org.eclipse.ui.ISources;import org.eclipse.ui.IWorkbenchWindow;import org.eclipse.ui.internal.util.Util;/** * <p> * An expression representing the <code>targetId</code> of the legacy editor * contributions. * </p> * <p> * Clients may neither instantiate nor extend this class. * </p> * <p> * <strong>EXPERIMENTAL</strong>. This class or interface has been added as * part of a work in progress. There is a guarantee neither that this API will * work nor that it will remain the same. Please do not use this API without * consulting with the Platform/UI team. * </p> *  * @since 3.2 */public final class LegacyEditorContributionExpression extends		WorkbenchWindowExpression {	/**	 * The identifier for the editor that must be active for this expression to	 * evaluate to <code>true</code>. This value is never <code>null</code>.	 */	private final String activeEditorId;	/**	 * Constructs a new instance of	 * <code>LegacyEditorContributionExpression</code>	 * 	 * @param activeEditorId	 *            The identifier of the editor to match with the active editor;	 *            may be <code>null</code>	 * @param window	 *            The workbench window in which this handler should be active.	 *            This value is never <code>null</code>.	 */	public LegacyEditorContributionExpression(final String activeEditorId,			final IWorkbenchWindow window) {		super(window);		if (activeEditorId == null) {			throw new NullPointerException(					"The targetId for an editor contribution must not be null"); //$NON-NLS-1$		}		this.activeEditorId = activeEditorId;	}	public final void collectExpressionInfo(final ExpressionInfo info) {		super.collectExpressionInfo(info);		info.addVariableNameAccess(ISources.ACTIVE_EDITOR_ID_NAME);	}	public final EvaluationResult evaluate(final IEvaluationContext context)			throws CoreException {		final EvaluationResult result = super.evaluate(context);		if (result == EvaluationResult.FALSE) {			return result;		}		final Object variable = context				.getVariable(ISources.ACTIVE_EDITOR_ID_NAME);		if (Util.equals(activeEditorId, variable)) {			return EvaluationResult.TRUE;		}		return EvaluationResult.FALSE;	}	public final String toString() {		final StringBuffer buffer = new StringBuffer();		buffer.append("LegacyEditorContributionExpression("); //$NON-NLS-1$		buffer.append(activeEditorId);		buffer.append(',');		buffer.append(getWindow());		buffer.append(')');		return buffer.toString();	}}