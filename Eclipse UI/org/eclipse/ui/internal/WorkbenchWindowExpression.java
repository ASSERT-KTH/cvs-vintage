/******************************************************************************* * Copyright (c) 2006 IBM Corporation and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     IBM Corporation - initial API and implementation ******************************************************************************/package org.eclipse.ui.internal;import org.eclipse.core.expressions.EvaluationResult;import org.eclipse.core.expressions.Expression;import org.eclipse.core.expressions.ExpressionInfo;import org.eclipse.core.expressions.IEvaluationContext;import org.eclipse.ui.ISources;import org.eclipse.ui.IWorkbenchWindow;/** * @since 3.2 *  */final class WorkbenchWindowExpression extends Expression {	/**	 * The workbench window that must be active for this expression to evaluate	 * to <code>true</code>. If this value is <code>null</code>, then any	 * workbench window may be active.	 */	private final IWorkbenchWindow activeWorkbenchWindow;	/**	 * Constructs a new instance.	 * 	 * @param workbenchWindow	 *            The workbench window which must be active for this expression	 *            to evaluate to <code>true</code>; may be <code>null</code>	 *            if this expression is always <code>true</code>.	 */	WorkbenchWindowExpression(final IWorkbenchWindow workbenchWindow) {		this.activeWorkbenchWindow = workbenchWindow;	}	public final void collectExpressionInfo(final ExpressionInfo info) {		if (activeWorkbenchWindow != null) {			info.addVariableNameAccess(ISources.ACTIVE_WORKBENCH_WINDOW_NAME);		}	}	public final EvaluationResult evaluate(final IEvaluationContext context) {		if (activeWorkbenchWindow != null) {			Object value = context					.getVariable(ISources.ACTIVE_WORKBENCH_WINDOW_NAME);			if (activeWorkbenchWindow.equals(value)) {				return EvaluationResult.TRUE;			}		}		return EvaluationResult.FALSE;	}	public final String toString() {		final StringBuffer buffer = new StringBuffer();		buffer.append("WorkbenchWindowExpression("); //$NON-NLS-1$		buffer.append(activeWorkbenchWindow);		buffer.append(')');		return buffer.toString();	}}