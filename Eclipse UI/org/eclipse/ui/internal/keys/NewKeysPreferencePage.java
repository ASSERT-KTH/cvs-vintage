/******************************************************************************* * Copyright (c) 2005 IBM Corporation and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     IBM Corporation - initial API and implementation ******************************************************************************/package org.eclipse.ui.internal.keys;import org.eclipse.jface.bindings.keys.KeySequenceText;import org.eclipse.jface.dialogs.IDialogConstants;import org.eclipse.jface.preference.PreferencePage;import org.eclipse.swt.SWT;import org.eclipse.swt.layout.GridData;import org.eclipse.swt.layout.GridLayout;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.widgets.Combo;import org.eclipse.swt.widgets.Composite;import org.eclipse.swt.widgets.Control;import org.eclipse.swt.widgets.Label;import org.eclipse.swt.widgets.Text;import org.eclipse.ui.IWorkbench;import org.eclipse.ui.IWorkbenchPreferencePage;import org.eclipse.ui.internal.dialogs.FilteredTextTree;/** * @since 3.1 */public final class NewKeysPreferencePage extends PreferencePage implements		IWorkbenchPreferencePage {	/*	 * (non-Javadoc)	 * 	 * @see org.eclipse.jface.preference.PreferencePage#createContents(org.eclipse.swt.widgets.Composite)	 */	protected final Control createContents(final Composite parent) {		GridData gridData = null;		GridLayout layout = null;		int widthHint;		// Creates a composite to hold all of the page contents.		final Composite page = new Composite(parent, SWT.NONE);		layout = new GridLayout(1, false);		layout.marginWidth = 0;		page.setLayout(layout);		// Create scheme controls.		final Composite schemeControls = new Composite(page, SWT.NONE);		layout = new GridLayout(4, false);		layout.marginWidth = 0;		schemeControls.setLayout(layout);		schemeControls.setLayoutData(new GridData());		final Label schemeLabel = new Label(schemeControls, SWT.NONE);		// TODO Needs internationalized text.		schemeLabel.setText("Scheme:"); //$NON-NLS-1$		final Combo schemeCombo = new Combo(schemeControls, SWT.DROP_DOWN				| SWT.READ_ONLY);		// TODO Needs to read the scheme names from somewhere useful.		schemeCombo.setItems(new String[] { "Default", "Emacs" }); //$NON-NLS-1$ //$NON-NLS-2$		gridData = new GridData();		gridData.grabExcessHorizontalSpace = true;		gridData.horizontalAlignment = SWT.FILL;		schemeCombo.setLayoutData(gridData);		final Button saveAsButton = new Button(schemeControls, SWT.PUSH);		gridData = new GridData();		widthHint = convertHorizontalDLUsToPixels(IDialogConstants.BUTTON_WIDTH);		saveAsButton.setText("Save As..."); //$NON-NLS-1$		gridData.widthHint = Math.max(widthHint, saveAsButton.computeSize(				SWT.DEFAULT, SWT.DEFAULT, true).x) + 5;		saveAsButton.setLayoutData(gridData);		final Button deleteSchemeButton = new Button(schemeControls, SWT.PUSH);		gridData = new GridData();		widthHint = convertHorizontalDLUsToPixels(IDialogConstants.BUTTON_WIDTH);		deleteSchemeButton.setText("Delete"); //$NON-NLS-1$		gridData.widthHint = Math.max(widthHint, deleteSchemeButton.computeSize(				SWT.DEFAULT, SWT.DEFAULT, true).x) + 5;		deleteSchemeButton.setLayoutData(gridData);		// Creates the filtered combo tree.		final FilteredTextTree filteredTree = new FilteredTextTree(page,				SWT.SINGLE | SWT.FULL_SELECTION);		gridData = new GridData();		gridData.grabExcessHorizontalSpace = true;		gridData.grabExcessVerticalSpace = true;		gridData.horizontalAlignment = SWT.FILL;		gridData.verticalAlignment = SWT.FILL;		gridData.horizontalSpan = 4;		filteredTree.setLayoutData(gridData);		// Creates the data area.		final Composite dataArea = new Composite(page, SWT.NONE);		layout = new GridLayout(2, true);		layout.marginWidth = 0;		dataArea.setLayout(layout);		gridData = new GridData();		gridData.grabExcessHorizontalSpace = true;		gridData.horizontalAlignment = SWT.FILL;		dataArea.setLayoutData(gridData);				final Composite leftDataArea = new Composite(dataArea, SWT.NONE);		layout = new GridLayout(2, false);		layout.marginWidth = 0;		leftDataArea.setLayout(layout);		leftDataArea.setLayoutData(new GridData());		final Label commandNameLabel = new Label(leftDataArea, SWT.NONE);		commandNameLabel.setText("Name:"); //$NON-NLS-1$		final Label commandNameValueLabel = new Label(leftDataArea, SWT.NONE);		commandNameValueLabel.setText("Word Completion"); //$NON-NLS-1$		gridData = new GridData();		gridData.grabExcessHorizontalSpace = true;		gridData.horizontalAlignment = SWT.FILL;		commandNameValueLabel.setLayoutData(gridData);		final Label descriptionLabel = new Label(leftDataArea, SWT.NONE);		descriptionLabel.setText("Description:"); //$NON-NLS-1$		final Label descriptionValueLabel = new Label(leftDataArea, SWT.NONE);		gridData = new GridData();		gridData.grabExcessHorizontalSpace = true;		gridData.horizontalAlignment = SWT.FILL;		descriptionValueLabel.setLayoutData(gridData);		final Composite rightDataArea = new Composite(dataArea, SWT.NONE);		layout = new GridLayout(2, false);		layout.marginWidth = 0;		rightDataArea.setLayout(layout);		gridData = new GridData();		gridData.grabExcessHorizontalSpace = true;		gridData.horizontalAlignment = SWT.FILL;		rightDataArea.setLayoutData(gridData);		final Label bindingLabel = new Label(rightDataArea, SWT.NONE);		bindingLabel.setText("Binding:"); //$NON-NLS-1$		final Text bindingText = new Text(rightDataArea, SWT.NONE);		gridData = new GridData();		gridData.grabExcessHorizontalSpace = true;		gridData.horizontalAlignment = SWT.FILL;		bindingText.setLayoutData(gridData);		final KeySequenceText bindingKeySequenceText = new KeySequenceText(				bindingText);		final Label whenLabel = new Label(rightDataArea, SWT.NONE);		whenLabel.setText("When:"); //$NON-NLS-1$		final Combo whenCombo = new Combo(rightDataArea, SWT.NONE);		gridData = new GridData();		gridData.grabExcessHorizontalSpace = true;		gridData.horizontalAlignment = SWT.FILL;		whenCombo.setLayoutData(gridData);		// Buttons		final Composite buttonBar = new Composite(page, SWT.NONE);		layout = new GridLayout(3, false);		layout.marginWidth = 0;		buttonBar.setLayout(layout);		gridData = new GridData();		gridData.horizontalAlignment = SWT.END;		buttonBar.setLayoutData(gridData);		final Button newButton = new Button(buttonBar, SWT.PUSH);		gridData = new GridData();		widthHint = convertHorizontalDLUsToPixels(IDialogConstants.BUTTON_WIDTH);		newButton.setText("New"); //$NON-NLS-1$		gridData.widthHint = Math.max(widthHint, newButton.computeSize(				SWT.DEFAULT, SWT.DEFAULT, true).x) + 5;		newButton.setLayoutData(gridData);		final Button deleteButton = new Button(buttonBar, SWT.PUSH);		gridData = new GridData();		widthHint = convertHorizontalDLUsToPixels(IDialogConstants.BUTTON_WIDTH);		deleteButton.setText("Delete"); //$NON-NLS-1$		gridData.widthHint = Math.max(widthHint, deleteButton.computeSize(				SWT.DEFAULT, SWT.DEFAULT, true).x) + 5;		deleteButton.setLayoutData(gridData);		final Button advancedButton = new Button(buttonBar, SWT.PUSH);		gridData = new GridData();		widthHint = convertHorizontalDLUsToPixels(IDialogConstants.BUTTON_WIDTH);		advancedButton.setText("Advanced..."); //$NON-NLS-1$		gridData.widthHint = Math.max(widthHint, advancedButton.computeSize(				SWT.DEFAULT, SWT.DEFAULT, true).x) + 5;		advancedButton.setLayoutData(gridData);		return page;	}	/*	 * (non-Javadoc)	 * 	 * @see org.eclipse.ui.IWorkbenchPreferencePage#init(org.eclipse.ui.IWorkbench)	 */	public void init(IWorkbench workbench) {		// TODO Auto-generated method stub	}		public final void updateSchemeCombo(final boolean registryChanged) {		if (registryChanged) {					}	}}