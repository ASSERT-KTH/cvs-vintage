/******************************************************************************* * Copyright (c) 2006 IBM Corporation and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     IBM Corporation - initial API and implementation ******************************************************************************/package org.eclipse.ui.internal.menus;import java.util.Iterator;import java.util.List;import org.eclipse.core.commands.Command;import org.eclipse.core.commands.ExecutionException;import org.eclipse.core.commands.NotEnabledException;import org.eclipse.core.commands.NotHandledException;import org.eclipse.core.commands.ParameterizedCommand;import org.eclipse.core.commands.common.NotDefinedException;import org.eclipse.jface.action.ActionContributionItem;import org.eclipse.jface.action.IContributionItem;import org.eclipse.jface.action.MenuManager;import org.eclipse.swt.SWT;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.swt.events.SelectionListener;import org.eclipse.swt.widgets.Menu;import org.eclipse.swt.widgets.MenuItem;import org.eclipse.ui.commands.ICommandService;import org.eclipse.ui.internal.WorkbenchWindow;/** * <p> * A wrapper around the new command-based menu services that speaks in terms of * the old menu manager class. * </p> * <p> * This class is not intended to be used outside of the * <code>org.eclipse.ui.workbench</code> plug-in. * </p> *  * @since 3.2 */public class LegacyMenuManager extends MenuManager {	/**	 * The window on which this menu manager exists; never <code>null</code>.	 */	private final WorkbenchWindow fWindow;	private IMenuService fMenuService;	private SMenuLayout fLayout;	/**	 * Constructs a new instance of <code>LegacyMenuManager</code>.	 * 	 * @param window	 *            The window on which this menu manager exists; must not be	 *            <code>null</code>.	 */	public LegacyMenuManager(final WorkbenchWindow window) {		if (window == null) {			throw new NullPointerException("The window cannot be null"); //$NON-NLS-1$		}		this.fWindow = window;		fMenuService = (IMenuService) fWindow.getService(IMenuService.class);	}	/*	 * (non-Javadoc)	 * 	 * @see org.eclipse.jface.action.MenuManager#update(boolean, boolean)	 */	protected void update(boolean force, boolean recursive) {		if (isDirty()) {			if (fLayout == null) {				// boolean tmp = false;				// if (tmp) {				generateMenus();				// }				fLayout = fMenuService.getLayout();			}			Menu menu = getMenu();			SMenuBuilder builder = new SMenuBuilder(fLayout, menu);			builder.build();			setDirty(false);		}	}	/**	 * 	 */	private void generateMenus() {		IContributionItem[] items = getItems();		SLocation location = new SLocation(new SBar());		for (int i = 0; i < items.length; i++) {			createMenu(items[i], location);		}	}	/**	 * @param item	 * @param location	 */	private void createMenu(IContributionItem item, SLocation location) {		if (item == null || item.getId() == null) {			return;		}		if (item instanceof ActionContributionItem) {			addActionContribution((ActionContributionItem) item, location);		} else if (item instanceof MenuManager) {			addMenu((MenuManager) item, location);		}	}	/**	 * @param manager	 * @param location	 */	private void addMenu(MenuManager menu, SLocation parentLocation) {		SMenu smenu = fMenuService.getMenu(menu.getId());		if (smenu.isDefined()) {			smenu.addLocation(parentLocation);		} else {			smenu.define(menu.getMenuText(), parentLocation);		}		SLocation location = new SLocation(parentLocation, menu.getId());		IContributionItem[] items = menu.getItems();		for (int i = 0; i < items.length; i++) {			createMenu(items[i], location);		}	}	/**	 * @param item	 * @param location	 */	private void addActionContribution(			ActionContributionItem actionContribution, SLocation parentLocation) {		String commandId = actionContribution.getAction()				.getActionDefinitionId();		if (commandId == null) {			System.err.println("When is a command not a command! " //$NON-NLS-1$					+ actionContribution.getId());			return;		}		SItem sitem = fMenuService.getItem(actionContribution.getId());		if (sitem.isDefined()) {			sitem.addLocation(parentLocation);		} else {			ICommandService commandService = (ICommandService) fWindow					.getService(ICommandService.class);			Command c = commandService.getCommand(commandId);			if (c.isDefined()) {				ParameterizedCommand pc = new ParameterizedCommand(c, null);				sitem.define(pc, actionContribution.getAction().getText(),						parentLocation);			} else {				System.err.println("undefined command " + commandId); //$NON-NLS-1$			}		}	}	private static class SMenuBuilder {		private SMenuLayout fLayout;		private Menu fRootMenu;		/**		 * @param rootNode		 * @param menu		 */		public SMenuBuilder(SMenuLayout rootNode, Menu menu) {			fLayout = rootNode;			fRootMenu = menu;		}		/**		 * 		 */		public void build() {			ILayoutNode root = fLayout.getMenuBar();			List children = root.getChildrenSorted();			for (Iterator i = children.iterator(); i.hasNext();) {				ILayoutNode child = (ILayoutNode) i.next();				addNode(fRootMenu, child);			}		}		/**		 * @param menu		 * @param node		 */		public void addNode(Menu menu, ILayoutNode node) {			MenuElement element = node.getMenuElement();			if (element instanceof SMenu) {				SMenu smenu = (SMenu) element;				MenuItem item = new MenuItem(menu, SWT.CASCADE);				item.setData(smenu);				try {					item.setText(smenu.getLabel());				} catch (NotDefinedException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}				Menu itemMenu = new Menu(menu);				item.setMenu(itemMenu);				List children = node.getChildrenSorted();				for (Iterator i = children.iterator(); i.hasNext();) {					ILayoutNode child = (ILayoutNode) i.next();					addNode(itemMenu, child);				}			} else if (element instanceof SItem) {				final SItem sitem = (SItem) element;				final MenuItem item = new MenuItem(menu, SWT.PUSH);				item.setData(element);				try {					item.setText(sitem.getCommand().getName());					item.addSelectionListener(new SelectionListener() {						public void widgetSelected(SelectionEvent e) {							try {								sitem.getCommand()										.executeWithChecks(null, null);							} catch (ExecutionException e1) {								// TODO Auto-generated catch block								e1.printStackTrace();							} catch (NotDefinedException e1) {								// TODO Auto-generated catch block								e1.printStackTrace();							} catch (NotEnabledException e1) {								// TODO Auto-generated catch block								e1.printStackTrace();							} catch (NotHandledException e1) {								// TODO Auto-generated catch block								e1.printStackTrace();							}						}						public void widgetDefaultSelected(SelectionEvent e) {						}					});				} catch (NotDefinedException e1) {					// TODO Auto-generated catch block					e1.printStackTrace();				}			} else if (element instanceof SWidget) {				SWidget swidget = (SWidget) element;				try {					swidget.getWidget().fill(menu, -1);				} catch (NotDefinedException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}			}		}	}}